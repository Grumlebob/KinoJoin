// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(KinoContext))]
    [Migration("20240402103358_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AgeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Censorship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Censorship")
                        .IsUnique();

                    b.ToTable("AgeRatings");
                });

            modelBuilder.Entity("Domain.Entities.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.HasKey("Id");

                    b.ToTable("Cinemas");
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domain.Entities.Host", b =>
                {
                    b.Property<string>("AuthId")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Email")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.HasKey("AuthId");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("Domain.Entities.JoinEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChosenShowtimeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultSelectOptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSelectOptionId");

                    b.HasIndex("HostId");

                    b.ToTable("JoinEvents");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeRatingId")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("KinoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PremiereDate")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthId")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("JoinEventId")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("JoinEventId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Domain.Entities.ParticipantVote", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("ShowtimeId")
                        .HasColumnType("integer");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("integer");

                    b.HasKey("ParticipantId", "ShowtimeId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("ParticipantVotes");
                });

            modelBuilder.Entity("Domain.Entities.Playtime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StartTime")
                        .IsUnique();

                    b.ToTable("Playtimes");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.Entities.SelectOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("VoteOption")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.HasKey("Id");

                    b.HasIndex("VoteOption", "Color")
                        .IsUnique();

                    b.ToTable("SelectOptions");
                });

            modelBuilder.Entity("Domain.Entities.Showtime", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CinemaId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaytimeId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("VersionTagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PlaytimeId");

                    b.HasIndex("RoomId");

                    b.HasIndex("VersionTagId");

                    b.ToTable("Showtimes");
                });

            modelBuilder.Entity("Domain.Entities.VersionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("JoinEventSelectOption", b =>
                {
                    b.Property<int>("JoinEventId")
                        .HasColumnType("integer");

                    b.Property<int>("SelectOptionsId")
                        .HasColumnType("integer");

                    b.HasKey("JoinEventId", "SelectOptionsId");

                    b.HasIndex("SelectOptionsId");

                    b.ToTable("JoinEventSelectOption");
                });

            modelBuilder.Entity("JoinEventShowtime", b =>
                {
                    b.Property<int>("JoinEventId")
                        .HasColumnType("integer");

                    b.Property<int>("ShowtimesId")
                        .HasColumnType("integer");

                    b.HasKey("JoinEventId", "ShowtimesId");

                    b.HasIndex("ShowtimesId");

                    b.ToTable("JoinEventShowtime");
                });

            modelBuilder.Entity("Domain.Entities.JoinEvent", b =>
                {
                    b.HasOne("Domain.Entities.SelectOption", "DefaultSelectOption")
                        .WithMany()
                        .HasForeignKey("DefaultSelectOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultSelectOption");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.HasOne("Domain.Entities.AgeRating", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId");

                    b.Navigation("AgeRating");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.HasOne("Domain.Entities.JoinEvent", null)
                        .WithMany("Participants")
                        .HasForeignKey("JoinEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ParticipantVote", b =>
                {
                    b.HasOne("Domain.Entities.Participant", null)
                        .WithMany("VotedFor")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SelectOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Showtime", null)
                        .WithMany()
                        .HasForeignKey("ShowtimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("Domain.Entities.Showtime", b =>
                {
                    b.HasOne("Domain.Entities.Cinema", "Cinema")
                        .WithMany()
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Playtime", "Playtime")
                        .WithMany()
                        .HasForeignKey("PlaytimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VersionTag", "VersionTag")
                        .WithMany()
                        .HasForeignKey("VersionTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Movie");

                    b.Navigation("Playtime");

                    b.Navigation("Room");

                    b.Navigation("VersionTag");
                });

            modelBuilder.Entity("JoinEventSelectOption", b =>
                {
                    b.HasOne("Domain.Entities.JoinEvent", null)
                        .WithMany()
                        .HasForeignKey("JoinEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SelectOption", null)
                        .WithMany()
                        .HasForeignKey("SelectOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoinEventShowtime", b =>
                {
                    b.HasOne("Domain.Entities.JoinEvent", null)
                        .WithMany()
                        .HasForeignKey("JoinEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Showtime", null)
                        .WithMany()
                        .HasForeignKey("ShowtimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.JoinEvent", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Navigation("VotedFor");
                });
#pragma warning restore 612, 618
        }
    }
}
