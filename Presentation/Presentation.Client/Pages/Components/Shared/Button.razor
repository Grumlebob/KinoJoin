@* <button class="@GetVariant() rounded-full py-3 px-2.5 md:py-3.5 md:px-4 text-nowrap @Class" onclick="@OnClick">@ChildContent</button> *@
<button class="@GetVariant() rounded-full py-[14px] px-[17px]  text-nowrap flex items-center justify-center @Class" onclick="@OnClick" type="@Type">@ChildContent</button>

@code {

    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.White;
    [Parameter] public required EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public bool WithoutEffect { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public string Type { get; set; } = "button";

    public enum ButtonVariant
    {
        White,
        Black,
        Red,
        Success,
        Warning,
        Error
    }

    private string GetVariant()
    {
        return Variant switch
        {
            ButtonVariant.Black => "bg-black text-white font-semibold",
            ButtonVariant.White => "bg-transparent text-black font-label border border-[#c4c4c4]" + (!WithoutEffect ? " transition duration-200  hover:bg-black hover:border-black hover:text-white" : ""),
            ButtonVariant.Red => "bg-primary text-white " + (!WithoutEffect ? " hover:bg-primary-dark active:translate-y-1 transition duration-200 active:bg-primary-darkest" : ""),
            ButtonVariant.Success => "bg-success text-white font-semibold" + (!WithoutEffect ? " hover:bg-success-dark active:bg-success-darkest" : ""),
            ButtonVariant.Warning => "bg-warning text-white font-semibold" + (!WithoutEffect ? " hover:bg-warning-dark active:bg-warning-darkest" : ""),
            ButtonVariant.Error => "bg-error text-white font-semibold" + (!WithoutEffect ? " hover:bg-error-dark active:bg-error-darkest" : ""),
            _ => throw new ArgumentOutOfRangeException()
        };
    }

}
