@inject IJSRuntime JsRuntime

<style>
    .empty-showtime {
        background-image: repeating-linear-gradient(
            +45deg,
            #ffffff, /* Lighter shade of gray for the streak */
            #ffffff 10px,
            #d5d5d5 10px, /* Darker shade of gray for the space between streaks */
            #d5d5d5 20px
        );
    }
</style>

<div class="mb-2 flex justify-between">
    <!-- CinemaLocation -->
    <h3 id="@_cinema.Id" class="text-xl font-bold mb-2.5">@_cinema.Name</h3>
    <button @onclick="ToggleCollapse">
        <svg class="transition-transform" style="@(_shouldRender ? "transform: rotate(0deg);" : "transform: rotate(-180deg);")" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
        </svg>
    </button>
</div>

@if (!_shouldRender)
{
    return;
}

<Virtualize Items="_showtimesByVersionTagList" Context="showtimesByVersionTag" OverscanCount="5" ItemSize="300">
    <ItemContent>
        @{ var versionTag = showtimesByVersionTag.First().VersionTag; }
        <div class="mb-4 max-w-screen-md relative">
            <!-- Version -->
            <div class="w-fit">
                <p class="bg-gray-200 px-2 py-1 font-label">@versionTag.Type</p>
            </div>

            <!-- Blur left edge (100%-30px to not cover scroll bar) -->
            <div class="absolute rounded h-[calc(100%-50px)] w-10 bg-gradient-to-r from-white items-center"></div>

            <!-- Blur right edge -->
            <div class="absolute rounded right-0 h-[calc(100%-50px)] w-10 bg-gradient-to-l from-white items-center"></div>

            <!-- Showtimes (padding LR and inline-block makes room for blurs to disappear wen scrolled all the way left or right)-->
            <div class="overflow-x-auto px-10">
                <table class="border-collapse inline-block">
                    <tr>
                        @{
                            // Determine the start and end dates of the interval
                            var startDate = Showtimes.Min(s => s.Playtime.StartTime);
                            var endDate = Showtimes.Max(s => s.Playtime.StartTime);

                            var latestDateForSpecificCinemaVersion = showtimesByVersionTag.Max(s => s.Playtime.StartTime.Date);

                            // Loop through each date in the interval
                            for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                            {
                                <th class="w-10 overflow-hidden text-ellipsis whitespace-nowrap border-b border-gray-200 p-2 text-center align-top">@CaptitalizeStart(date.ToString("ddd, dd/MM").Replace('.', '/'))</th>
                            }
                        }
                    </tr>
                    <tr>
                        <!-- Create table data for each showtime within the grouped date -->
                        @for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                        {
                            var localDate = date;
                            //Check if it exists if not, else
                            if (showtimesByVersionTag.Any(s => s.Playtime.StartTime.Date == localDate))
                            {
                                var dateColumn = showtimesByVersionTag.Where(s => s.Playtime.StartTime.Date == localDate).ToList();
                                <td class="p-2 align-top">
                                    @foreach (var showtime in dateColumn)
                                    {
                                        var vote = Votes.FirstOrDefault(v => v.ShowtimeId == showtime.Id);
                                        vote ??= new ParticipantVote { SelectedOption = SelectOptions.First() }; //because of lazy loading there may be a split second where the votes haven't been initialized
                                        <div id="@showtime.Id" class="w-24 h-16 max-h-16 p-1 mb-1 flex flex-col items-center justify-center  select-none rounded shadow-inset bg-@vote.SelectedOption.Color @(HasAnswered ? "" : "hover:border hover:border-gray-300 cursor-pointer")" value="@showtime.Playtime.StartTime" @onclick="@(() => HandleShowtimeClick(vote))">
                                            <div class="mb-1 text-center text-sm line-clamp-1"> @showtime.Room.Name </div >
                                            <div class="text-lg font-bold"> @showtime.Playtime.StartTime.ToString("HH:mm", CultureInfo.InvariantCulture) </div > <!--showtime - time-->
                                        </div>
                                    }
                                </td>
                            }
                            else
                            {
                                <!-- empty-showtime -->
                                <td class="p-2 align-top">
                                    <div class="mb-1 h-16 max-h-16 w-24 rounded p-1 shadow-inset empty-showtime">
                                    </div>
                                </td>
                            }
                        }
                    </tr>
                </table >
            </div >
        </div>
    </ItemContent>
    <Placeholder>
        <LoadingCircle/>
    </Placeholder>
</Virtualize>

@code {

    [Parameter] public List<Showtime> Showtimes { get; set; }

    [Parameter] public IGrouping<int, Showtime> ShowtimesByCinema { get; set; }

    [Parameter] public ICollection<ParticipantVote> Votes { get; set; } = [];

    [Parameter] public List<SelectOption> SelectOptions { get; set; } = [new SelectOption() { VoteOption = "Kan ikke", Color = "gray-200" }, new SelectOption() { VoteOption = "Kan godt", Color = "success" }];

    [Parameter] public EventCallback<ICollection<ParticipantVote>> VotesChanged { get; set; }

    [Parameter] public bool HasAnswered { get; set; }

    private Cinema _cinema = new();
    private List<IGrouping<string, Showtime>> _showtimesByVersionTagList = [];

    private bool _hasChanged = false;

    protected override void OnInitialized()
    {
        _cinema = ShowtimesByCinema.First().Cinema;
        _showtimesByVersionTagList = ShowtimesByCinema.GroupBy(s => s.VersionTag.Type).ToList();
    }

    private bool _shouldRender = true;

    private void ToggleCollapse()
    {
        _shouldRender = !_shouldRender;
        _hasChanged = true;
        StateHasChanged();
    }

    private async Task HandleShowtimeClick(ParticipantVote voteToIncrement)
    {
        if (HasAnswered) return;

        //find index of select option in order to increment it
        var next = (SelectOptions.FindIndex(
                       s => (s.VoteOption, s.Color) == (voteToIncrement.SelectedOption.VoteOption, voteToIncrement.SelectedOption.Color)) + 1)
                   % SelectOptions.Count;
        voteToIncrement.SelectedOption = SelectOptions[next];
        voteToIncrement.SelectedOptionId = SelectOptions[next].Id;

        await VotesChanged.InvokeAsync(Votes);
        _hasChanged = true;
    }

    protected override bool ShouldRender()
    {
        if (!_hasChanged) return false;
        _hasChanged = false;
        return true;
    }

    private string CaptitalizeStart(string s)
        => char.ToUpper(s[0]) + s[1..];

}