@inject IJSRuntime JsRuntime

<div class="mb-2 flex justify-between">
    <!-- CinemaLocation -->
    <h3 id="@_cinema.Id" class="text-xl font-bold mb-2.5">@_cinema.Name</h3>
    <button @onclick="ToggleCollapse">
        <svg class="transition-transform" style="@(_shouldRender ? "transform: rotate(0deg);" : "transform: rotate(-180deg);")" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
        </svg>
    </button>
</div>

@if (!_shouldRender)
{
    return;
}

<Virtualize Items="_showtimesByVersionTagList" Context="showtimesByVersionTag" OverscanCount="5" ItemSize="300">
    <ItemContent>

        @{
            var uniqueId = $"{_cinema.Id}-{showtimesByVersionTag.Key}";
        }

        <div class="mb-4 max-w-screen-md">
            <ShowtimeTable SelectOptions="SelectOptions" UniqueId="@uniqueId" Votes="Votes" VotesChanged="VotesChanged" Showtimes="@showtimesByVersionTag.ToList()" HasAnswered="HasAnswered" StartDate="@Showtimes.Min(s => s.Playtime.StartTime)"/>
        </div>
    </ItemContent>
    <Placeholder>
        <LoadingCircle/>
    </Placeholder>
</Virtualize>

@code {

    [Parameter] public List<Showtime> Showtimes { get; set; }

    [Parameter] public IGrouping<int, Showtime> ShowtimesByCinema { get; set; }

    [Parameter] public ICollection<ParticipantVote> Votes { get; set; } = [];

    [Parameter] public List<SelectOption> SelectOptions { get; set; } = [new SelectOption() { VoteOption = "Kan ikke", Color = "gray-200" }, new SelectOption() { VoteOption = "Kan godt", Color = "success" }];

    [Parameter] public EventCallback<ICollection<ParticipantVote>> VotesChanged { get; set; }

    [Parameter] public bool HasAnswered { get; set; }

    private HashSet<string> _showtimeContainerIds = new();

    private Cinema _cinema = new();
    private List<IGrouping<string, Showtime>> _showtimesByVersionTagList = [];

    private bool _hasChanged = false;


    protected override void OnInitialized()
    {
        _cinema = ShowtimesByCinema.First().Cinema ?? new();
        _showtimesByVersionTagList = ShowtimesByCinema.GroupBy(s => s.VersionTag.Type).ToList();
    }

    private bool _shouldRender = true;

    private void ToggleCollapse()
    {
        _shouldRender = !_shouldRender;
        _hasChanged = true;
        StateHasChanged();
    }

}
