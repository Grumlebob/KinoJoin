@inject IJSRuntime JsRuntime 
@inject NavigationManager NavigationManager

<div class="flex flex-col justify-center items-start gap-2 bg-slate-50 @(Desktop ? "w-70 ..." : "w-full")   rounded p-5 shadow-md">

    <div class="gap-1">
        <div class="flex w-full items-center gap-2">
            <p class="truncate font-bold ...">
                @Showtime.Movie.Title
            </p>

            @if (Event.ChosenShowtimeId == Showtime.Id)
            {
                <div class="rounded-full bg-opacity-25 p-1 py-0 text-xs font-normal bg-success text-success-darkest">
                    <p >Aftalt tid</p>
                </div>
            }

        </div>
        <div class="flex w-full items-center gap-1">
            <p class="truncate text-xs font-normal text-gray-700 ...">@Showtime.VersionTag.Type</p>
        </div>
    </div>

    <div class="flex w-full items-center gap-1">
        <CinemaIcon Class="fill-black "/>
        <p class="truncate font-normal ...">
            @Showtime.Cinema.Name - @Showtime.Room.Name
        </p>
    </div>

    <div class="flex w-full items-center gap-1">
        <DateIcon Class="fill-black"></DateIcon>
        <p class="truncate font-normal ...">
            @Showtime.Playtime.StartTime.ToLocalTime().ToString("dd. MMM") - kl. @Showtime.Playtime.StartTime.ToLocalTime().ToString("HH:mm") - @Showtime.Playtime.StartTime.ToLocalTime().AddMinutes((double)Showtime.Movie.Duration).ToString("HH:mm")
        </p>
    </div>
    <div class="flex w-full items-center gap-1">
        @if (!Desktop)
        {
            if (HasVoted)
            {
                <div class="flex w-full items-center gap-1">
                    @if (Vote != null && Vote.SelectedOptionId != Event.DefaultSelectOptionId)
                    {
                        <SingleCheckIcon Class="@("stroke-" + Vote.SelectedOption.Color)"/>
                    }
                </div>
            }
        }
        <div class="flex h-fit w-full justify-end gap-1">
            @if (!Desktop)
            {
                <button @onclick="ShowVotes" class="flex items-center gap-1 rounded-full border-2 border-gray-300 bg-white px-2 py-1 hover:bg-gray-300">

                    <p class="whitespace-nowrap">
                        Se stemmer (@Event.Participants?.Count(p => p.VotedFor.Any(v => v.ShowtimeId == Showtime.Id && v.SelectedOptionId != Event.DefaultSelectOptionId)))
                    </p>
                </button>
            }


            @if (IsHost)
            {
                <button class="w-fit whitespace-nowrap rounded-full px-3 py-2 text-white bg-primary hover:bg-primary-dark" @onclick="() => OpenConfirmationDialog(Showtime.Id)">
                    Bekræft event
                </button>
            }
        </div>
    </div>

</div>
@if (!Desktop)
{
    <dialog id="@($"votesDialog{Showtime.Id}")" class="fixed w-full max-w-md rounded p-4 bg-slates-300 xs:h-dvh">

        <div class="mb-4 flex justify-between">
            <h4 class="text-lg font-bold">Stemmer</h4>
            <button onclick="@(async () => await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", $"votesDialog{Showtime.Id}"))">
                <CrossIcon/>
            </button>
        </div>
        @{ var participantsAndVotes = Event.Participants?.Where(p => p.VotedFor.Any(v => v.ShowtimeId == Showtime.Id)).Select(p => (p, p.VotedFor.First(v => v.ShowtimeId == Showtime.Id))).ToList(); }
        @foreach (var (participant, vote) in participantsAndVotes)
        {
            <div class="flex w-full justify-between gap-2">
                <p>@participant.Nickname</p>
                <SingleCheckIcon Class="@("stroke-" + vote.SelectedOption.Color)"/>
            </div>
        }
    </dialog>
}

<dialog class="rounded p-5" id="@("confirmEvent" + Showtime.Id + Desktop)">
    <div class="flex flex-col items-end gap-4">
        <h2 class="text-xl font-bold">Ønsker du at bekræfte forestillingen for dette event?</h2>
        <div class="flex gap-1">
            <button class="w-16 rounded-full p-3 text-white bg-error py-0.5 hover:bg-error-dark" @onclick="() => CloseDialog(Showtime.Id)">Nej</button>
            <button class="w-16 rounded-full p-3 text-white bg-success py-0.5 hover:bg-success-dark" @onclick="@(async () => { await OpenDetailsDialog(Showtime, Showtime.Id);  await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog","confirmEvent" + Showtime.Id + Desktop);})">Ja</button>
        </div>
    </div>
</dialog>
<dialog class="rounded p-5" id="@("confirmDetails" + Showtime.Id + Desktop)">
    <div class="flex flex-col items-center gap-4">
        <h2 class="text-xl font-bold">Event valgt</h2>
        <div class="flex @(Desktop ? "" : "flex-col") gap-2 md:gap-1">
            <button class="bg-primary rounded-full p-3 py-1   @(Desktop ? "" : "w-full") text-white hover:bg-primary-dark" onclick="@(async () => { await JsRuntime.InvokeVoidAsync("open", $"https://kino.dk/ticketflow/showtimes/{Showtime.Id}", "_blank"); })">Bestil billetter</button>
            <button class="border border-secondary px-3 py-1 shadow duration-300 transition transition duration-100  rounded-full hover:bg-secondary hover:text-white @(Desktop ? "" : "w-full")" onclick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "calendar-dialog" + Desktop); })">Tilføj til egen kalender</button>
            <button class="border border-secondary px-3 py-1 shadow duration-300 transition transition duration-100  rounded-full hover:bg-secondary hover:text-white @(Desktop ? "" : "w-full")" onclick="@(async () => await GoToMailToLink(Showtime))">Send mail til deltagere</button>
            <button class="border border-secondary px-3 py-1 shadow duration-300 transition transition duration-100  rounded-full hover:bg-secondary hover:text-white @(Desktop ? "" : "w-full")" @onclick="ShareEvent">Del</button>
            <button class="bg-error rounded-full p-3 py-1 @(Desktop ? "" : "w-full") text-white hover:bg-error-dark" @onclick="() => CloseDialog(Showtime.Id)">Luk</button>
        </div>
    </div>
</dialog>


<CalendarDialog Event="Event" Desktop="Desktop" Showtime="@Showtime"/>

@code {

    [Parameter] public required Showtime Showtime { get; set; }

    [Parameter] public required JoinEvent Event { get; set; }

    [Parameter] public bool HasVoted { get; set; }

    [Parameter] public ParticipantVote? Vote { get; set; }

    [Parameter] public bool Desktop { get; set; }

    [Parameter] public bool IsHost { get; set; }


    private async Task ShowVotes()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "votesDialog" + Showtime.Id);
    }

    private async Task OpenDetailsDialog(Showtime showtime, int index)
    {
        Event.ChosenShowtimeId = showtime.Id;
        var httpClient = new HttpClient();
        var response = await httpClient.PutAsJsonAsync($"{NavigationManager.BaseUri}putJoinEvent", Event);
        var id = await response.Content.ReadAsStringAsync();
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "confirmDetails" + index + Desktop);
    }

    private async Task OpenConfirmationDialog(int index)
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "confirmEvent" + index + Desktop);
    }

    private async Task CloseDialog(int index)
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "confirmEvent" + index + Desktop);
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "confirmDetails" + index + Desktop);
    }

    private async Task GoToMailToLink(Showtime showtime)
    {
        var mails = Event.Participants.Where(p => p.Email is not null).Select(p => p.Email);
        var text = Event.Description + "\n" + "Valgt forestilling: " + showtime.Movie.Title + ", " + showtime.Cinema.Name + ", " + showtime.Playtime.StartTime.ToLocalTime().ToString("dd. MMM HH:mm");
        await JsRuntime.InvokeVoidAsync("open", $"mailto:{string.Join(",", mails)}?subject={Event.Title}&body={text}", "_blank");
    }

    private async Task ShareEvent()
    {
        var showtime = Event.Showtimes.First(s => s.Id == Event.ChosenShowtimeId);

        var data = new
        {
            title = Event.Title,
            text = Event.Description + "\n" + "Valgt forestilling: " + showtime.Movie.Title + ", " + showtime.Cinema.Name + ", " + showtime.Playtime.StartTime.ToLocalTime().ToString("dd. MMM HH:mm")
        };

        await JsRuntime.InvokeVoidAsync("navigator.share", data);
    }

}
