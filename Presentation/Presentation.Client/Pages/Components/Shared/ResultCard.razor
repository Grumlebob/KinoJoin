@inject IJSRuntime JsRuntime 
@inject NavigationManager NavigationManager
@inject IKinoJoinHttpClient KinoJoinHttpClient
<div class="flex  flex-col justify-start text-start items-start gap-2 bg-slate-50   rounded p-5 shadow-md  text-wrap  ">


    <div class="@(Desktop ? "" : "gap-1") md:h-24">
        <div class="flex w-full items-center gap-2 ">

            <div class="flex w-full items-center gap-1">

                <p class="font-bold ">
                    @Showtime.Movie.Title
                </p>
            </div>


        </div>


        <p class=" md:hidden  text-xs font-normal text-gray-700 ">@Showtime.VersionTag.Type</p>

        <div class="flex flex-col  hidden md:block">
            @foreach (var version in Showtime.VersionTag.Type.Split("-"))
            {
                <p class="  text-xs font-normal text-gray-700 ">@version.Trim()</p>
            }
        </div>

    </div>

    <hr class="h-px w-full rounded-full bg-gray-300"/>
    <div class="gap-1 md:h-24">
        <div class="flex w-full items-center gap-1 ">
            <p class=" font-normal">
                @Showtime.Cinema.Name
            </p>
        </div>

        <div class="flex w-full items-center gap-1">
            <p class=" text-xs font-normal text-gray-700 ">@Showtime.Room.Name</p>
        </div>
    </div>

    <hr class=" h-px w-full rounded-full bg-gray-300"/>

    <div class="flex flex-col h-full w-full justify-end gap-2">
        <div class="gap-1 h-full flex flex-col justify-end">
            <div class="flex w-full items-center gap-1">
                <img src="Icons/DateIcon.svg" alt="date icon"/>
                <p class=" font-normal ">
                    @Showtime.Playtime.StartTime.ToString("dd. MMM").

                </p>
                @if (!Desktop)
                {
                    <p> - @Showtime.Playtime.StartTime.ToString("HH:mm") - @Showtime.Playtime.StartTime.AddMinutes((double)Showtime.Movie.Duration).ToString("HH:mm") </p>
                }

            </div>

            <div class="flex w-full items-center gap-1 hidden md:block">
                <p class="  text-sm font-normal  ">
                    @Showtime.Playtime.StartTime.ToString("HH:mm") - @Showtime.Playtime.StartTime.AddMinutes((double)Showtime.Movie.Duration).ToString("HH:mm")
                </p>
            </div>
        </div>

        @if (!Desktop || IsHost)
        {
            <hr class=" h-px w-full rounded-full bg-gray-300"/>
        }
        <div class="flex w-full items-center gap-1 ">


            @if (!Desktop)
            {
                if (HasVoted)
                {
                    <div class="flex w-full items-center gap-1">
                        @if (Vote != null && Vote.SelectedOptionId != Event.DefaultSelectOptionId)
                        {
                            <CheckIconComp Class="@("stroke-" + Vote.SelectedOption.Color)"/>
                        }
                    </div>
                }
            }
            <div class="flex h-fit w-full justify-end items-end md:justify-start md:items-start gap-1 w-full">
                @if (!Desktop)
                {
                    <Button OnClick="@ShowVotes">Se stemmer (@Event.Participants?.Count(p => p.VotedFor.Any(v => v.ShowtimeId == Showtime.Id && v.SelectedOptionId != Event.DefaultSelectOptionId)))</Button>
                }


                @if (Event.ChosenShowtimeId == Showtime.Id)
                {
                    <div class="  flex justify-center py-[14px] px-[15px] rounded-full bg-opacity-25  font-normal bg-success text-nowrap text-success-darkest">
                        <p>Aftalt tid</p>
                        <button class="p-1 rounded-full  hover:bg-success" @onclick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "confirmDetails" + Showtime.Id + Desktop); })">
                            <img src="Icons/ThreeDotsIcon.svg" alt="options"/>
                        </button>
                    </div>
                }

                @if (IsHost && Event.ChosenShowtimeId != Showtime.Id)
                {
                    <Button Variant="Button.ButtonVariant.Red" OnClick="@(() => OpenConfirmationDialog(Showtime.Id))">Bekræft event</Button>
                }
            </div>
        </div>
    </div>

</div>
@if (!Desktop)
{
    <dialog id="@($"votesDialog{Showtime.Id}")" class="fixed w-full max-w-md rounded p-4 bg-slates-300 xs:h-dvh">

        <div class="mb-4 flex justify-between">
            <h4 class="text-lg font-bold">Stemmer</h4>
            <button onclick="@(async () => await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", $"votesDialog{Showtime.Id}"))">
                <img src="Icons/CrossIcon.svg" alt="close"/>
            </button>
        </div>
        @{ var participantsAndVotes = Event.Participants?.Where(p => p.VotedFor.Any(v => v.ShowtimeId == Showtime.Id)).Select(p => (p, p.VotedFor.First(v => v.ShowtimeId == Showtime.Id))).ToList(); }
        @foreach (var (participant, vote) in participantsAndVotes)
        {
            <div class="flex w-full justify-between gap-2">
                <p>@participant.Nickname</p>
                <CheckIconComp Class="@("stroke-" + vote.SelectedOption.Color)"/>
            </div>
        }
    </dialog>
}

<dialog class="rounded p-5" id="@("confirmEvent" + Showtime.Id + Desktop)">
    <div class="flex flex-col items-end gap-4">
        <h2 class="text-xl font-bold">Ønsker du at bekræfte forestillingen for dette event?</h2>
        <div class="flex gap-1">
            <Button Variant="Button.ButtonVariant.White" OnClick="@(() => CloseDialog(Showtime.Id))">Nej</Button>
            <Button Variant="Button.ButtonVariant.Black" OnClick="@(async () => { await OpenDetailsDialog(Showtime, Showtime.Id); await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "confirmEvent" + Showtime.Id + Desktop); })">Ja</Button>
        </div>
    </div>
</dialog>
<dialog class="rounded p-5" id="@("confirmDetails" + Showtime.Id + Desktop)">
    <div class="flex flex-col items-center gap-4">
        <h2 class="text-xl font-bold">Event valgt</h2>
        <div class="space-y-3">
            <div class="flex flex-col gap-2 md:gap-1">
                <Button Variant="Button.ButtonVariant.Red" OnClick="@(async () => await JsRuntime.InvokeVoidAsync("open", $"https://kino.dk/ticketflow/showtimes/{Showtime.Id}", "_blank"))" Class="@(Desktop ? "" : "w-full")">Bestil Billetter</Button>
                <Button Variant="Button.ButtonVariant.White" OnClick="@(async () => await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "calendar-dialog" + Desktop))">Tilføj til egen kalender</Button>
                <Button Variant="Button.ButtonVariant.White" OnClick="@(async () => await GoToMailToLink(Showtime))">Send mail til deltagere</Button>
                @if (!Desktop)
                {
                    <Button Variant="Button.ButtonVariant.White" OnClick="@ShareEvent">Del</Button>
                }
            </div>
            <div class="w-full flex justify-end">
                <Button Variant="Button.ButtonVariant.Black" OnClick="@(() => CloseDialog(Showtime.Id))">Luk</Button>
            </div>
        </div>
    </div>
</dialog>


<CalendarDialog Event="Event" Desktop="Desktop" Showtime="@Showtime"/>

@code {

    [Parameter] public required Showtime Showtime { get; set; }

    [Parameter] public required JoinEvent Event { get; set; }

    [Parameter] public bool HasVoted { get; set; }

    [Parameter] public ParticipantVote? Vote { get; set; }

    [Parameter] public bool Desktop { get; set; }

    [Parameter] public bool IsHost { get; set; }

    [Parameter] public EventCallback OnEventConfirmed { get; set; }


    private async Task ShowVotes()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "votesDialog" + Showtime.Id);
    }

    private async Task OpenDetailsDialog(Showtime showtime, int index)
    {
        Event.ChosenShowtimeId = showtime.Id;
        await KinoJoinHttpClient.PutJoinEventAsync(Event);
        OnEventConfirmed.InvokeAsync();
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "confirmDetails" + index + Desktop);
    }

    private async Task OpenConfirmationDialog(int index)
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "confirmEvent" + index + Desktop);
    }

    private async Task CloseDialog(int index)
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "confirmEvent" + index + Desktop);
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "confirmDetails" + index + Desktop);
    }

    private async Task GoToMailToLink(Showtime showtime)
    {
        var mails = Event.Participants.Where(p => p.Email is not null).Select(p => p.Email);
        var text = Event.Description + "\n" + "Valgt forestilling: " + showtime.Movie.Title + ", " + showtime.Cinema.Name + ", " + showtime.Playtime.StartTime.ToString("dd. MMM HH:mm");
        await JsRuntime.InvokeVoidAsync("open", $"mailto:{string.Join(",", mails)}?subject={Event.Title}&body={text}", "_blank");
    }

    private async Task ShareEvent()
    {
        var showtime = Event.Showtimes.First(s => s.Id == Event.ChosenShowtimeId);

        var data = new
        {
            title = Event.Title,
            text = Event.Description + "\n" + "Valgt forestilling: " + showtime.Movie.Title + ", " + showtime.Cinema.Name + ", " + showtime.Playtime.StartTime.ToString("dd. MMM HH:mm")
        };

        await JsRuntime.InvokeVoidAsync("navigator.share", data);
    }

}