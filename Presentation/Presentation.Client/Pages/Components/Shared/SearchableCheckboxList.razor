<div class="flex flex-col w-full">
    <!-- Accordion header -->
    <div @onclick="toggleAccordion" class="cursor-pointer bg-blue-600 text-white px-5 py-3 rounded-t-md">
        <span>@FilterTitle</span>
    </div>

    <!-- Selected items as chips -->
    <div class="mt-0.5">
        @foreach (var id in SelectedItems)
        {
            <span class="chip inline-flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full mr-2 mb-2">
                @IdsToLabels[id]
                <button @onclick="() => SelectedItems.Remove(id)" class="ml-1.5 rounded-full text-sm p-0.5 hover:bg-blue-200">X</button>
            </span>
        }
    </div>

    <!-- Accordion content including search bar and list -->
    @if (isAccordionOpen)
    {
        <div class="bg-white px-5 py-3 rounded-b-md shadow">
            <!-- Search bar -->
            <input type="text" placeholder="Søg" @oninput="@(e => { _searchTerm = e.Value?.ToString() ?? string.Empty; })" class="w-full p-2 border border-gray-300 rounded-md mb-4"/>

            <!-- List -->
            <div class="max-h-40 overflow-y-auto">
                @foreach (var (id, label) in IdsToLabels.Where(item => item.Value.ToLowerInvariant().Contains(_searchTerm.ToLowerInvariant())).Select(item => (item.Key, item.Value)))
                {
                    var checkBoxId = $"{_uniqueId.ToString()}-{id}";
                    <div class="flex items-center whitespace-nowrap overflow-hidden mb-2">
                        <input type="checkbox" id="@checkBoxId" value="@id" @onchange="@(e => HandleCheckboxChange(e, id))" checked="@(SelectedItems.Contains(id))" class="mr-2 h-5 w-5"/>
                        <label for="@checkBoxId" class="flex-grow truncate ml-1">@label</label>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {

    /**
     * <summary>Each displayed item in the checkbox list must have a unique id and a label for display</summary>
     */
    [Parameter]
    public Dictionary<int, string> IdsToLabels { get; set; } = new();

    [Parameter] public HashSet<int> SelectedItems { get; set; } = [];

    [Parameter] public string FilterTitle { get; set; }

    private string _searchTerm = string.Empty;
    private readonly Guid _uniqueId = Guid.NewGuid(); //this is used to generate unique ids for checkbox items

    private void HandleCheckboxChange(ChangeEventArgs e, int movieId)
    {
        if ((bool)e.Value!) //if checkbox was checked
        {
            SelectedItems.Add(movieId);
            return;
        }

        SelectedItems.Remove(movieId);
    }

    private bool isAccordionOpen = false;

    private void toggleAccordion()
    {
        isAccordionOpen = !isAccordionOpen;
    }

}