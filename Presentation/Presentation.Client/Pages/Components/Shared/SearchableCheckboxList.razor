<div class="flex flex-col w-full">
    <!-- Accordion header -->
    <div @onclick="ToggleAccordion" class="cursor-pointer bg-secondary text-white px-5 py-3 @(_isAccordionOpen ? "rounded-t" : "rounded") flex justify-between items-center">
        @if (IconPath != null)
        {
            <img src="@IconPath" alt="Movie Icon" class="h-6 w-6 mr-2"/>
        }
        <span>@FilterTitle</span>
        <svg class="transition-transform" style="@(_isAccordionOpen ? "transform: rotate(0deg);" : "transform: rotate(-90deg);")" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
        </svg>
    </div>

    <!-- Accordion content including search bar and list -->
    <div class="@(_isAccordionOpen ? "block" : "hidden") transition-all overflow-hidden bg-white px-5 py-3 rounded-b shadow">
        <!-- Search bar -->
        <input type="text" placeholder="Søg" @oninput="@(e => { _searchTerm = e.Value?.ToString() ?? string.Empty; })" class="w-full p-2 border border-gray-300 rounded-md mb-4"/>
        <!-- List -->
        <div class="max-h-40 overflow-y-auto">
            @foreach (var (id, label) in IdsToLabels.Where(item => item.Value.ToLowerInvariant().Contains(_searchTerm.ToLowerInvariant())).Select(item => (item.Key, item.Value)))
            {
                var checkBoxId = $"{_uniqueId.ToString()}-{id}";
                <div class="flex items-center whitespace-nowrap overflow-hidden mb-2">
                    <input type="checkbox" id="@checkBoxId" value="@id" @onchange="@(e => HandleCheckboxChange(e, id))" checked="@(SelectedItems.Contains(id))" class="mr-2 h-5 w-5 accent-secondary"/>
                    <label for="@checkBoxId" class="flex-grow truncate ml-1">@label</label>
                </div>
            }
        </div>
    </div>

    <!-- Selected items as chips -->
    <div class="mt-1.5 flex flex-wrap">
        @foreach (var id in SelectedItems)
        {
            <span class="chip inline-flex items-center bg-gray-100 border text-black text-sm font-medium px-2.5 py-0.5 rounded-full mr-2 mb-2">
                @IdsToLabels[id]
                <button @onclick="() => SelectedItems.Remove(id)" class="ml-1.5  rounded-full text-sm p-0.5 hover:bg-gray-200 focus:outline-none "><CrossIcon/></button>
            </span>
        }
    </div>
</div>

@code {

    /**
     * <summary>Each displayed item in the checkbox list must have a unique id and a label for display</summary>
     */
    [Parameter]
    public Dictionary<int, string> IdsToLabels { get; set; } = new();

    [Parameter] public HashSet<int> SelectedItems { get; set; } = [];

    [Parameter] public string FilterTitle { get; set; } = "";

    [Parameter] public string? IconPath { get; set; }

    private string _searchTerm = string.Empty;
    private readonly Guid _uniqueId = Guid.NewGuid(); //this is used to generate unique ids for checkbox items

    private void HandleCheckboxChange(ChangeEventArgs e, int movieId)
    {
        if ((bool)e.Value!) //if checkbox was checked
        {
            SelectedItems.Add(movieId);
            return;
        }

        SelectedItems.Remove(movieId);
    }

    private bool _isAccordionOpen = false;

    private void ToggleAccordion()
    {
        _isAccordionOpen = !_isAccordionOpen;
    }

    public void CloseAccordion()
    {
        _isAccordionOpen = false;
    }

}