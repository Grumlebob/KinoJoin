@inject IJSRuntime JsRuntime

@if (Showtimes.Count == 0)
{
    return;
}

<div class="flex flex-col items-center justify-center content-center  mt-16 ">
    <p class="font-bold text-3xl">@LegendTitle</p>
    <div class=" @(HasAnswered ? "mb-5" : "mb-7") w-fit space-y-1 ">
        <div class="mb-2 flex w-fit divide-x-2">
            @{
                var firstOption = true;
            }
            @foreach (var option in SelectOptions)
            {
                <div class="@(firstOption ? "pr-2" : "px-2") ">
                    <div class="rounded text-xl px-1 shadow-md  bg-@option.Color ">
                        <p>@option.VoteOption</p>
                    </div>
                </div>
                firstOption = false;
            }
        </div>
    </div>
</div>
@if (HasAnswered)
{
    <div class="flex items-center content-center justify-center w-full mb-5">
        <div class="border shadow w-fit p-3">
            <p class="text-2xl font-bold text-success-darkest">Du har allerede indsendt et svar p√• dette event</p>
        </div>
    </div>
}
<div class="space-y-5">
    @{
        var isFirst = true;
    }
    <Virtualize Items="_showtimesByMovieList" Context="showtimesByMovie" OverscanCount="3">
        <ItemContent>
            @{ var movie = showtimesByMovie.First().Movie; }
            <ShowtimeSelectorHeading ShowDivider="!isFirst" HasAnswered="@HasAnswered" Movie="movie">
                @{
                    var showtimesByCinemaList = showtimesByMovie.GroupBy(s => s.Cinema.Id).ToList();
                }
                <Virtualize Items="showtimesByCinemaList" OverscanCount="8" Context="showtimesByCinema" ItemSize="300">
                    <ItemContent>
                        @{ var cinema = showtimesByCinema.First().Cinema; }
                        <div class="mb-2 flex justify-between">
                            <!-- CinemaLocation -->
                            <h3 id="@cinema.Id" class="text-xl font-bold mb-2.5">@cinema.Name</h3>
                            <button @onclick="() => ToggleCollapse(movie.Id, cinema.Id)">
                                <svg class="transition-transform" style="@(_hiddenMovieCinemaSections.Contains((movie.Id, cinema.Id)) ? "transform: rotate(0deg);" : "transform: rotate(-180deg);")" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                                </svg>
                            </button>
                        </div>

                        @if (!_hiddenMovieCinemaSections.Contains((movie.Id, cinema.Id)))
                        {
                            var showtimesByVersionTagList = showtimesByCinema.GroupBy(s => s.VersionTag.Type).ToList();

                            <Virtualize Items="showtimesByVersionTagList" Context="showtimesByVersionTag" OverscanCount="5" ItemSize="300">
                                <ItemContent>

                                    @{
                                        var uniqueId = $"{cinema.Id}-{showtimesByVersionTag.Key}";
                                    }

                                    <div class="mb-4 max-w-screen-md">
                                        <div class="w-fit">
                                            <p class="bg-gray-300 px-2 py-1 font-label">@showtimesByVersionTag.Key</p>
                                        </div>
                                        <ShowtimeTable SelectOptions="SelectOptions" DefaultSelectOption="DefaultSelectOption" UniqueId="@uniqueId" Votes="Votes" VotesChanged="VotesChanged" Showtimes="@showtimesByVersionTag.ToList()" HasAnswered="HasAnswered" StartDate="@Showtimes.Min(s => s.Playtime.StartTime.Date)"/>
                                    </div>
                                </ItemContent>
                                <Placeholder>
                                    <LoadingIndicator/>
                                </Placeholder>
                            </Virtualize>
                        }
                    </ItemContent>
                    <Placeholder>
                        <LoadingIndicator/>
                    </Placeholder>
                </Virtualize>
            </ShowtimeSelectorHeading>
            @{ isFirst = false; }
        </ItemContent>
        <Placeholder>
            <LoadingIndicator/>
        </Placeholder>
    </Virtualize>
</div>

@if (Showtimes.Count > 0)
{
    <Virtualize Items="MoviesWithOutShowTimes" Context="movie" OverscanCount="5">
        <ItemContent>
            <ShowtimeSelectorHeading Movie="movie">
                <div class="inline-flex items-center justify-center gap-4 rounded bg-gray-300 p-2">
                    <span>Ingen forestillinger fundet for denne film med de valgte filtre</span>
                </div>
            </ShowtimeSelectorHeading>
        </ItemContent>
        <Placeholder>
            <LoadingIndicator/>
        </Placeholder>
    </Virtualize>
}


@code {

    [Parameter] public string LegendTitle { get; set; } = "";

    [Parameter] public List<Showtime> Showtimes { get; set; } = [];

    [Parameter] public List<Movie> MoviesWithOutShowTimes { get; set; } = [];

    [Parameter] public ICollection<ParticipantVote> Votes { get; set; } = [];

    [Parameter] public EventCallback<ICollection<ParticipantVote>> VotesChanged { get; set; }

    //Fallback values provided
    [Parameter] public List<SelectOption> SelectOptions { get; set; } = [new SelectOption { VoteOption = "Kan ikke", Color = "gray-300" }, new SelectOption { VoteOption = "Kan godt", Color = "success" }];
    [Parameter] public SelectOption DefaultSelectOption { get; set; } = new() { VoteOption = "Kan ikke", Color = "gray-300" };

    [Parameter] public bool HasAnswered { get; set; }

    private List<IGrouping<int, Showtime>> _showtimesByMovieList = [];

    ///<summary>Cinemas under movies that are toggled away: (MovieId, CinemaId)</summary>
    private HashSet<(int, int)> _hiddenMovieCinemaSections = [];

    protected override void OnInitialized()
    {
        _showtimesByMovieList = Showtimes.GroupBy(s => s.Movie.Id).ToList();
    }

    private void ToggleCollapse(int movieId, int cinemaId)
    {
        if (!_hiddenMovieCinemaSections.Add((movieId, cinemaId)))
        {
            _hiddenMovieCinemaSections.Remove((movieId, cinemaId));
        }

        StateHasChanged();
    }

}