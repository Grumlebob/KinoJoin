@inject IJSRuntime JsRuntime

<style>
/* Base container for each movie */
.Redbox {
    display: flex;
    align-items: flex-start; /* Align the start of the items */
    margin-bottom: 20px;
}

/* Styling for the poster image */
.PosterImage {
    position: sticky;
    top: 65px;
    margin-right: 20px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
}

/* Container for movie details */
.MovieDetails {
    flex-grow: 1; /* Allow the movie details to fill the remaining space */
}

/* Header for each movie */
.MovieHeader h2 {
    margin-top: 0; /* Remove top margin for the movie title */
    margin-bottom: 0.5em; /* Add a little space below the title */
}

.MovieHeader p {
    margin-top: 0; /* Remove top margin for other details */
    margin-bottom: 0.5em; /* Consistent space below each detail */
}

/* Styling for cinema location */
.CinemaLocation {
    margin-top: 1em; /* Add space above the cinema location */
    margin-bottom: 0.5em; /* Add space below the cinema location */
}

/* Styling for versions and showtimes */
.Version {
    margin-bottom: 1em; /* Add space below each version */
}

/* Base styles for the showtime labels */
.Showtimes .showtime-label {

    display: block; /* or inline-block, depending on how you want to handle the layout */
    padding: 4px; /* Adjust padding as necessary */
    margin-bottom: 4px;
    
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    user-select: none;
    background-color: #eee;
    border-radius: 4px;
    box-shadow: inset 0 0 5px rgba(0,0,0,0.2);
    white-space: nowrap; /* Keep text in a single line */
    width: 100px;
}

/* Style for the room name */
.Showtimes .showtime-room {
    font-size: 14px; /* Smaller font size for sal name */
    margin-bottom: 2px; /* Space between sal name and playtime */
    overflow: hidden; /* Ensures the content does not expand the container */
    text-overflow: ellipsis; /* Adds an ellipsis when the text overflows */
    white-space: nowrap; /* Prevents the text from wrapping to the next line */
   
}

/* Style for the playtime */
.Showtimes .showtime-time {
    font-weight: bold;
    font-size: 24px; /* Larger font size for playtime */
}

.Showtimes .table-container {
    overflow-x: auto; /* Adds horizontal scrollbar if the table exceeds the container width */

}

.Showtimes table {
    border-collapse: collapse; /* Collapse borders for a clean look */
}

/* Style for the table headers and cells to have a fixed width */
.Showtimes th,
.Showtimes td {
    width: 10px; /* Fixed width */
    text-align: left; /* Align text to the left */
    padding: 8px; /* Add some padding */
    white-space: nowrap; /* Keep the content in a single line */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add an ellipsis to clipped text */
    border-bottom: 1px solid #ddd; /* Add a bottom border for separation */
    vertical-align: top; /* Align the content to the top of the cell */
}

.Showtimes td {
    padding: 8px; /* Add some padding */
}


.movie-info {
    background-color: #E0E0E0; /* Light gray background */
    padding: 5px;
    border-radius: 5px; /* Optional: rounds the corners of the background */
    display: inline-flex; /* Places children next to each other */
    align-items: center; /* Aligns children vertically in the center */
    justify-content: center; /* Centers children horizontally */
    gap: 10px; /* Creates space between the children */
}

.movie-info .premiere,
.movie-info .duration {
    color: #333; /* Dark gray text color for better contrast */
    font-size: 14px; /* Adjust font size as needed */
}

.tooltip-container:hover {
    background-color: grey;
}

.tooltip-container:hover .tooltip-content {
    visibility: visible;
}

.tooltip-content {
    visibility: hidden;
    position: absolute;
    z-index: 1;
    transform: translateY(-8rem); /* hard coded for now */
    background-color: lightgray;
}

.empty-showtime {
    width: 100px;
    height: 67px;
    padding: 12px;
    margin-top: 0px;
    margin-bottom: 4px;
    
    border-radius: 4px;
    background-image: repeating-linear-gradient(
        +45deg,
        #ffffff, /* Lighter shade of gray for the streak */
        #ffffff 10px,
        #d5d5d5 10px, /* Darker shade of gray for the space between streaks */
        #d5d5d5 20px
    );
}

#trailerPopUp {
    height: 100vh;
    width: 100vw;
    position: fixed;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.3);
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
}

.delete-participant-button {
        color: red;
        font-size: 20px;
}
    
.delete-participant-button:hover {
        background-color: lightcoral;
        cursor: pointer;
}


</style>

@if(Showtimes.Count==0)
{
   return;
}

@foreach (var option in SelectOptions)
{
    <span style="background-color: @option.Color">@option.VoteText</span>
}

@foreach (var showtimesByMovie in Showtimes.GroupBy(s => s.Movie.Id))
{
    Movie movie = showtimesByMovie.First().Movie;
    <div class="Redbox">
        <div class="PosterImage">
            <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank">
                <img src="@movie.ImageUrl" alt="Movie Poster" width="200" height="300"/>
            </a>
            <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank">
                <button style="margin-top: 3px">LÃ¦s mere</button>
            </a>

            <button style="margin-top: 3px" @onclick="async () => { await ShowMovieTrailer(movie); }">Se trailer</button>

        </div>
        <div class="MovieDetails">
            <div class="MovieHeader">
                <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank" style="text-decoration: none; color: black">
                    <h2>@movie.Title</h2>
                </a>

                <div class="movie-info">
                    <span class="premiere">Premiere @movie.PremiereDate | </span>
                    <span class="duration">Varighed @movie.Duration min</span>
                </div>

            </div>
            @foreach (var showtimesByCinema in showtimesByMovie.GroupBy(s => s.Cinema.Id))
            {
                var cinema = showtimesByCinema.First().Cinema;
                <div class="CinemaLocation">
                    <h2 id="@cinema.Id">@cinema.Name</h2>
                </div>
                @foreach (var showtimesByVersionTag in showtimesByCinema.GroupBy(s => s.VersionTag.Id))
                {
                    var versionTag = showtimesByVersionTag.First().VersionTag;
                    <div class="Version">
                        <strong>@versionTag.Type</strong>
                        <div class="Showtimes">
                            <div class="table-container">
                                <table>
                                    <tr>
                                        @{
                                            // Determine the start and end dates of the interval
                                            var startDate = Showtimes.Min(s => s.Playtime.StartTime.ToLocalTime());
                                            var endDate = Showtimes.Max(s => s.Playtime.StartTime.ToLocalTime());

                                            var latestDateForSpecificCinemaVersion = Showtimes.Where(s => s.Movie.Id == showtimesByMovie.Key && s.Cinema.Id == showtimesByCinema.Key && s.VersionTag.Id == showtimesByVersionTag.Key).Max(s => s.Playtime.StartTime.ToLocalTime().Date);


                                            // Loop through each date in the interval
                                            for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                                            {
                                                <th>@date.ToString("dd. MMM")</th>
                                            }
                                        }
                                    </tr>
                                    <tr>
                                        <!-- Create table data for each showtime within the grouped date -->
                                        @for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                                        {
                                            //Check if it exists if not, else
                                            @if (Showtimes.Any(s => s.Movie.Id == showtimesByMovie.Key && s.Cinema.Id == showtimesByCinema.Key && s.VersionTag.Id == showtimesByVersionTag.Key && s.Playtime.StartTime.ToLocalTime().Date == date))
                                            {
                                                <td>
                                                    @foreach (var showtime in Showtimes.Where(s => s.Movie.Id == showtimesByMovie.Key && s.Cinema.Id == showtimesByCinema.Key && s.VersionTag.Id == showtimesByVersionTag.Key && s.Playtime.StartTime.ToLocalTime().Date == date))
                                                    {
                                                        var index = VotedFor.IndexOf(VotedFor.First(v => v.showtime.Id == showtime.Id));
                                                        <div class="showtime-label" style="background-color: @SelectOptions.First(s =>VotedFor[index].vote==s.Value).Color" value="@showtime.Playtime.StartTime.ToLocalTime()" @onclick="@(async () => { var next = ((SelectOptions.IndexOf(SelectOptions.First(s =>VotedFor[index].vote==s.Value))+1) % SelectOptions.Count); VotedFor[index] = (showtime,SelectOptions[next].Value); await VotedForChanged.InvokeAsync(VotedFor);})">
                                                                                                                                                                                                                                                                                                                                                                                                                                                         <div class="showtime-room">@showtime.Room.Name</div>
                                                            <div class="showtime-time">@showtime.Playtime.StartTime.ToLocalTime().ToString("HH:mm")</div>
                                                        </div>
                                                    }
                                                </td>
                                            }
                                            else
                                            {
                                                <td>
                                                    <div class="empty-showtime">
                                                    </div>
                                                </td>
                                            }
                                        }
                                    </tr>
                                </table >
                            </div >
                        </div >
                    </div>
                }
            }
        </div>
    </div>
}

@if (Showtimes.Count > 0)
    {
        foreach (var movie in MoviesWithOutShowTimes)
        {
            <div class="Redbox">
                <div class="PosterImage">
                    <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank">
                        <img src="@movie.ImageUrl" alt="Movie Poster" width="200" height="300"/>
                    </a>

                    <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank">
                        <button style="margin-top: 3px">LÃ¦s mere</button>
                    </a>

                    <button style="margin-top: 3px" @onclick="async () => { await ShowMovieTrailer(movie); }">Se trailer</button>

                </div>
                <div class="MovieDetails">
                    <div class="MovieHeader">
                        <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank" style="text-decoration: none; color: black">
                            <h2>@movie.Title</h2>
                        </a>

                        <div class="movie-info">
                            <span>Ingen forestillinger fundet for denne film med de valgte filtre</span>
                        </div>

                    </div>
                </div>
            </div>
        }
    }



@if (_trailerUrl != null)
{
    <div id="trailerPopUp">
        <iframe src="@_trailerUrl" width="60%" height="60%" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
        </iframe>
        <button onclick="@(() => { _trailerUrl = null; })">Luk</button>
    </div>
}


@code {
    
    [Parameter]
    public List<Showtime> Showtimes { get; set; } = [];
    
    [Parameter]
    public List<Movie> MoviesWithOutShowTimes { get; set; } = [];
    
    [Parameter]
    public List<(Showtime showtime,Vote vote)> VotedFor { get; set; } = [];
    
    [Parameter]
    public EventCallback<List<(Showtime,Vote vote)>> VotedForChanged { get; set; }
    
    [Parameter]
    public List<SelectOption> SelectOptions { get; set; } = new List<SelectOption>(){new SelectOption(){Value=Vote.No,VoteText="Kan ikke",Color="lightgray"}, new SelectOption(){Value=Vote.Yes, VoteText="Kan godt", Color="lightgreen"}};
    

    private string? _trailerUrl;

    private async Task ShowMovieTrailer(Movie movie)
    {
        var client = new HttpClient();
        var apiString = $"https://api.kino.dk{movie.KinoURL}?region=content&format=json";
        var json = await client.GetStringAsync(apiString);

        MovieRoot? movieRoot = JsonConvert.DeserializeObject<MovieRoot>(json);
        if (movieRoot?.Content?.field_trailer?.FieldMediaOembedVideo?.trailerUrl == null) //no video found
        {
            await JsRuntime.InvokeVoidAsync("open", $"https://www.youtube.com/results?search_query={movie.Title}+trailer", "_blank"); //search in youtube
            return;
        }

        var uri = new Uri(movieRoot.Content.field_trailer.FieldMediaOembedVideo.trailerUrl);
        var videoId = uri.Segments.Last() == "watch" ? HttpUtility.ParseQueryString(uri.Query)["v"] : uri.Segments.Last();

        if (videoId == null) await JsRuntime.InvokeVoidAsync("open", $"https://www.youtube.com/results?search_query={movie.Title}+trailer", "_blank"); //search in youtube
        else _trailerUrl = $"https://www.youtube.com/embed/{videoId}";
    }

}