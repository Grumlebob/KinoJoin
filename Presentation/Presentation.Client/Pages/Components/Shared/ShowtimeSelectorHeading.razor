@inject IJSRuntime JsRuntime

<div class="mb-8 ">
    <div class="bg-gray-300 rounded-full w-full h-px my-5"></div>
    <div class="grid gap-4  grid-cols-[0.5fr_1fr] grid-rows-[auto_auto] md:grid-cols-[200px_1fr]">
        <!-- PosterImage -->
        <div class="row-span-2 space-y-2 md:min-w-48 md:sticky md:top-16 md:row-span-3 md:self-start">
            <a href=@($"https://kino.dk{Movie.KinoURL}") target="_blank">
                <img src="@Movie.ImageUrl" alt="Movie Poster" class="w-full max-h-full rounded-sm shadow"/>
            </a>
            <!--Læs mere og trailer-->
            <div class="hidden flex-col items-center md:flex space-y-1 px-3">

                <a href=@($"https://kino.dk{Movie.KinoURL}") target="_blank" class="rounded-full border text-center border-black shadow duration-300 transition px-3 py-2 font-label hover:bg-neutral-950 hover:text-white w-full">Læs mere</a>

                <button class="rounded-full border border-black shadow duration-300 transition px-3 py-2 font-label hover:bg-neutral-950 hover:text-white w-full" @onclick="async () => { await ShowMovieTrailer(Movie); }">Se trailer</button>
            </div>
        </div>
        <!-- MovieHeader -->
        <div class="col-start-2">
            <div class="flex flex-col space-y-2">
                <a href=@($"https://kino.dk{Movie.KinoURL}") target="_blank" class="block text-black no-underline divide-y-8">

                    <h2 class="text-2xl font-bold md:text-4xl">@Movie.Title</h2>
                </a>
                <div class="block">
                    <div class="inline-flex flex-col items-start justify-between gap-2 rounded md:flex-row md:items-center md:gap-4 md:p-2">
                        <!-- movie-info -->
                        <div class="flex space-x-1">
                            <span class="hidden text-sm text-neutral-400 font-label md:block">Premiere</span>
                            <span class="text-sm text-neutral-400 font-label">@Movie.PremiereDate </span>
                        </div>
                        <span class="hidden text-sm text-neutral-400 md:block">|</span>
                        <div class="flex space-x-1">
                            <span class="hidden text-sm text-neutral-400 font-label md:block">Varighed</span>
                            <span class="text-sm text-neutral-400 font-label">@Movie.Duration min</span>
                        </div>
                    </div>
                </div>
                <div class="block md:hidden">
                    <!--Læs mere og trailer mobile-->
                    <a href=@($"https://kino.dk{Movie.KinoURL}") target="_blank" class="inline-block rounded-full border border-black px-3 py-2 transition duration-100 font-label hover:bg-neutral-950 hover:text-white w-32 text-center">Læs mere</a>
                </div>
                <div class="block md:hidden">
                    <button @onclick="async () => { await ShowMovieTrailer(Movie); }" class="inline-block rounded-full border border-black px-3 py-2 transition duration-100 font-label hover:bg-neutral-950 hover:text-white w-32">Se trailer</button>
                </div>
            </div>
        </div>

        <div class="col-span-3 md:col-start-2 md:row-start-2 md:row-end-3">
            @if (ChildContent is not null)
            {
                @ChildContent
            }
        </div>
    </div>
</div>

@if (_trailerUrl != null)
{
    <div class="fixed top-0 left-0 h-screen w-screen flex items-center justify-center">
        <div class="relative w-3/5 h-3/5"> <!-- Adjust width and height as necessary -->
            <iframe src="@_trailerUrl" width="100%" height="100%" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
            </iframe>
            <button class="absolute top-0 right-0 mt-2 mr-2 bg-error rounded hover:bg-error-dark" onclick="@(() => { _trailerUrl = null; })">
                <CrossIcon Class="fill-white"/>
            </button>
        </div>
    </div>


}


@code {


    [Parameter] public required Movie Movie { get; set; }

    // add children
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string? _trailerUrl;

    private async Task ShowMovieTrailer(Movie movie)
    {
        var client = new HttpClient();
        var apiString = $"https://api.kino.dk{movie.KinoURL}?region=content&format=json";
        var json = await client.GetStringAsync(apiString);

        var movieRoot = JsonConvert.DeserializeObject<MovieRoot>(json);
        if (movieRoot?.Content?.field_trailer?.FieldMediaOembedVideo?.trailerUrl == null) //no video found
        {
            await JsRuntime.InvokeVoidAsync("open", $"https://www.youtube.com/results?search_query={movie.Title}+trailer", "_blank"); //search in youtube
            return;
        }

        var uri = new Uri(movieRoot.Content.field_trailer.FieldMediaOembedVideo.trailerUrl);
        var videoId = uri.Segments.Last() == "watch" ? HttpUtility.ParseQueryString(uri.Query)["v"] : uri.Segments.Last();

        if (videoId == null) await JsRuntime.InvokeVoidAsync("open", $"https://www.youtube.com/results?search_query={movie.Title}+trailer", "_blank"); //search in youtube
        else _trailerUrl = $"https://www.youtube.com/embed/{videoId}";
    }

}

