@inject IJSRuntime JsRuntime

<style>
    .empty-showtime {
        background-image: repeating-linear-gradient(
            +45deg,
            #ffffff, /* Lighter shade of gray for the streak */
            #ffffff 10px,
            #d5d5d5 10px, /* Darker shade of gray for the space between streaks */
            #d5d5d5 20px
        );
    }
</style>

<div class="relative">
    <!-- Blur left edge (100%-50px to not cover scroll bar) -->
    <div id="@UniqueId-blur-left" class="absolute rounded h-[calc(100%-50px)] w-10 bg-gradient-to-r from-white items-center">
        <button>left</button>
    </div>

    <!-- Blur right edge -->
    <div id="@UniqueId-blur-right" class="absolute rounded right-0 h-[calc(100%-50px)] w-10 bg-gradient-to-l from-white items-center">
        <button>right</button>
    </div>

    <!-- Showtimes (padding LR and inline-block makes room for blurs to disappear wen scrolled all the way left or right)-->
    <div id="@UniqueId" class="overflow-x-auto px-10">
        <table class="border-collapse inline-block">
            <tr>
                @{
                    // Determine the start and end dates of the interval
                    var startDate = Showtimes.Min(s => s.Playtime.StartTime);

                    var latestDateForSpecificCinemaVersion = Showtimes.Max(s => s.Playtime.StartTime.Date);

                    // Loop through each date in the interval
                    for (var date = startDate.Date; date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                    {
                        <th class="w-10 overflow-hidden text-ellipsis whitespace-nowrap border-b border-gray-200 p-2 text-center align-top">@CaptitalizeStart(date.ToString("ddd, dd/MM").Replace('.', '/'))</th>
                    }
                }
            </tr>
            <tr>
                <!-- Create table data for each showtime within the grouped date -->
                @for (var date = startDate.Date; date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                {
                    var innerDate = date;
                    //Check if it exists if not, else
                    if (Showtimes.Any(s => s.Playtime.StartTime.Date == innerDate))
                    {
                        var dateColumn = Showtimes.Where(s => s.Playtime.StartTime.Date == innerDate).ToList();
                        <td class="p-2 align-top">
                            @foreach (var showtime in dateColumn)
                            {
                                var vote = Votes.FirstOrDefault(v => v.ShowtimeId == showtime.Id);
                                vote ??= new ParticipantVote { SelectedOption = SelectOptions.First() }; //because of lazy loading there may be a split second where the votes haven't been initialized
                                <div id="@showtime.Id" class="w-24 h-16 max-h-16 p-1 mb-1 flex flex-col items-center justify-center  select-none rounded shadow-inset bg-@vote.SelectedOption.Color @(HasAnswered ? "" : "hover:border hover:border-gray-300 cursor-pointer")" value="@showtime.Playtime.StartTime" @onclick="@(() => HandleShowtimeClick(vote))">
                                    <div class="mb-1 text-center text-sm line-clamp-1"> @showtime.Room.Name </div >
                                    <div class="text-lg font-bold"> @showtime.Playtime.StartTime.ToString("HH:mm", CultureInfo.InvariantCulture) </div > <!--showtime - time-->
                                </div>
                            }
                        </td>
                    }
                    else
                    {
                        <!-- empty-showtime -->
                        <td class="p-2 align-top">
                            <div class="mb-1 h-16 max-h-16 w-24 rounded p-1 shadow-inset empty-showtime">
                            </div>
                        </td>
                    }
                }
            </tr>
        </table >
    </div >
</div>

@code {

    [Parameter] public required string UniqueId { get; set; }
    
    [Parameter] public DateTime? StartDate { get; set; }

    [Parameter] public List<Showtime> Showtimes { get; set; } = [];

    [Parameter] public ICollection<ParticipantVote> Votes { get; set; } = [];

    //Fallback values provided
    [Parameter] public List<SelectOption> SelectOptions { get; set; } = [new SelectOption { VoteOption = "Kan ikke", Color = "gray-200" }, new SelectOption { VoteOption = "Kan godt", Color = "success" }];

    [Parameter] public EventCallback<ICollection<ParticipantVote>> VotesChanged { get; set; }

    [Parameter] public bool HasAnswered { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("subscribeScroll", UniqueId);
    }

    private async Task HandleShowtimeClick(ParticipantVote voteToIncrement)
    {
        if (HasAnswered) return;

        //find index of select option in order to increment it
        var next = (SelectOptions.FindIndex(
                       s => (s.VoteOption, s.Color) == (voteToIncrement.SelectedOption.VoteOption, voteToIncrement.SelectedOption.Color)) + 1)
                   % SelectOptions.Count;
        voteToIncrement.SelectedOption = SelectOptions[next];
        voteToIncrement.SelectedOptionId = SelectOptions[next].Id;

        await VotesChanged.InvokeAsync(Votes);
    }

    private string CaptitalizeStart(string s)
        => char.ToUpper(s[0]) + s[1..];

}