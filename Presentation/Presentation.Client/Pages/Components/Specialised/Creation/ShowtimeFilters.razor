@using Microsoft.Extensions.Primitives
<h2 style="margin-top: 10px">Tilpas filtrer</h2>

<p style="margin-bottom: 0">Film</p>
<SearchableCheckboxList @ref="MovieCheckList" IdsToLabels="@MovieIdsToNames"/>

<p style="margin-bottom: 0">Biografer</p>
<SearchableCheckboxList @ref="CinemaCheckList" IdsToLabels="@CinemaIdsToNames"/>

<p style="margin-bottom: 0">Genrer</p>
<SearchableCheckboxList @ref="GenreCheckList" IdsToLabels="@GenreIdsToNames"/>

<p style="margin-bottom: 0">Start dato</p>
<input style="margin-bottom: 10px" type="date" @bind="StartDate"/>

<br/>

<p style="margin-bottom: 0">Slut dato</p>
<input style="margin-bottom: 10px" type="date" @bind="EndDate"/>

@code {
    //NOTE: This component is quite shallow. When done move the content (checklists etc) out in JoinCreate for easier access, less pass through and more depth
    //The method that uses the filters to get show times can then also be moved to JoinCreate
    [Parameter]
    public Dictionary<int, string> CinemaIdsToNames { get; set; } = new();
    [Parameter]
    public Dictionary<int, string> MovieIdsToNames { get; set; } = new();
    [Parameter]
    public Dictionary<int, string> GenreIdsToNames { get; set; } = new();

    public SearchableCheckboxList MovieCheckList { get; private set; } = new();
    public SearchableCheckboxList CinemaCheckList { get; private set; } = new();
    public SearchableCheckboxList GenreCheckList { get; private set; } = new();
    
    public DateTime StartDate { get; set; } = DateTime.Today;
    public DateTime EndDate { get; set; } = DateTime.Today.AddDays(30);

    public async Task<List<Showtime>> UpdateShowtimeFilters()
    {
        var movieIds = MovieCheckList.SelectedItems.ToList();
        var cinemaIds = CinemaCheckList.SelectedItems.ToList();
        var genreIds = GenreCheckList.SelectedItems.ToList();
        var fromDate = StartDate.ToString("format here");
        var toDate = EndDate.ToString("format here");
        
        var filterString = new StringBuilder();
        
        for (var i = 0; i < movieIds.Count; i++)
        {
            filterString.Append($"&movies[{i}]={movieIds[i]}");
        }
        for (var i = 0; i < cinemaIds.Count; i++)
        {
            filterString.Append($"&cinemas[{i}]={cinemaIds[i]}");
        }
        for (var i = 0; i < genreIds.Count; i++)
        {
            filterString.Append($"&genres[{i}]={genreIds[i]}");
        }

        filterString.Append($"STARTDATE??={fromDate}"); //format=2024-02-28T08:12:00.000Z
        filterString.Append($"ENDDATE??={toDate}"); //format=2024-03-01T08:12:00.000Z
        
        var apiUrl = "https://api.kino.dk/ticketflow/showtimes?region=content&format=json" + filterString
                     +"&sort=most_purchased";
        var httpClient = new HttpClient();
        var json = await httpClient.GetStringAsync(apiUrl);
        
        //convert json to showtimes
        var apiResultObject = JsonConvert.DeserializeObject<Root>(json);
        if (apiResultObject == null) return [];

        var idToMovieObject = new Dictionary<int, Movie>();
        
        foreach (var jsonCinema in apiResultObject.Content.Content.Content.Content)
        {
            var cinemaObject = new Cinema()
            {
                Id = jsonCinema.Id,
                Name = CinemaIdsToNames[jsonCinema.Id]
            };

            foreach (var jsonMovie in jsonCinema.Movies) {

                Movie? movieObject;

                if (!idToMovieObject.TryGetValue(jsonMovie.Id, out movieObject))
                {
                    movieObject = new Movie()
                    {
                        Id = jsonMovie.Id,
                        Title = MovieIdsToNames[jsonMovie.Id],
                        PremiereDate = jsonMovie.Content.FieldPremiere,
                        KinoURL = jsonMovie.Content.URL,
                        AgeRating = jsonMovie.Content.FieldCensorshipIcon,
                        ImageUrl = jsonMovie.Content.FieldPoster.FieldMediaImage.Sources[0].Srcset,
                        Duration = duration,
                        Showtimes = new List<Showtime>()
                    }
                }

                if (movies.All(m => m.Id != jsonMovie.Id))
                {
                    int.TryParse(jsonMovie.Content.FieldPlayingTime, out var duration);

                    if (jsonMovie.Content.URL == null)
                    {
                        Console.WriteLine("KINO URL NULL, BØR IKKE SKE");
                    }

                    movieObject = new Movie()
                    {
                        Id = jsonMovie.Id,
                        Title = MovieIdAndName[jsonMovie.Id],
                        PremiereDate = jsonMovie.Content.FieldPremiere,
                        KinoURL = jsonMovie.Content.URL,
                        AgeRating = jsonMovie.Content.FieldCensorshipIcon,
                        ImageUrl = jsonMovie.Content.FieldPoster.FieldMediaImage.Sources[0].Srcset,
                        Duration = duration,
                        Showtimes = new List<Showtime>()
                    };
                    movies.Add(movieObject);
                }
                else
                {
                    movieObject = movies.First(m => m.Id == jsonMovie.Id);
                }


                foreach (var versions in jsonMovie.Versions)
                {
                    if (versions.Label.ToLower().Contains("lukket forestilling"))
                    {
                        continue;
                    }

                    VersionTag versionObject;
                    versionObject = new VersionTag()
                    {
                        Type = versions.Label
                    };


                    foreach (var showtimeDate in versions.Dates)
                    {
                        foreach (var showtimeItem in showtimeDate.Showtimes)
                        {
                            //Skip if no more seats left
                            if (showtimeItem.AvailableSeats == 0)
                            {
                                continue;
                            }

                            Room roomObject;
                            roomObject = new Room()
                            {
                                Id = showtimeItem.RoomContent.Id,
                                Name = showtimeItem.RoomContent.Label
                            };


                            Playtime playtimeObject;
                            var dateString = (showtimeDate.Date + " " + showtimeItem.Time);
                            var commaIndex = dateString.IndexOf(',');
                            if (commaIndex > 0)
                            {
                                dateString = dateString.Substring(commaIndex + 2);
                            }

                            var dateTimeFormat = "dd/MM HH:mm";
                            DateTime dateTime;

                            if (DateTime.TryParseExact(dateString, dateTimeFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime))
                            {
                                if (_showtimeFiltering.StartDate != DateTime.MinValue && dateTime < _showtimeFiltering.StartDate)
                                {
                                    continue;
                                }

                                if (_showtimeFiltering.EndDate != DateTime.MinValue && dateTime > _showtimeFiltering.EndDate)
                                {
                                    continue;
                                }
                            }


                            playtimeObject = new Playtime()
                            {
                                StartTime = dateTime
                            };


                            var showtimeObject = new Showtime()
                            {
                                Id = showtimeItem.Id,
                                Movie = movieObject,
                                Cinema = cinemaObject,
                                VersionTag = versionObject,
                                Room = roomObject,
                                Playtime = playtimeObject
                            };
                            showtimes.Add(showtimeObject);
                        }
                    }
                }
            }
        }
        
        return [];
    }
    
}