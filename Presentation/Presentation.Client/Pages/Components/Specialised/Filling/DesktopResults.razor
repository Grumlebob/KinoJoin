@inject IJSRuntime JsRuntime 
@inject NavigationManager NavigationManager

<div class="mb-2 w-full overflow-auto rounded-md border bg-gray-100 py-3">
    <table class="border-separate border-spacing-2">
        <tr >
            <th></th>@*Empty cell above the participant names*@

            @foreach (var showtime in OrderedShowtimes)
            {
                <th class="max-w-48 min-w-48">
                    <ResultCard Event="Event" Showtime="showtime" UniqueId="true" IsHost="IsHost" OnEventConfirmed="StateHasChanged"/>
                </th>
            }
        </tr>

        @foreach (var participant in Event.Participants ?? [])
        {
            <tr>
                <td class="sticky left-0 items-end rounded bg-slate-50">
                    <div class="flex gap-1 rounded p-5 shadow-md w-50">
                        <div class="flex">
                            @if (IsHost && participant.Id != 0)
                        {
                            <button onclick="@(async () => { await OnDeleteParticipant.InvokeAsync(participant); })">
                                <img src="Icons/DeleteIcon.svg" alt="delete" class="rounded-full p-1 hover:bg-error hover:bg-opacity-25" width="28"/>
                            </button>
                        }
                        @if (!string.IsNullOrEmpty(participant.Note))
                        {

                            <div class="relative flex items-center">
                                <img src="Icons/NoteIcon.svg" alt="note" class="rounded-full p-1 peer hover:bg-gray-200" width="28"/>
                                <div class="peer-hover:visible invisible absolute translate-x-8 -translate-y-20 transform rounded border border-gray-800 bg-gray-100 p-3 opacity-0 peer-hover:opacity-100 shadow-md z-5 bg-light-gray min-w-40 max-w-80 text-wrap">
                                    <p class="font-bold">@participant.Nickname's note</p>
                                    @if (!string.IsNullOrEmpty(participant.Note))
                                    {
                                        <p class="break-words">@participant.Note</p>
                                    }
                                </div>
                            </div>

                        }
                        </div>
                        <p class="truncate ...">
                            @participant.Nickname
                        </p>

                    </div>

                </td>
                @foreach (var showtime in OrderedShowtimes)
                {
                    var vote = participant.VotedFor.FirstOrDefault(v => v.ShowtimeId == showtime.Id) 
                               ?? new ParticipantVote { SelectedOption = Event.DefaultSelectOption, SelectedOptionId = Event.DefaultSelectOptionId};
                    <td >
                        @*  This comment is needed to generate the following dynamic tailwind classes. 
                                                The colors are taken from the select options in the database.
                                                bg-success bg-warning bg-gray-300 *@
                        <div class="h-16 flex items-center justify-center bg-@(vote.SelectedOption.Color) rounded border border-gray-400 p-5 shadow-md">
                            @if (vote.SelectedOptionId != Event.DefaultSelectOptionId)
                            {
                                <div class="h-8 w-8 items-center justify-center gap-2 rounded-full bg-white">
                                    <CheckIconComp Class="@("stroke-" + participant.VotedFor.First(v => v.ShowtimeId == showtime.Id).SelectedOption.Color)"/>
                                </div>
                            }
                        </div>
                    </td>
                }
            </tr>
        }
    </table>
</div>

@code {

    [Parameter] public required JoinEvent Event { get; set; }

    [Parameter] public required bool IsHost { get; set; }
    
    [Parameter]
    public required List<Showtime> OrderedShowtimes { get; set; }
    
    [Parameter]
    public required EventCallback<Participant> OnDeleteParticipant { get; set; }
    
    
}
