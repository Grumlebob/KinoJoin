@using Infrastructure.Services
@inject IJSRuntime JsRuntime 
@inject NavigationManager NavigationManager
@inject IKinoJoinHttpClient KinoJoinHttpClient
@inject ICalendarService CalendarService


<div id="results" class="flex flex-col gap-2 pt-2"> @* pt-2 is there, because otherwise the page lands a bit too far down when pressing "se resultater" on mobile *@
    <div class="flex justify-between">
        <h2 class="text-2xl text-bold">Resultater</h2>
        <button class="btn-black gap-1 md:hidden" onclick="@(async () => await JsRuntime.InvokeVoidAsync("showDialog", "participants-dialog"))">
            <img src="Icons/ParticipantsIcon.svg" alt="participants"/>
            <span>Deltagere</span>
        </button>
    </div>


    <!-- Sort option selector -->
    <label>
        <div class="w-fit rounded border bg-gray-100 p-3">
            Sortér efter:
            <select class="bg-transparent" value="@_currentSortOption" onchange="@((ChangeEventArgs e) => SortShowtimes(Enum.Parse<SortBy>(e.Value!.ToString()!)))">
                @foreach (var option in Enum.GetValues<SortBy>())
                {
                    <option value="@option">@ToDanish(option)</option>
                }
            </select>
        </div>
    </label>

    <!-- Results for small devices -->
    <div class="space-y-3 md:hidden">
        @foreach (var showtime in _orderedShowtimes)
        {
            <ShowtimeResultCard IsHost="IsHost" JoinEvent="JoinEvent" Showtime="showtime" OnShowtimeSelected="SetShowtimeForConfirmation" OnShowParticipantVotes="OpenVotesDialog" OnOpenEventActions="@(async () => await JsRuntime.InvokeVoidAsync("showDialog", "after-confirm-actions-dialog"))" HasVoted="@(CurrentParticipant != null)" Vote="@(CurrentParticipant?.VotedFor.FirstOrDefault(pv => pv.ShowtimeId == showtime.Id))"/>
        }
    </div>

    <!-- Results for large devices -->
    <div class="hidden md:block">
        <div class="mb-2 w-full overflow-auto rounded-md border bg-gray-100 py-3">
            <table class="border-separate border-spacing-2">
                <tr>
                    <th></th>@*Empty cell above the participant names*@

                    @foreach (var showtime in _orderedShowtimes)
                    {
                        <th class="max-w-48 min-w-48">
                            <ShowtimeResultCard JoinEvent="JoinEvent" Showtime="showtime" OnShowtimeSelected="SetShowtimeForConfirmation" OnShowParticipantVotes="OpenVotesDialog" OnOpenEventActions="@(async () => await JsRuntime.InvokeVoidAsync("showDialog", "after-confirm-actions-dialog"))" IsHost="IsHost"/>
                        </th>
                    }
                </tr>

                <!-- A row for each participant displaying which showtimes they voted for and what they voted -->
                @foreach (var participant in JoinEvent.Participants)
                {
                    <tr>
                        <td class="sticky left-0 items-end rounded bg-slate-50">
                            <div class="flex gap-1 rounded p-5 shadow-md w-50">
                                <div class="flex">
                                    @if (IsHost && participant.Id != 0)
                                    {
                                        <button onclick="@(() => OpenDeleteDialog(participant))">
                                            <img src="Icons/DeleteIcon.svg" alt="delete" class="rounded-full p-1 hover:bg-error hover:bg-opacity-25" width="28"/>
                                        </button>
                                    }
                                    @if (!string.IsNullOrEmpty(participant.Note))
                                    {
                                        <div class="relative flex items-center">
                                            <img src="Icons/NoteIcon.svg" alt="note" class="rounded-full p-1 peer hover:bg-gray-200" width="28"/>
                                            <div class="peer-hover:visible invisible absolute translate-x-8 -translate-y-20 transform rounded border border-gray-800 bg-gray-100 p-3 opacity-0 peer-hover:opacity-100 shadow-md z-5 bg-light-gray min-w-40 max-w-80 text-wrap">
                                                <p class="font-bold">@participant.Nickname's note</p>
                                                @if (!string.IsNullOrEmpty(participant.Note))
                                                {
                                                    <p class="break-words">@participant.Note</p>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                                <p class="truncate ...">
                                    @participant.Nickname
                                </p>
                            </div>
                        </td>
                        <!-- Display with colored boxes what the participant in current row voted for each showtime -->
                        @foreach (var showtime in _orderedShowtimes)
                        {
                            var vote = participant.VotedFor.FirstOrDefault(v => v.ShowtimeId == showtime.Id)
                                       ?? new ParticipantVote { SelectedOption = JoinEvent.DefaultSelectOption, SelectedOptionId = JoinEvent.DefaultSelectOptionId };
                            <td >
                                @* This comment is needed to generate the following dynamic tailwind classes. 
                                                        The colors are taken from the select options in the database.
                                                        bg-success bg-warning bg-gray-300 *@
                                <div class="h-16 flex items-center justify-center bg-@(vote.SelectedOption.Color) rounded border border-gray-400 p-5 shadow-md">
                                    @if (vote.SelectedOptionId != JoinEvent.DefaultSelectOptionId)
                                    {
                                        <div class="h-8 w-8 items-center justify-center gap-2 rounded-full bg-white">
                                            <CheckIconComp Class="@("stroke-" + participant.VotedFor.First(v => v.ShowtimeId == showtime.Id).SelectedOption.Color)"/>
                                        </div>
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>

</div>

<!-- Show all participants dialog -->
<dialog id="participants-dialog" class="fixed w-full max-w-md rounded p-4 bg-slates-300 xs:h-dvh">

    <div class="mb-4 flex justify-between">
        <h4 class="text-lg font-bold">Deltagere</h4>
        <button onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "participants-dialog"))">
            <img src="Icons/CrossIcon.svg" alt="close"/>
        </button>
    </div>

    @foreach (var participant in JoinEvent.Participants)
    {
        _showNote.TryAdd(participant, false);

        <div class="flex w-full justify-between gap-2">
            <p>@participant.Nickname</p>
            <div class="flex items-center h-8 gap-2">

                @if (!string.IsNullOrWhiteSpace(participant.Note))
                {
                    <button @onclick="() => { _showNote[participant] = !_showNote[participant]; StateHasChanged(); }">
                        <img src="Icons/NoteIcon.svg" alt="note"/>
                    </button>
                }
                @if (IsHost)
                {
                    <button onclick="@(async () => { await OpenDeleteDialog(participant); })">
                        <img src="Icons/DeleteIcon.svg" alt="delete" class="h-full"/>
                    </button>
                }
            </div>
        </div>

        if (_showNote[participant])
        {
            <div class="p-3 rounded border w-full">
                <p class="break-words">@participant.Note</p>
            </div>
        }
    }
</dialog>

<dialog class="rounded p-5" id="confirm-delete-dialog">
    @if (_participantToDelete != null)
    {
        <div class="flex flex-col items-end gap-4">
            <p class="text-xl font-bold">Er du sikker på at du vil slette @_participantToDelete.Nickname's svar?</p>
            <div class="flex gap-1">
                <button class="btn-white w-16" onclick="@(async () => { await JsRuntime.InvokeVoidAsync("hideDialog", "confirm-delete-dialog"); })">Nej</button>
                <button class="btn-black w-16" onclick="@(async () => { await DeleteParticipant(_participantToDelete.Id); await JsRuntime.InvokeVoidAsync("hideDialog", "confirm-delete-dialog"); })">Ja</button>
            </div>
        </div>
    }
</dialog >

<dialog class="rounded p-5" id="note-dialog">
    @if (_participantToShowNoteFor != null)
    {
        <div class="mb-4 flex justify-between">
            <p class="font-bold">@_participantToShowNoteFor.Nickname's Note</p>
            <button onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "note-dialog"))">
                <img src="Icons/CrossIcon.svg" alt="close"/>
            </button>
        </div>
        <p>@_participantToShowNoteFor.Note</p>
    }
</dialog>

<!-- on small devices you can select a showtime and see who voted for it with this dialog -->
<dialog id="votes-dialog" class="fixed w-full max-w-md rounded p-4 bg-slates-300 xs:h-dvh">

    <div class="mb-4 flex justify-between">
        <h4 class="text-lg font-bold">Stemmer</h4>
        <button onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "votes-dialog"))">
            <img src="Icons/CrossIcon.svg" alt="close"/>
        </button>
    </div>
    @{ var participantsAndVotes = JoinEvent.Participants.Where(p => p.VotedFor.Any(v => v.ShowtimeId == _selectedShowtimeId)).Select(p => (p, p.VotedFor.First(v => v.ShowtimeId == _selectedShowtimeId))).ToList(); }
    @foreach (var (participant, vote) in participantsAndVotes)
    {
        <div class="flex w-full justify-between gap-2">
            <p>@participant.Nickname</p>
            <CheckIconComp Class="@("stroke-" + vote.SelectedOption.Color)"/>
        </div>
    }
</dialog>

<dialog class="rounded p-5" id="confirm-event-dialog">
    <div class="flex flex-col items-end gap-4">
        <h2 class="text-xl font-bold">Ønsker du at bekræfte forestillingen for dette event?</h2>
        <div class="flex gap-1">
            <button class="btn-white" onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "confirm-event-dialog"))">Nej</button>
            <button class="btn-black" onclick="@(async () => { await ConfirmShowtimeAndOpenActionDialog(_selectedShowtimeId); await JsRuntime.InvokeVoidAsync("hideDialog", "confirm-event-dialog"); })">Ja</button>
        </div>
    </div>
</dialog>


<!-- after a showtime has been confirmed, the following dialogs can be used -->
<dialog class="rounded p-5" id="after-confirm-actions-dialog">
    <div class="flex flex-col items-center gap-4">
        <h2 class="text-xl font-bold">Event valgt</h2>
        <div class="space-y-3">
            <div class="flex flex-col gap-2 md:gap-1">
                <button class="btn-red w-full" onclick="@(async () => await JsRuntime.InvokeVoidAsync("open", $"https://kino.dk/ticketflow/showtimes/{JoinEvent.ChosenShowtimeId}", "_blank"))">Bestil Billetter</button>
                <button class="btn-white" onclick="@(async () => await JsRuntime.InvokeVoidAsync("showDialog", "calendar-dialog"))">Tilføj til egen kalender</button>
                <button class="btn-white" onclick="@(async () => await GoToMailToLink(JoinEvent.Showtimes.First(s => s.Id == JoinEvent.ChosenShowtimeId)))">Send mail til deltagere</button>
                <button class="btn-white md:hidden" @onclick="ShareEvent">Del</button>
            </div>
            <div class="flex w-full justify-end">
                <button class="btn-black" onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "after-confirm-actions-dialog"))">Luk</button>
            </div>
        </div>
    </div>
</dialog>

<dialog class="rounded p-5" id="calendar-dialog">
    <div class="flex flex-col items-center gap-4">
        <h2 class="text-2xl text-bold">Tilføj til kalender</h2>

        <div class="flex flex-col items-center gap-1">
            <button class="btn-white w-full" @onclick="OpenGoogleCalendar">Tilføj til google kalender</button>
            <button class="btn-white w-full" @onclick="DownloadCalendarFile">Download til andre kalendre</button>
        </div>
        <div class="flex w-full justify-end">
            <button class="btn-black" onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "calendar-dialog"))">Luk</button>
        </div>
    </div>
</dialog>

@code {

    [Parameter] public required JoinEvent JoinEvent { get; set; }

    [Parameter] public bool IsHost { get; set; }

    [Parameter] public Participant? CurrentParticipant { get; set; }

    private Participant? _participantToDelete;

    private Participant? _participantToShowNoteFor;

    private Showtime? _showtimeToCalendar = null;

    private int _selectedShowtimeId;

    private List<Showtime> _orderedShowtimes = [];

    private enum SortBy
    {
        Votes,
        Time
    }

    private string ToDanish(SortBy option)
        => option switch
        {
            SortBy.Votes => "Stemmer",
            SortBy.Time => "Tid",
            _ => ""
        };

    private SortBy _currentSortOption = SortBy.Votes;

    private Dictionary<Participant, bool> _showNote = new();

    protected override void OnInitialized()
    {
        _showNote = JoinEvent.Participants.ToDictionary(p => p, _ => false);
        SortShowtimes(_currentSortOption);
    }

    private async Task DeleteParticipant(int participantId)
    {
        var response = await KinoJoinHttpClient.MakeParticipantNotExistsAsync(JoinEvent.Id, participantId);
        if (response.IsSuccessStatusCode)
        {
            JoinEvent.Participants.RemoveAll(p => p.Id == participantId);
            SortShowtimes(_currentSortOption);
            StateHasChanged();
        }
    }

    private async Task OpenDeleteDialog(Participant participant)
    {
        _participantToDelete = participant;
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("showDialog", "confirm-delete-dialog");
    }

    private async Task OpenVotesDialog(int showtimeId)
    {
        _selectedShowtimeId = showtimeId;
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("showDialog", "votes-dialog");
    }

    private void SortShowtimes(SortBy option)
    {
        _currentSortOption = option;
        _orderedShowtimes = option switch
        {
            SortBy.Votes => JoinEvent.Showtimes.OrderByDescending(showtime =>
                    JoinEvent.Participants.Sum(p => p.VotedFor.Count(v => v.ShowtimeId == showtime.Id && v.SelectedOptionId != JoinEvent.DefaultSelectOptionId)))
                .ThenBy(showtime => JoinEvent.Participants.Sum(p => p.VotedFor.Where(v => v.ShowtimeId == showtime.Id && v.SelectedOptionId != JoinEvent.DefaultSelectOptionId)
                    .Sum(v => JoinEvent.SelectOptions.FindIndex(s => s.Id == v.SelectedOptionId))))
                .ThenBy(s => s.Playtime.StartTime).ToList(),
            SortBy.Time => JoinEvent.Showtimes.OrderBy(s => s.Playtime.StartTime).ToList(),
            _ => _orderedShowtimes
        };
    }

    public void UpdateSorting()
    {
        SortShowtimes(_currentSortOption);
    }

    private async Task GoToMailToLink(Showtime showtime)
    {
        var mails = JoinEvent.Participants.Where(p => p.Email is not null).Select(p => p.Email);
        var text = JoinEvent.Description + "\n" + "Valgt forestilling: " + showtime.Movie.Title + ", " + showtime.Cinema.Name + ", " + showtime.Playtime.StartTime.ToString("dd. MMM HH:mm");
        await JsRuntime.InvokeVoidAsync("open", $"mailto:{string.Join(",", mails)}?subject={JoinEvent.Title}&body={text}", "_blank");
    }

    private async Task ShareEvent()
    {
        var showtime = JoinEvent.Showtimes.First(s => s.Id == JoinEvent.ChosenShowtimeId);

        var data = new
        {
            title = JoinEvent.Title,
            text = JoinEvent.Description + "\n" + "Valgt forestilling: " + showtime.Movie.Title + ", " + showtime.Cinema.Name + ", " + showtime.Playtime.StartTime.ToString("dd. MMM HH:mm")
        };

        await JsRuntime.InvokeVoidAsync("navigator.share", data);
    }

    private async Task SetShowtimeForConfirmation(int showtimeId)
    {
        _selectedShowtimeId = showtimeId;
        await JsRuntime.InvokeVoidAsync("showDialog", "confirm-event-dialog");
    }

    private async Task ConfirmShowtimeAndOpenActionDialog(int showtimeId)
    {
        JoinEvent.ChosenShowtimeId = showtimeId;
        await KinoJoinHttpClient.UpsertJoinEventAsync(JoinEvent);
        await JsRuntime.InvokeVoidAsync("showDialog", "after-confirm-actions-dialog");
    }

    private async Task OpenGoogleCalendar()
    {
        var showtime = JoinEvent.Showtimes.First(s => s.Id == JoinEvent.ChosenShowtimeId);
        var url = CalendarService.GenerateGoogleCalendarUrl(JoinEvent, showtime);

        await JsRuntime.InvokeVoidAsync("open", url, "_blank");
        await JsRuntime.InvokeVoidAsync("hideDialog", "calendar-dialog");
    }

    private async Task DownloadCalendarFile()
    {
        var showtime = JoinEvent.Showtimes.First(s => s.Id == JoinEvent.ChosenShowtimeId);

        using var calendarFileStream = CalendarService.GenerateCalendarFileStream(JoinEvent, showtime);

        const string fileName = "Begivenhed";
        await JsRuntime.InvokeVoidAsync("downloadCalendarFile", fileName + ".ics", calendarFileStream);
        await JsRuntime.InvokeVoidAsync("hideDialog", "calendar-dialog");
    }

}
