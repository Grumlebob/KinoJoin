@inject IJSRuntime JsRuntime 
@inject NavigationManager NavigationManager
@inject IJoinEventHttpClient JoinEventHttpClient


<div class="flex flex-col gap-2">
    <div class="flex justify-between">
        <h2 class="text-2xl text-bold">Andres svar</h2>
        <button class="rounded-full bg-secondary text-white font-bold p-3 md:hidden flex" @onclick="ShowParticipantDialog">
            <div class="flex gap-1">
                <ParticipantsIcon Class="fill-white"/>
                <p>Deltagere</p>
            </div>
        </button>
    </div>

    <label>
        <div class="rounded border p-3 w-fit">
            Sortér efter:
            <select onchange="@((ChangeEventArgs e) => { SetSortOption(e.Value.ToString()); })">
                <option value="@VotesString">@VotesString</option>
                <option value="@TimeString">@TimeString</option>
            </select>
        </div>
    </label>

    <div class="hidden md:block ">
        <DesktopResults Event="Event" IsHost="IsHost" OnDeleteParticipant="OpenDeleteDialog" OrderedShowtimes="_orderedShowtimes"/>
    </div>

    <div class="md:hidden">
        <MobileResults CurrentParticipant="CurrentParticipant" Event="Event" IsHost="IsHost" OrderedShowtimes="_orderedShowtimes"/>
    </div>
</div>
<dialog id="participantsDialog" class="bg-slates-300 rounded max-w-md w-full fixed p-4 xs:h-dvh">

    <div class="flex justify-between mb-4">
        <h4 class="font-bold text-lg">Deltagere</h4>
        <button onclick="@(async () => await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", $"participantsDialog"))">
            <CrossIcon/>
        </button>
    </div>

    @foreach (var participant in Event.Participants)
    {
        if (!_showNote.ContainsKey(participant))
        {
            _showNote[participant] = false;
        }

        <div class="flex justify-between  gap-2 w-full">
            <p>@participant.Nickname</p>
            <div>

                @if (!string.IsNullOrWhiteSpace(participant.Note))
                {
                    <button onclick="@(async () => { _showNote[participant] = !_showNote[participant]; StateHasChanged(); })">
                        <NoteIcon Class="stroke-black"/>
                    </button>
                }
                @if (IsHost)
                {
                    <button onclick="@(async () => { await OpenDeleteDialog(participant); })">
                        <DeleteIcon Class="stroke-error"/>
                    </button>
                }
            </div>
        </div>


        <div class="p-3 rounded border w-full @(_showNote[participant] ? "block" : "hidden")">
            <p>@participant.Note</p>
        </div>
    }
</dialog>

<dialog class="p-5 rounded" id="confirm-delete-dialog">
    @if (_participantToDelete != null)
    {
        <div class="flex flex-col gap-4 items-center">
            <p class="font-bold">Er du sikker på at du vil slette @_participantToDelete.Nickname's svar?</p>
            <div class="flex items-center gap-1">
                <button class="bg-success rounded-full p-3 py-0.5 w-16 text-white hover:bg-success-dark" @onclick="@(async () => { await DeleteParticipant(_participantToDelete.Id); await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "confirm-delete-dialog"); })">Ja</button>
                <button class="bg-error rounded-full p-3 py-0.5 w-16 text-white hover:bg-error-dark" @onclick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "confirm-delete-dialog"); })">Nej</button>
            </div>
        </div>
    }
</dialog >

<dialog class="p-5 rounded" id="note-dialog">
    @if (_participantToShowNoteFor != null)
    {
        <div class="flex justify-between mb-4">
            <p class="font-bold">@_participantToShowNoteFor.Nickname's Note</p>
            <button onclick="@(async () => await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", $"note-dialog"))">
                <CrossIcon/>
            </button>
        </div>
        <p>@_participantToShowNoteFor.Note</p>
    }
</dialog>

@code {

    [Parameter] public required JoinEvent Event { get; set; }

    [Parameter] public bool IsHost { get; set; }

    [Parameter] public Participant CurrentParticipant { get; set; }

    private List<Showtime> _orderedShowtimes;

    private Participant? _participantToDelete;

    private Participant? _participantToShowNoteFor;

    private Showtime? _showtimeToCalendar = null;

    private const string VotesString = "Stemmer";
    private const string TimeString = "Tidspunkt";

    private Dictionary<Participant, bool> _showNote = new();

    private async Task DeleteParticipant(int participantId)
    {
        var response = await JoinEventHttpClient.DeleteParticipantAsync(Event.Id, participantId);
        if (response.IsSuccessStatusCode)
        {
            Event.Participants.RemoveAll(p => p.Id == participantId);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _showNote = Event.Participants.ToDictionary(p => p, _ => false);
        SetSortOption(VotesString);
    }

    private async Task ShowParticipantDialog()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "participantsDialog");
    }

    private async Task OpenDeleteDialog(Participant participant)
    {
        _participantToDelete = participant;
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "confirm-delete-dialog");
    }

    private async Task OpenNoteDialog(Participant participant)
    {
        _participantToShowNoteFor = participant;
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", $"note-dialog");
    }

    private void SetSortOption(string option)
    {
        if (option == VotesString)
        {
            _orderedShowtimes = Event.Showtimes.OrderByDescending(showtime =>
                    Event.Participants?
                        .Sum(p => p.VotedFor.Count(v => v.ShowtimeId == showtime.Id && v.SelectedOptionId != Event.DefaultSelectOptionId)) ?? 0)
                .ThenBy(showtime =>
                    Event.Participants?
                        .Sum(p => p.VotedFor.Where(v => v.ShowtimeId == showtime.Id && v.SelectedOptionId != Event.DefaultSelectOptionId)
                            .Sum(v => Event.SelectOptions.FindIndex(s => s.Id == v.SelectedOptionId))))
                .ThenBy(s => s.Playtime.StartTime.ToLocalTime()).ToList();
        }
        else
        {
            _orderedShowtimes = Event.Showtimes.OrderBy(s => s.Playtime.StartTime.ToLocalTime()).ToList();
        }
    }

}