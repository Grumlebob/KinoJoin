@using System.Reflection
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IKinoJoinHttpClient KinoJoinHttpClient

<CustomButton Variant="CustomButton.ButtonVariant.Red">Send svar</CustomButton>

@if (!_answerSaved && !AlreadyAnswered)
{
    <EditForm Model="@Participant" OnValidSubmit="@(async _ => { await SaveParticipantAnswer(false, false); })" class="w-full space-y-4 md:mt-7 md:w-80">
        <DataAnnotationsValidator/>
        
        <h3 class="font-bold">Dine oplysninger</h3>
        <div class="text-error">
            <ValidationSummary/>
        </div>
        <InputText class="w-full rounded-full border p-2 bg-gray-50 " @bind-Value="@Participant.Nickname" placeholder="Indtast dit navn" required/>

        <InputText class="w-full rounded-full border p-2 bg-gray-50 " @bind-Value="@Participant.Email" placeholder="Skriv din email (valgfrit)" type="email"/>
        <div>
            <InputTextArea class="h-32 w-full resize-none rounded-3xl border p-2 bg-gray-50 " @bind-Value="@Participant.Note" placeholder="Note (valgfrit)"/>
        </div>
        <CustomButton Type="submit" Variant="CustomButton.ButtonVariant.Red">Send svar</CustomButton>
    </EditForm>
}

@if (_infoMessage is not null)
{
    if (_answerSaved)
    {
        <p class="text-2xl font-semibold text-success-darkest md:mt-7">@_infoMessage</p>
    }
    else
    {
        <p class="text-4xl text-red-700">@_infoMessage</p>
    }
}

<dialog class="rounded p-5" id="NoShowtimesDialog">
    <div class="flex flex-col items-end gap-4 text-center">
        <h4 class="w-full text-xl font-bold">Obs! Du har ikke valgt nogen tider</h4>
        <h4 class="font-bold">Vil du indsende et tomt svar, der viser du ikke kan nogen tider?</h4>
        <div class="flex gap-1">
            <CustomButton Variant="CustomButton.ButtonVariant.White" OnClick="@(async () => await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "NoShowtimesDialog"))">Nej</CustomButton>
            <CustomButton Variant="CustomButton.ButtonVariant.Black" OnClick="@(async () => { await SaveParticipantAnswer(true, false); await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "NoShowtimesDialog"); })">Ja</CustomButton>
        </div>
    </div>
</dialog>

<dialog id="same-name-dialog" class="rounded p-5">
    <div class="flex flex-col gap-4">
        <h4 class="w-full text-xl font-bold">Der er allerede en deltager med dette navn</h4>
        <h4 class="font-bold">Ønsker du at sende et nyt svar i samme navn?</h4>
        <div class="flex w-full justify-end gap-1">
            <CustomButton Variant="CustomButton.ButtonVariant.White" OnClick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "same-name-dialog"); })" Class="w-16">Nej</CustomButton>
            <CustomButton Variant="CustomButton.ButtonVariant.Black" OnClick="@(async () => { await SaveParticipantAnswer(true, true); await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "same-name-dialog"); })" Class="w-16">Ja</CustomButton>
        </div>
    </div>
</dialog>

@code {

    [Parameter] public bool AlreadyAnswered { get; set; }

    [Parameter] public JoinEvent? JoinEvent { get; set; }

    private bool _answerSaved { get; set; }

    [Parameter] public required Participant Participant { get; set; }

    [Parameter] public EventCallback OnAnswerSaved { get; set; }

    private string? _infoMessage;

    private bool _confirmSubmit;

    private async Task SaveParticipantAnswer(bool confirmed, bool sameNameConfirmed)
    {
        if (!confirmed)
        {
            _infoMessage = "";
            if (Participant.Nickname is null or "")
            {
                _infoMessage = "Indtast venligst et navn";
                return;
            }

            if (Participant.VotedFor.All(v => v.SelectedOptionId == JoinEvent.DefaultSelectOptionId))
            {
                await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "NoShowtimesDialog");
                return;
            }
        }

        if (!sameNameConfirmed)
        {
            if (JoinEvent.Participants is not null && JoinEvent.Participants.Any(p => p.Nickname == Participant.Nickname))
            {
                await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "same-name-dialog");
                return;
            }
        }


        if (Participant.Email?.Trim() == "") Participant.Email = null;
        if (Participant.Email != null)
        {
            if (JoinEvent.Participants is not null && JoinEvent.Participants.Any(p => p.Email == Participant.Email))
            {
                _infoMessage = "Du har allerede svaret";
                return;
            }
        }
        
        Participant.VotedFor = Participant.VotedFor.Where(v => v.SelectedOptionId != JoinEvent.DefaultSelectOptionId).ToList();

        JoinEvent.Participants.Add(Participant);


        var response = await KinoJoinHttpClient.PutJoinEventAsync(JoinEvent);
        if (response.IsSuccessStatusCode)
        {
            _infoMessage = "Dit svar er registreret";
            _answerSaved = true;
            Participant.Id = int.Parse(await response.Content.ReadAsStringAsync());
            await OnAnswerSaved.InvokeAsync();

            StateHasChanged();
        }
        else
        {
            _infoMessage = "Noget gik galt. Prøv igen.";
        }
    }

}
