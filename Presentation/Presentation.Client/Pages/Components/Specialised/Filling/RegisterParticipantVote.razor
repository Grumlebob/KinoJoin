@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (AlreadyAnswered)
{
    <p class="text-xl font-semibold text-green-700">Du har allerede indsendt et svar på dette event</p>
}
else if (!_answerSaved)
{
    <div class="w-80 space-y-4">
        <h3 class="font-bold">Dine oplysninger</h3>
        <input class="w-full border p-2" placeholder="Indtast dit navn" value="@Nickname" @onchange="@(async v => { await NicknameChanged.InvokeAsync((string)v.Value); })" required/>
        <input class="w-full border p-2" placeholder="Skriv din email (valgfrit)" type="email" @bind="@Email"/>
        <div>
            <textarea class="h-32 w-full resize-none border p-2" placeholder="Note (valgfrit)" @bind="Note"></textarea>
        </div>
        <button class="rounded bg-blue-500 p-2 text-white" @onclick="@(async () => { await SaveParticipantAnswer(false, false); })">
            Send svar
        </button>
        @if (_confirmSubmit)
        {
            <div class="mt-4">
                <h4 class="font-bold">Obs! Du har ikke valgt nogen tider.</h4>
                <h4 class="font-semibold mb-0.5">Vil du indsende et tomt svar, der viser du ikke kan nogen tider?</h4>
                <div class="inline-flex space-x-2">
                    <button class="rounded bg-blue-500 p-2 text-white" @onclick="@(async () => { await SaveParticipantAnswer(true,false); })">Ja</button>
                    <button class="rounded bg-red-500 p-2 text-white" @onclick="@(() => { _confirmSubmit = false; })">Nej</button>
                </div>
            </div>
        }
    </div>
}

@if (_infoMessage is not null)
{
    <p class="text-gray-700">@_infoMessage</p>
}

<dialog id="same-name-dialog" class="rounded p-4">
    <h4 class="font-bold">Der er allerede en deltager med dette navn</h4>
    <h4 class="font-bold">Ønsker du at sende et nyt svar i samme navn?</h4>
    <div class="inline-flex space-x-2">
        <button class="rounded bg-blue-500 p-2 text-white" @onclick="@(async () => { await SaveParticipantAnswer(true,true); await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "same-name-dialog"); })">Ja</button>
        <button class="rounded bg-red-500 p-2 text-white" @onclick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "same-name-dialog"); })">Nej</button>
    </div>
</dialog>

@code {

    [Parameter] public bool AlreadyAnswered { get; set; }

    [Parameter] public JoinEvent? Event { get; set; }

    private bool _answerSaved { get; set; }

    [Parameter] public string? Nickname { get; set; }

    [Parameter] public EventCallback<string?> NicknameChanged { get; set; }

    [Parameter] public List<ParticipantVote> VotedFor { get; set; } = [];

    [Parameter] public string LoggedInUserId { get; set; }

    [Parameter] public EventCallback OnAnswerSaved { get; set; }

    private string? Email { get; set; }
    private string? Note { get; set; }

    private string? _infoMessage;

    private bool _confirmSubmit;

    private async Task SaveParticipantAnswer(bool confirmed, bool sameNameConfirmed)
    {
        
        if (!confirmed)
        {
            _infoMessage = "";
            if (Nickname is null or "")
            {
                _infoMessage = "Indtast venligst et navn";
                return;
            }

            if (VotedFor.All(v => v.VoteIndex == 0))
            {
                _confirmSubmit = true;
                return;
            }
        }
        if (!sameNameConfirmed)
        {
            if (Event.Participants is not null && Event.Participants.Any(p => p.Nickname == Nickname))
            {
                await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "same-name-dialog");
                return;
            }
        }
        

        if (Email?.Trim() == "") Email = null;
        if (Email != null)
        {
            if (Event.Participants is not null && Event.Participants.Any(p => p.Email == Email))
            {
                _infoMessage = "Du har allerede svaret";
                return;
            }
        }

        var p = new Participant { AuthId = LoggedInUserId, Nickname = Nickname, Email = Email, Note = Note, VotedFor = VotedFor.ToList(), JoinEventId = Event.Id };
        Event.Participants.Add(p);
        var upsertJoinEventDto = UpsertJoinEventDto.FromModelToUpsertDto(Event);
        var httpClient = new HttpClient();
        var response = await httpClient.PutAsJsonAsync($"{NavigationManager.BaseUri}putJoinEvent", upsertJoinEventDto);
        if (response.IsSuccessStatusCode)
        {
            _infoMessage = "Svar gemt";
            _answerSaved = true;
            p.Id = int.Parse(await response.Content.ReadAsStringAsync());
            Event.Participants.Add(p);
            await OnAnswerSaved.InvokeAsync();

            StateHasChanged();
        }
        else
        {
            _infoMessage = "Noget gik galt. Prøv igen.";
        }
    }

}