@using System.Reflection
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IKinoJoinHttpClient KinoJoinHttpClient
@if (!_answerSaved && !AlreadyAnswered)
{
    <EditForm Model="@_participant" OnValidSubmit="@(async context => { await SaveParticipantAnswer(false, false); })" class="w-full space-y-4 md:mt-7 md:w-80">
        <DataAnnotationsValidator/>
        
        <h3 class="font-bold">Dine oplysninger</h3>
        <div class="text-error">
            <ValidationSummary/>
        </div>
        <InputText class="w-full rounded-md border p-2" @bind-Value="@_participant.Nickname" placeholder="Indtast dit navn" required/>

        <InputText class="w-full rounded-md border p-2" @bind-Value="@_participant.Email" placeholder="Skriv din email (valgfrit)" type="email"/>
        <div>
            <InputTextArea class="h-32 w-full resize-none rounded-md border p-2" @bind-Value="@_participant.Note" placeholder="Note (valgfrit)"/>
        </div>
        <button class="rounded-full p-2 text-white bg-primary hover:bg-primary-dark" type="submit">
            Send svar
        </button>
    </EditForm>
}

@if (_infoMessage is not null)
{
    if (_answerSaved)
    {
        <p class="text-2xl font-semibold text-success-darkest md:mt-7">@_infoMessage</p>
    }
    else
    {
        <p class="text-4xl text-red-700">@_infoMessage</p>
    }
}

<dialog class="rounded p-5" id="NoShowtimesDialog">
    <div class="flex flex-col items-end gap-4 text-center">
        <h4 class="w-full text-xl font-bold">Obs! Du har ikke valgt nogen tider</h4>
        <h4 class="font-bold">Vil du indsende et tomt svar, der viser du ikke kan nogen tider?</h4>
        <div class="flex gap-1">
            <button class="w-16 rounded-full p-3 text-white bg-error py-0.5 hover:bg-error-dark" @onclick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "NoShowtimesDialog"); })">Nej</button>
            <button class="w-16 rounded-full p-3 text-white bg-success py-0.5 hover:bg-success-dark" @onclick="@(async () => { await SaveParticipantAnswer(true, false); await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "NoShowtimesDialog"); })">Ja</button>
        </div>
    </div>
</dialog>

<dialog id="same-name-dialog" class="rounded p-5">
    <div class="flex flex-col gap-4">
        <h4 class="w-full text-xl font-bold">Der er allerede en deltager med dette navn</h4>
        <h4 class="font-bold">Ønsker du at sende et nyt svar i samme navn?</h4>
        <div class="flex w-full justify-end gap-1">
            <button class="w-16 rounded-full p-3 text-white bg-error py-0.5 hover:bg-error-dark" @onclick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "same-name-dialog"); })">Nej</button>
            <button class="w-16 rounded-full p-3 text-white bg-success py-0.5 hover:bg-success-dark" @onclick="@(async () => { await SaveParticipantAnswer(true, true); await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "same-name-dialog"); })">Ja</button>
        </div>
    </div>
</dialog>

@code {

    [Parameter] public bool AlreadyAnswered { get; set; }

    [Parameter] public JoinEvent? Event { get; set; }

    private bool _answerSaved { get; set; }

    [Parameter] public string? Nickname { get; set; }

    [Parameter] public EventCallback<string?> NicknameChanged { get; set; }

    [Parameter] public ICollection<ParticipantVote> VotedFor { get; set; } = [];

    [Parameter] public string LoggedInUserId { get; set; }

    [Parameter] public EventCallback<Participant> OnAnswerSaved { get; set; }

    private Participant _participant = new Participant();

    private string? _infoMessage;

    private bool _confirmSubmit;

    protected override void OnInitialized()
    {
        _participant.Nickname = Nickname;
    }

    private async Task SaveParticipantAnswer(bool confirmed, bool sameNameConfirmed)
    {
        if (!confirmed)
        {
            _infoMessage = "";
            if (_participant.Nickname is null or "")
            {
                _infoMessage = "Indtast venligst et navn";
                return;
            }

            if (VotedFor.All(v => v.SelectedOptionId == Event.DefaultSelectOptionId))
            {
                await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "NoShowtimesDialog");
                return;
            }
        }

        if (!sameNameConfirmed)
        {
            if (Event.Participants is not null && Event.Participants.Any(p => p.Nickname == _participant.Nickname))
            {
                await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "same-name-dialog");
                return;
            }
        }


        if (_participant.Email?.Trim() == "") _participant.Email = null;
        if (_participant.Email != null)
        {
            if (Event.Participants is not null && Event.Participants.Any(p => p.Email == _participant.Email))
            {
                _infoMessage = "Du har allerede svaret";
                return;
            }
        }

        _participant.AuthId = LoggedInUserId;
        _participant.VotedFor = VotedFor.Where(v => v.SelectedOptionId != Event.DefaultSelectOptionId).ToList();

        Event.Participants.Add(_participant);


        var response = await KinoJoinHttpClient.PutJoinEventAsync(Event);
        if (response.IsSuccessStatusCode)
        {
            _infoMessage = "Dit svar er registreret";
            _answerSaved = true;
            _participant.Id = int.Parse(await response.Content.ReadAsStringAsync());
            await OnAnswerSaved.InvokeAsync(_participant);

            StateHasChanged();
        }
        else
        {
            _infoMessage = "Noget gik galt. Prøv igen.";
        }
    }

}