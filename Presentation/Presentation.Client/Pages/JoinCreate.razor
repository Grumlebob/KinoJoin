@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IJoinEventHttpClient JoinEventHttpClient

@page "/JoinCreate/{filterString}"
@using Presentation.Client.NamedHttpClients

@* Shouldn't be a component, should stay on this parent component. *@
@if (_loading)
{
    <p>Indlæser...</p>
}

else if (_cinemaIdsToNames.Count > 0 || _movieIdsToNames.Count > 0)
{
    <h1 class="mb-6 text-2xl font-bold leading-tight text-gray-800 md:text-2xl lg:text-3xl text-center">
        Velkommen til KinoJoin - Planlæg dit biograf event her
    </h1>

    @* Shouldn't be a component, should stay on this parent component. *@
    <button style="margin-bottom: 5px;width: 200px;height: 50px;bottom: 3rem; right: 3rem; position: fixed; z-index: 1" @onclick="OpenEventDetailsDialog">Opret Event</button>

    <dialog id="hostEventModal" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl">
        <HostEventDetails @bind-Deadline="_joinEvent.Deadline" @bind-Title="_joinEvent.Title" @bind-Description="_joinEvent.Description"/>
        <div class="flex justify-end space-x-3">
            <button type="button" @onclick="CloseEventDetailsDialog" class="rounded-md bg-red-500 px-4 py-2 text-white hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400">Annuller</button>
            <button type="submit" @onclick="ValidateAndOpenConfirmationDialog" class="rounded-md bg-green-500 px-4 py-2 text-white hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400">Opret</button>
        </div>
    </dialog>


    @* Shouldn't be a component, should stay on this parent component. *@
    <dialog id="eventDialog" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl min-w-96">
        @if (!eventCreated)
        {
            <p class="text-lg font-semibold text-blue-600 mb-0.5">Bekræft oprettelse</p>
            <div class="mb-4 flex items-center">
                <input id="CanAllShowtimes" type="checkbox" @bind="HostCanAllShowtimes" class="mr-2"/>
                <label for="CanAllShowtimes" class="text-md">
                    @(HostCanAllShowtimes ? "Jeg kan alle valgte tider" : "Jeg ønsker selv at angive tider hvor jeg kan")
                </label>
            </div>
            <div class="flex justify-end space-x-3">
                <button @onclick="CloseDialog" class="rounded-md bg-red-500 px-4 py-2 text-white hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400">Rediger videre</button>
                <button @onclick="FinishJoinEvent" class="rounded-md bg-green-500 px-4 py-2 text-white hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400">Opret</button>
            </div>
        }
        else
        {
            <div class="space-y-1">
                <p class="text-lg font-semibold text-blue-600 mb-0.5">Dit event er nu oprettet</p>
                <p class="font-semibold">Send dette link til dine venner</p>
                <div class="flex items-center gap-4">
                    <a href="@(_baseUrl + "filling/" + _joinEventId)" class="text-lg text-blue-600 hover:text-blue-700">
                        @(_baseUrl + "filling/" + _joinEventId)
                    </a>
                    <button @onclick="ShareEvent" class="rounded-full bg-blue-400 p-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 30 30">
                            <path d="M 23 3 A 4 4 0 0 0 19 7 A 4 4 0 0 0 19.09375 7.8359375 L 10.011719 12.376953 A 4 4 0 0 0 7 11 A 4 4 0 0 0 3 15 A 4 4 0 0 0 7 19 A 4 4 0 0 0 10.013672 17.625 L 19.089844 22.164062 A 4 4 0 0 0 19 23 A 4 4 0 0 0 23 27 A 4 4 0 0 0 27 23 A 4 4 0 0 0 23 19 A 4 4 0 0 0 19.986328 20.375 L 10.910156 15.835938 A 4 4 0 0 0 11 15 A 4 4 0 0 0 10.90625 14.166016 L 19.988281 9.625 A 4 4 0 0 0 23 11 A 4 4 0 0 0 27 7 A 4 4 0 0 0 23 3 z"></path>
                        </svg>
                    </button>
                </div>
                @if (!HostCanAllShowtimes)
                {
                    <p>Angiv hvilke tider du selv kan ved at gå ind på linket</p>
                }
            </div>
        }
    </dialog>

    @* Shouldn't be a component, should stay on this parent component. *@
    @if (_showSnackbar)
    {
        <div class="snackbar">
            @_snackbarMessage
        </div>
    }

    <div class="flex items-center justify-center">
    <button @onclick="ToggleFilters" class="mb-4 rounded-lg lg:hidden bg-gray-700 px-6 py-2 font-semibold text-white shadow-md transition duration-200 ease-in hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-700 focus:ring-opacity-50">
        @(_showAllFilters ? "Skjul filtrer" : "Vis alle filtrer")
    </button>
    </div>

    <div id="ShowAllFilters" class="@(_showAllFilters ? "" : "hidden lg:block")">
        <div class="flex flex-col lg:space-x-4 lg:flex-row">
            <div class="mt-4 lg:mt-0 lg:w-1/3">
                <SearchableCheckboxList IconPath="/Icons/CinemaFilterIcon.svg" FilterTitle="Vælg biograffer" SelectedItems="SelectedCinemas" IdsToLabels="@_cinemaIdsToNames"/>
            </div>
            <div class="lg:w-1/3">
                <SearchableCheckboxList IconPath="Icons/MovieFilterIcon.svg" FilterTitle="Vælg film" SelectedItems="SelectedMovies" IdsToLabels="@_movieIdsToNames"/>
            </div>
            <div class="mt-4 lg:mt-0 lg:w-1/3">
                <SearchableCheckboxList IconPath="Icons/GenreFilterIcon.svg" FilterTitle="Vælg genrer" SelectedItems="SelectedGenres" IdsToLabels="@_genreIdsToNames"/>
            </div>
        </div>

        <div class="flex flex-col space-y-4 mt-4 lg:mt-0 lg:w-1/3">
            <div class="flex flex-wrap justify-start w-full">
                <div class="w-1/2 p-3">
                    <div class="rounded bg-gray-100 shadow">
                        <label for="start-date" class="block rounded-t bg-gray-700 text-center text-sm font-medium text-white">Start dato</label>
                        <input id="start-date" type="date" @bind="_startDate" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"/>
                    </div>
                </div>
                <div class="w-1/2 p-3">
                    <div class="rounded bg-gray-100 shadow ">
                        <label for="end-date" class="block rounded-t bg-gray-700 text-center text-sm font-medium text-white">Slut dato</label>
                        <input id="end-date" type="date" @bind="_endDate" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"/>
                    </div>
                </div>
            </div>
            <button @onclick="UpdateShowtimeFilters" class="rounded-md border border-transparent bg-gray-700 px-6 py-2 text-base font-medium text-white shadow-sm max-w-40 hover:bg-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                Opdater filtrer
            </button>
        </div>
    </div>

    @* Shuold maybe change data structure / put into the filter componont *@
    if (_availableShowtimes.Count == 0)
    {
        if ((SelectedCinemas.Count > 0 || SelectedMovies.Count > 0) && !_noFilters)
        {
            <p>Der er ingen forestillinger for de valgte filtre</p>
        }
        else
        {
            <p>Du skal vælge mindst en film eller biograf til filteret</p>
        }
    }
    <ShowtimeSelector Showtimes="_availableShowtimes" MoviesWithOutShowTimes="moviesWithoutShowtimes" VotedFor="@(_availableShowtimes.Select(s => (s.Id, _joinEvent.Showtimes.Any(st => st.Id == s.Id) ? 1 : 0)).ToList())" VotedForChanged="OnVoteChange"/>
}
else
{
    @* Shouldn't be a component, should stay on this parent component. *@
    <p>Du skal vælge mindst en film eller biograf som filter</p>
    <button onclick="@(async () => { await JsRuntime.InvokeVoidAsync("history.back"); })">Gå Tilbage</button>
}

@code {

    private async Task OpenEventDetailsDialog()
    {
        if (_joinEvent.Showtimes.Count < 1)
        {
            _snackbarMessage = "Vælg mindst en mulig forestilling";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "hostEventModal");
        }
    }


    [Parameter] public string FilterString { get; set; } = "";


    private JoinEvent _joinEvent = new ()
    {
        SelectOptions = [
            new() { VoteOption = "Kan ikke", Color = "lightgray" }, 
            new() { VoteOption = "Kan godt", Color = "lightgreen" }, 
            new() { VoteOption = "Hvis Nødvendigt (Klik to gange)", Color = "orange" }
        ],
        Deadline = DateTime.Today.AddDays(30)
    };

    private bool eventCreated = false;

    private int _joinEventId;

    private string _snackbarMessage;

    private bool _showSnackbar;

    private bool HostCanAllShowtimes = true;

    private bool _loading = true;

    private bool _noFilters = false;

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;


    List<Showtime> _availableShowtimes = [];

    List<string> movieStrings = new();
    List<string> cinemaStrings = new();
    List<string> genreStrings = new();
    List<Movie> moviesWithoutShowtimes { get; set; }

    string _baseUrl = "";

    //used for filters
    Dictionary<int, string> _movieIdsToNames = new();
    Dictionary<int, string> _cinemaIdsToNames = new();
    Dictionary<int, string> _genreIdsToNames = new();

    public HashSet<int> SelectedMovies { get; set; } = [];

    public HashSet<int> SelectedCinemas { get; set; } = [];

    public HashSet<int> SelectedGenres { get; set; } = [];

    private DateTime _startDate = DateTime.Today;
    private DateTime _endDate = DateTime.Today.AddDays(30);

    private bool _showAllFilters;

    private void ToggleFilters()
    {
        _showAllFilters = !_showAllFilters;
    }

    //FILTERS END


    private async Task ShareEvent()
    {
        var data = new
        {
            title = _joinEvent.Title,
            text = _joinEvent.Description,
            url = _baseUrl + "filling/" + _joinEventId
        };

        await JsRuntime.InvokeVoidAsync("navigator.share", data);
    }


    private async Task<List<Movie>> GetMoviesWithoutShowtimes()
    {
        var filterString = new StringBuilder();
        var selectedMovieIds = SelectedMovies.ToList();
        var index = 0;
        foreach (var movieId in selectedMovieIds.Where(movieId => _availableShowtimes.All(f => f.Movie.Id != movieId)))
        {
            filterString.Append($"&movies[{index++}]={movieId}");
        }

        if (filterString.Length == 0) return []; //all movies had showtimes
        var apiString = "https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                        filterString + "&?region=content&format=json";
        var httpClient = new HttpClient();
        var json = await httpClient.GetStringAsync(apiString);
        var root = JsonConvert.DeserializeObject<Root>(json);
        if (root == null) return [];
        List<Movie> missingMovies = [];
        foreach (var movie in root.Content.Content.Content.Content.SelectMany(cinema => cinema.Movies
                     .Where(movie => missingMovies.All(m => m.Id != movie.Id))))
        {
            int.TryParse(movie.Content.FieldPlayingTime, out var duration);

            var movieObject = new Movie
            {
                Id = movie.Id,
                Title = _movieIdsToNames[movie.Id],
                PremiereDate = movie.Content.FieldPremiere,
                KinoURL = movie.Content.URL,
                AgeRating = movie.Content.FieldCensorshipIcon,
                ImageUrl = movie.Content.FieldPoster.FieldMediaImage.Sources[0].Srcset,
                Duration = duration
            };
            missingMovies.Add(movieObject);
        }

        return missingMovies.ToList();
    }

    private void UpdateShowtimeFilters()
    {
        var movieIds = SelectedMovies.ToList();
        var cinemaIds = SelectedCinemas.ToList();
        var genreIds = SelectedGenres.ToList();
        var fromDate = _startDate.ToString("O"); //format: 2024-02-28T08:12:00.000Z (may have to remove a couple zeros to get .000)
        var toDate = _endDate.ToString("O");

        var filterStringBuilder = new StringBuilder("sort=most_viewed");

        foreach (var id in movieIds)
        {
            filterStringBuilder.Append($"&movies={id}");
        }

        foreach (var id in cinemaIds)
        {
            filterStringBuilder.Append($"&cinemas={id}");
        }

        foreach (var id in genreIds)
        {
            filterStringBuilder.Append($"&genres={id}");
        }

        filterStringBuilder.Append($"&date={fromDate}");
        filterStringBuilder.Append($"&date={toDate}");

        NavigationManager.NavigateTo(_baseUrl + "JoinCreate/" + filterStringBuilder, true);
    }


    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateTask).User;

        _baseUrl = NavigationManager.BaseUri;

        _availableShowtimes = [];

        var query = "?" + FilterString;

        //Convert url to something the kino api can pass
        var queryParams = HttpUtility.ParseQueryString(query);

        var movieApiString = new StringBuilder();
        var cinemaApiString = new StringBuilder();
        var genreApiString = new StringBuilder();
        var dateApiString = new StringBuilder();

        var firstDate = true;

        //&movies=1&movies=2 -> &movies[0]=1&movies[1]=2
        foreach (var key in queryParams.AllKeys)
        {
            if (key == null) continue;
            var index = 0;
            foreach (var value in queryParams.GetValues(key)!)
            {
                switch (key)
                {
                    case "cinemas" when int.TryParse(value, out var cinemaId):
                        cinemaApiString.Append($"&cinemas[{index++}]={value}");
                        SelectedCinemas.Add(cinemaId);
                        break;
                    case "movies" when int.TryParse(value, out var movieId):
                        movieApiString.Append($"&movies[{index++}]={value}");
                        SelectedMovies.Add(movieId);
                        break;
                    case "genres" when int.TryParse(value, out var genreId):

                        genreApiString.Append($"&genres[{index++}]={value}");
                        SelectedGenres.Add(genreId);
                        break;
                    case "date" when DateTime.TryParse(value, out var parsedDate):
                        dateApiString.Append($"&date={value}");
                        if (firstDate)
                        {
                            _startDate = parsedDate.Date;
                            firstDate = false;
                        }
                        else
                        {
                            _endDate = parsedDate.Date.AddHours(23).AddMinutes(59);
                        }

                        break;
                }
            }
        }

        if (SelectedCinemas.Count == 0 && SelectedMovies.Count == 0)
        {
            _loading = false;
            return;
        }

        //set selected boxes on our ui
        var apiString = "https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                        movieApiString + cinemaApiString + genreApiString + dateApiString + "&?region=content&format=json";

        var client = new HttpClient();
        var json = await client.GetStringAsync(apiString);

        _cinemaIdsToNames = new Dictionary<int, string>();
        _movieIdsToNames = new Dictionary<int, string>();
        _genreIdsToNames = new Dictionary<int, string>();

        var apiResultObject = JsonConvert.DeserializeObject<Root>(json);
        if (apiResultObject is null) return;

        //get items for checklists
        foreach (var cinemaOption in apiResultObject.Content.Content.Facets.Cinemas.Options)
        {
            _cinemaIdsToNames.Add(cinemaOption.Key, cinemaOption.Value);
            cinemaStrings.Add(cinemaOption.Value);
        }

        foreach (var movieOption in apiResultObject.Content.Content.Facets.Movies.Options)
        {
            _movieIdsToNames.Add(movieOption.Key, movieOption.Value);
            movieStrings.Add(movieOption.Value);
        }

        foreach (var genreOption in apiResultObject.Content.Content.Facets.Genres.Options)
        {
            _genreIdsToNames.Add(genreOption.Key, genreOption.Value);
            genreStrings.Add(genreOption.Value);
        }

        var existingMovies = new Dictionary<int, Movie>(); //several cinemas may pose the same movie. No need to create the movie object every time

        //get show times from json result 
        foreach (var jsonCinema in apiResultObject.Content.Content.Content.Content)
        {
            var cinemaObject = new Cinema
            {
                Id = jsonCinema.Id,
                Name = _cinemaIdsToNames[jsonCinema.Id]
            };

            foreach (var jsonMovie in jsonCinema.Movies.Where(jsonMovie => _movieIdsToNames.ContainsKey(jsonMovie.Id))) //if not contains key it is not a movie (there are events with different ids)
            {
                int.TryParse(jsonMovie.Content.FieldPlayingTime, out var duration);
                if (!existingMovies.TryGetValue(jsonMovie.Id, out var movieObject)) //use existing movie object or create new
                {
                    movieObject = new Movie
                    {
                        Id = jsonMovie.Id,
                        Title = _movieIdsToNames[jsonMovie.Id],
                        PremiereDate = jsonMovie.Content.FieldPremiere,
                        KinoURL = jsonMovie.Content.URL,
                        AgeRating = jsonMovie.Content.FieldCensorshipIcon,
                        ImageUrl = jsonMovie.Content.FieldPoster.FieldMediaImage.Sources[0].Srcset,
                        Duration = duration,
                    };
                    existingMovies.Add(movieObject.Id, movieObject);
                }


                foreach (var jsonVersion in jsonMovie.Versions)
                {
                    if (jsonVersion.Label.ToLower().Contains("lukket forestilling"))
                    {
                        continue;
                    }

                    var versionObject = new VersionTag()
                    {
                        Type = jsonVersion.Label
                    };

                    foreach (var jsonDate in jsonVersion.Dates)
                    {
                        foreach (var jsonShowtime in jsonDate.Showtimes.Where(s => s.AvailableSeats > 0))
                        {
                            var roomObject = new Room
                            {
                                Id = jsonShowtime.RoomContent.Id,
                                Name = jsonShowtime.RoomContent.Label
                            };

                            var dateString = jsonDate.Date + " " + jsonShowtime.Time;
                            var commaIndex = dateString.IndexOf(',');
                            if (commaIndex > 0)
                            {
                                dateString = dateString[(commaIndex + 2)..]; //"fre, 08/03" -> "08/03"
                            }

                            const string dateTimeFormat = "dd/MM HH:mm";

                            if (DateTime.TryParseExact(dateString, dateTimeFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out var dateTime))
                            {
                                //Couldn't get the api to filter on date. Do it manually
                                if (_startDate != DateTime.MinValue && dateTime < _startDate)
                                {
                                    continue;
                                }

                                if (_endDate != DateTime.MinValue && dateTime > _endDate)
                                {
                                    continue;
                                }
                            }

                            var playtimeObject = new Playtime
                            {
                                StartTime = dateTime
                            };

                            var showtimeObject = new Showtime
                            {
                                Id = jsonShowtime.Id,
                                Movie = movieObject,
                                Cinema = cinemaObject,
                                VersionTag = versionObject,
                                Room = roomObject,
                                Playtime = playtimeObject
                            };
                            _availableShowtimes.Add(showtimeObject);
                        }
                    }
                }
            }
        }

        moviesWithoutShowtimes = await GetMoviesWithoutShowtimes();
        _loading = false;
    }


    private async Task ValidateAndOpenConfirmationDialog()
    {
        if (_joinEvent.Showtimes.Count < 1)
        {
            _snackbarMessage = "Vælg mindst en mulig forestilling";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else if (string.IsNullOrEmpty(_joinEvent.Title?.Trim()))
        {
            _snackbarMessage = "Eventet skal have en titel";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else if (_joinEvent.Deadline < DateTime.Now)
        {
            _snackbarMessage = "Deadline skal være i fremtiden";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "eventDialog");
        }
    }


    private async Task CloseDialog()
    {
        // Hide the dialog using JavaScript interop
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "eventDialog");
    }

    private async Task CloseEventDetailsDialog()
    {
        // Hide the dialog using JavaScript interop
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "hostEventModal");
    }

    private async Task FinishJoinEvent()
    {
        var authenticationState = await AuthenticationStateTask;

        var user = authenticationState.User;

        var authorId = user.Claims.FirstOrDefault(c => c.Type == "sub")?.Value!;
        var name = user.Claims.FirstOrDefault(c => c.Type == "nickname")?.Value!;
        var email = user.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
        
        var host = new Host();
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            host.AuthId = "1";
            host.Username = "Ukendt vært";
        }
        else
        {
            host.AuthId = authorId;
            host.Username = name;
            host.Email = email;
        }

        _joinEvent.Host = host;
        Console.WriteLine("test it fr " + string.Join(",", _joinEvent.Showtimes.Select(s => s.Id)));
        var upsertJoinEventDto = UpsertJoinEventDto.FromModelToUpsertDto(_joinEvent);
        var response = await JoinEventHttpClient.PutJoinEventAsync(upsertJoinEventDto);
        var id = await response.Content.ReadAsStringAsync();


        _joinEventId = int.Parse(id);

        eventCreated = true;

        if (HostCanAllShowtimes)
        {
            var p = new Participant
            {
                AuthId = host.AuthId,
                Nickname = host.Username, Email = host.Email, Note = null,
                VotedFor = _joinEvent.Showtimes.Select(s => new ParticipantVote { ShowtimeId = s.Id, VoteIndex = 1 }).ToList(),
                JoinEventId = _joinEventId
            };
            var httpClient = new HttpClient();
            var participateResponse = await httpClient.PutAsJsonAsync($"{_baseUrl}api/events/{_joinEventId}", p);
        }
    }

    private void OnVoteChange(List<(int showtimeId, int vote)> votes)
    {
        _joinEvent.Showtimes = votes.Where(v => v.vote == 1)
            .Join(_availableShowtimes, v => v.showtimeId, s => s.Id,
                (_, showtime) => showtime).ToList();
    }

}