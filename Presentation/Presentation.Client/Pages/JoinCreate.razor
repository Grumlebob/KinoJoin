@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@page "/JoinCreate/{filterString}"


<style>
/* Base container for each movie */
.Redbox {
    display: flex;
    align-items: flex-start; /* Align the start of the items */
    margin-bottom: 20px;
}

/* Styling for the poster image */
.PosterImage {
    position: sticky;
    top: 65px;
    margin-right: 20px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
}

/* Container for movie details */
.MovieDetails {
    flex-grow: 1; /* Allow the movie details to fill the remaining space */
}

/* Header for each movie */
.MovieHeader h2 {
    margin-top: 0; /* Remove top margin for the movie title */
    margin-bottom: 0.5em; /* Add a little space below the title */
}

.MovieHeader p {
    margin-top: 0; /* Remove top margin for other details */
    margin-bottom: 0.5em; /* Consistent space below each detail */
}

/* Styling for cinema location */
.CinemaLocation {
    margin-top: 1em; /* Add space above the cinema location */
    margin-bottom: 0.5em; /* Add space below the cinema location */
}

/* Styling for versions and showtimes */
.Version {
    margin-bottom: 1em; /* Add space below each version */
}


/* Hide the default checkbox input */
.Showtimes input[type="checkbox"] {
    display: none;
}

/* Style when checkbox is checked */
.Showtimes input[type="checkbox"]:checked + .showtime-label {
    background-color: #66bb6a;
}

/* Style when checkbox is not checked */
.Showtimes input[type="checkbox"]:not(:checked) + .showtime-label {
    background-color: #eee;
}

/* Style for checked checkbox text */
.Showtimes input[type="checkbox"]:checked + .showtime-label .showtime-time {
    color: white;
}

/* Style for unchecked checkbox text */
.Showtimes input[type="checkbox"]:not(:checked) + .showtime-label .showtime-time {
    color: black;
}


/* Base styles for the showtime labels */
.Showtimes .showtime-label {

    display: block; /* or inline-block, depending on how you want to handle the layout */
    padding: 4px; /* Adjust padding as necessary */
    margin-bottom: 4px;
    
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    user-select: none;
    background-color: #eee;
    border-radius: 4px;
    box-shadow: inset 0 0 5px rgba(0,0,0,0.2);
    white-space: nowrap; /* Keep text in a single line */
    width: 100px;
}

/* Style for the sal name */
.Showtimes .showtime-sal {
    font-size: 14px; /* Smaller font size for sal name */
    margin-bottom: 2px; /* Space between sal name and playtime */
    overflow: hidden; /* Ensures the content does not expand the container */
    text-overflow: ellipsis; /* Adds an ellipsis when the text overflows */
    white-space: nowrap; /* Prevents the text from wrapping to the next line */
   
}

/* Style for the playtime */
.Showtimes .showtime-time {
    font-weight: bold;
    font-size: 24px; /* Larger font size for playtime */
}

.Showtimes .table-container {
    width: 60vw;
    overflow-x: auto; /* Adds horizontal scrollbar if the table exceeds the container width */
    -ms-overflow-x: auto;
    -webkit-overflow-scrolling: touch; /* Enables smooth scrolling on iOS */
    scrollbar-width:auto;
}

.Showtimes table {
    border-collapse: collapse; /* Collapse borders for a clean look */
}

/* Style for the table headers and cells to have a fixed width */
.Showtimes th,
.Showtimes td {
    width: 10px; /* Fixed width */
    text-align: left; /* Align text to the left */
    padding: 8px; /* Add some padding */
    white-space: nowrap; /* Keep the content in a single line */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add an ellipsis to clipped text */
    border-bottom: 1px solid #ddd; /* Add a bottom border for separation */
    vertical-align: top; /* Align the content to the top of the cell */
}

.Showtimes td {
    padding: 8px; /* Add some padding */
}


.movie-info {
    background-color: #E0E0E0; /* Light gray background */
    padding: 5px;
    border-radius: 5px; /* Optional: rounds the corners of the background */
    display: inline-flex; /* Places children next to each other */
    align-items: center; /* Aligns children vertically in the center */
    justify-content: center; /* Centers children horizontally */
    gap: 10px; /* Creates space between the children */
}

.movie-info .premiere,
.movie-info .duration {
    color: #333; /* Dark gray text color for better contrast */
    font-size: 14px; /* Adjust font size as needed */
}


.snackbar {
    position: fixed;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: #fff;
    padding: 10px;
    border-radius: 5px;
    transition: opacity 0.3s;
    background-color: red;
}

.chip {
    display: inline-flex;
    align-items: center;
    padding: 5px 10px;
    margin: 5px;
    border: 1px solid #ccc;
    border-radius: 25px; /* This gives the chip a rounded appearance */
    background-color: #f0f0f0;
}
.chip button {
    margin-left: 5px;
    border: none;
    background-color: transparent;
    cursor: pointer;
}

.empty-showtime {
    width: 100px;
    height: 67px;
    padding: 12px;
    margin-top: 0px;
    margin-bottom: 4px;
    
    border-radius: 4px;
    background-image: repeating-linear-gradient(
        +45deg,
        #ffffff, /* Lighter shade of gray for the streak */
        #ffffff 10px,
        #d5d5d5 10px, /* Darker shade of gray for the space between streaks */
        #d5d5d5 20px
    );
}

#trailerPopUp {
    height: 100vh;
    width: 100vw;
    position: fixed;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.3);
    z-index: 2;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

</style>

@* Shouldn't be a component, should stay on this parent component. *@
@if (_loading)
{
    <p>Indlæser...</p>
}

else if (_cinemaIdsToNames.Count > 0 || _movieIdsToNames.Count > 0)
{
    <h1 class="mb-6 text-2xl font-bold leading-tight text-gray-800 md:text-2xl lg:text-3xl">
        Velkommen til KinoJoin - Planlæg dit biograf event her
    </h1>

    @* Shouldn't be a component, should stay on this parent component. *@
    <button style="margin-bottom: 5px;width: 200px;height: 50px;bottom: 3rem; right: 3rem; position: fixed; z-index: 1" @onclick="OpenEventDetailsDialog">Opret Event</button>

    <dialog id="hostEventModal" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl">
        <HostEventDetails EventDetailsChanged="HandleEventDetailsChanged"/>
        <div class="flex justify-end space-x-3">
            <button type="button" @onclick="CloseEventDetailsDialog" class="rounded-md bg-red-500 px-4 py-2 text-white hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400">Annuller</button>
            <button type="submit" @onclick="ValidateAndOpenConfirmationDialog" class="rounded-md bg-green-500 px-4 py-2 text-white hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400">Opret</button>
        </div>
    </dialog>


    @* Shouldn't be a component, should stay on this parent component. *@
    <dialog id="eventDialog" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl min-w-96">
        @if (!eventCreated)
        {
            <p class="text-lg font-semibold text-blue-600 mb-0.5">Bekræft oprettelse</p>
            <div class="mb-4 flex items-center">
                <input id="CanAllShowtimes" type="checkbox" @bind="HostCanAllShowtimes" class="mr-2"/>
                <label for="CanAllShowtimes" class="text-md">
                    @(HostCanAllShowtimes ? "Jeg kan alle valgte tider" : "Jeg ønsker selv at angive tider hvor jeg kan")
                </label>
            </div>
            <div class="flex justify-end space-x-3">
                <button @onclick="CloseDialog" class="rounded-md bg-red-500 px-4 py-2 text-white hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400">Rediger videre</button>
                <button @onclick="FinishJoinEvent" class="rounded-md bg-green-500 px-4 py-2 text-white hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400">Opret</button>
            </div>
        }
        else
        {
            <div class="space-y-1">
                <p class="text-lg font-semibold text-blue-600 mb-0.5">Dit event er nu oprettet</p>
                <p class="font-semibold">Send dette link til dine venner</p>
                <div class="flex items-center gap-4">
                    <a href="@(_baseUrl + "filling/" + _joinEventId)" class="text-lg text-blue-600 hover:text-blue-700">
                        @(_baseUrl + "filling/" + _joinEventId)
                    </a>
                    <button @onclick="ShareEvent" class="rounded-full bg-blue-400 p-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 30 30">
                            <path d="M 23 3 A 4 4 0 0 0 19 7 A 4 4 0 0 0 19.09375 7.8359375 L 10.011719 12.376953 A 4 4 0 0 0 7 11 A 4 4 0 0 0 3 15 A 4 4 0 0 0 7 19 A 4 4 0 0 0 10.013672 17.625 L 19.089844 22.164062 A 4 4 0 0 0 19 23 A 4 4 0 0 0 23 27 A 4 4 0 0 0 27 23 A 4 4 0 0 0 23 19 A 4 4 0 0 0 19.986328 20.375 L 10.910156 15.835938 A 4 4 0 0 0 11 15 A 4 4 0 0 0 10.90625 14.166016 L 19.988281 9.625 A 4 4 0 0 0 23 11 A 4 4 0 0 0 27 7 A 4 4 0 0 0 23 3 z"></path>
                        </svg>
                    </button>
                </div>
                @if (!HostCanAllShowtimes)
                {
                    <p>Angiv hvilke tider du selv kan ved at gå ind på linket</p>
                }
            </div>
        }
    </dialog>

    @* Shouldn't be a component, should stay on this parent component. *@
    @if (_showSnackbar)
    {
        <div class="snackbar">
            @_snackbarMessage
        </div>
    }

    <div id="showTimefilters">
        <h2 style="margin-top: 10px">Tilpas filtrer</h2>

        <p style="margin-bottom: 0">Film</p>
        <SearchableCheckboxList SelectedItems="SelectedMovies" IdsToLabels="@_movieIdsToNames"/>

        <p style="margin-bottom: 0">Biografer</p>
        <SearchableCheckboxList SelectedItems="SelectedCinemas" IdsToLabels="@_cinemaIdsToNames"/>

        <p style="margin-bottom: 0">Genrer</p>
        <SearchableCheckboxList SelectedItems="SelectedGenres" IdsToLabels="@_genreIdsToNames"/>

        <p style="margin-bottom: 0">Start dato</p>
        <input style="margin-bottom: 10px" type="date" @bind="_startDate"/>

        <br/>

        <p style="margin-bottom: 0">Slut dato</p>
        <input style="margin-bottom: 10px" type="date" @bind="_endDate"/>
        <button @onclick="UpdateShowtimeFilters">Opdater filtrer</button>
    </div>

    @* Shuold maybe change data structure / put into the filter componont *@
    if (showtimes.Count == 0)
    {
        if ((SelectedCinemas.Count > 0 || SelectedMovies.Count > 0) && !_noFilters)
        {
            <p>Der er ingen forestillinger for de valgte filtre</p>
        }
        else
        {
            <p>Du skal vælge mindst en film eller biograf til filteret</p>
        }
    }

    @* Albert is making this into a component but starting with the filling version*@
    @foreach (var movie in showtimes.GroupBy(s => s.Movie))
    {
        <div class="Redbox">
            <div class="PosterImage">
                <a href=@($"https://kino.dk{movie.Key.KinoURL}") target="_blank">
                    <img src="@movie.Key.ImageUrl" alt="Movie Poster" width="200" height="300"/>
                </a>

                <a href=@($"https://kino.dk{movie.Key.KinoURL}") target="_blank">
                    <button style="margin-top: 3px">Læs mere</button>
                </a>

                <button style="margin-top: 3px" @onclick="async () => { await ShowMovieTrailer(movie.Key); }">Se trailer</button>

            </div>
            <div class="MovieDetails">
                <div class="MovieHeader">
                    <a href=@($"https://kino.dk{movie.Key.KinoURL}") target="_blank" style="text-decoration: none; color: black">
                        <h2>@movie.Key.Title</h2>
                    </a>

                    <div class="movie-info">
                        <span class="premiere">Premiere @movie.Key.PremiereDate | </span>
                        <span class="duration">Varighed @movie.Key.Duration min</span>
                    </div>

                </div>
                @foreach (var cinema in movie.GroupBy(s => s.Cinema))
                {
                    <div class="CinemaLocation">
                        <h4>@cinema.Key.Name</h4>
                    </div>
                    @foreach (var version in cinema.GroupBy(s => s.VersionTag))
                    {
                        <!-- Assuming version is your grouped data object for a particular movie version -->
                        <div class="Version">
                            <strong>@version.Key.Type</strong>
                            <div class="Showtimes">
                                <div class="table-container">
                                    <table>
                                        <tr>
                                            <!-- HEADERS GAMLE SYSTEM, KUN DE DATOER DER EKSITERER -->
                                            <!--
                                            @foreach (var date in version.GroupBy(s => s.Playtime.StartTime.ToLocalTime().ToString("dd. MMM")))
                                            {
                                                <th>@date.Key</th>
                                            }-->

                                            <!-- NYE SYSTEM HEADERS, viser tomme datoer -->
                                            @{
                                                // Determine the start and end dates of the interval
                                                var startDate = showtimes.Min(s => s.Playtime.StartTime.ToLocalTime());
                                                var endDate = showtimes.Max(s => s.Playtime.StartTime.ToLocalTime());

                                                var latestDateForSpecificCinemaVersion = showtimes.Where(s => s.Movie == movie.Key && s.Cinema == cinema.Key && s.VersionTag == version.Key).Max(s => s.Playtime.StartTime.ToLocalTime().Date);

                                                // Loop through each date in the interval
                                                for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                                                {
                                                    <th>@date.ToString("dd. MMM")</th>
                                                }
                                            }
                                        </tr>
                                        <tr>
                                            <!-- Create table data for each showtime within the grouped date -->
                                            @for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                                            {
                                                //Check if it exists if not, else
                                                @if (showtimes.Any(s => s.Movie == movie.Key && s.Cinema == cinema.Key && s.VersionTag == version.Key && s.Playtime.StartTime.ToLocalTime().Date == date))
                                                {
                                                    <td>
                                                        @foreach (var showtime in showtimes.Where(s => s.Movie == movie.Key && s.Cinema == cinema.Key && s.VersionTag == version.Key && s.Playtime.StartTime.ToLocalTime().Date == date))
                                                        {
                                                            var checkboxId = "showtime_" + showtime.Id;
                                                            var showtimeId = showtime.Id;
                                                            var isChecked = selectedShowtimeIds.Contains(showtimeId);

                                                            <div>
                                                                <input type="checkbox" id="@checkboxId" name="showtime" value="@showtime.Playtime.StartTime.ToLocalTime()" checked="@isChecked" @onclick="() => ToggleCheckedShowtime(showtimeId)">
                                                                <label for="@checkboxId" class="showtime-label">
                                                                    <div class="showtime-sal">@showtime.Room.Name</div>
                                                                    <div class="showtime-time">@showtime.Playtime.StartTime.ToLocalTime().ToString("HH:mm")</div>
                                                                </label>
                                                            </div>
                                                        }
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <div class="empty-showtime">
                                                        </div>
                                                    </td>
                                                }
                                            }
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }

    @* Bør blive supported af det component ovenover Albert laver! *@
    if (showtimes.Count > 0)
    {
        foreach (var movie in moviesWithoutShowtimes)
        {
            <div class="Redbox">
                <div class="PosterImage">
                    <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank">
                        <img src="@movie.ImageUrl" alt="Movie Poster" width="200" height="300"/>
                    </a>

                    <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank">
                        <button style="margin-top: 3px">Læs mere</button>
                    </a>

                    <button style="margin-top: 3px" @onclick="async () => { await ShowMovieTrailer(movie); }">Se trailer</button>

                </div>
                <div class="MovieDetails">
                    <div class="MovieHeader">
                        <a href=@($"https://kino.dk{movie.KinoURL}") target="_blank" style="text-decoration: none; color: black">
                            <h2>@movie.Title</h2>
                        </a>

                        <div class="movie-info">
                            <span>Ingen forestillinger fundet for denne film med de valgte filtre</span>
                        </div>

                    </div>
                </div>
            </div>
        }
    }

    @* Bør blive supported af det component ovenover Albert laver! *@
    if (_trailerUrl != null)
    {
        <div id="trailerPopUp">
            <iframe src="@_trailerUrl" width="60%" height="60%" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
            </iframe>
            <button onclick="@(() => { _trailerUrl = null; })">Luk</button>
        </div>
    }
}
else
{
    @* Shouldn't be a component, should stay on this parent component. *@
    <p>Du skal vælge mindst en film eller biograf som filter</p>
    <button onclick="@(async () => { await JsRuntime.InvokeVoidAsync("history.back"); })">Gå Tilbage</button>
}

@code {

    //----Event details start---
    private HostJoinEventDetails _eventDetails = new HostJoinEventDetails();

    private void HandleEventDetailsChanged(HostJoinEventDetails details)
    {
        _eventDetails = details;
    }
    //---Event details end-----

    private async Task OpenEventDetailsDialog()
    {
        if (selectedShowtimeIds.Count < 1)
        {
            _snackbarMessage = "Vælg mindst en mulig forestilling";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "hostEventModal");
        }
    }


    [Parameter] public string FilterString { get; set; } = "";


    private bool eventCreated = false;

    private int _joinEventId;

    private string _snackbarMessage;

    private bool _showSnackbar;

    private string? _trailerUrl;

    private bool HostCanAllShowtimes = true;

    private bool _loading = true;

    private bool _noFilters = false;

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;


    List<Showtime> showtimes = new();

    List<int> selectedShowtimeIds = new List<int>();

    List<string> movieStrings = new();
    List<string> cinemaStrings = new();
    List<string> genreStrings = new();
    List<Movie> moviesWithoutShowtimes { get; set; }

    string _baseUrl = "";

    //used for filters
    Dictionary<int, string> _movieIdsToNames = new();
    Dictionary<int, string> _cinemaIdsToNames = new();
    Dictionary<int, string> _genreIdsToNames = new();

    public HashSet<int> SelectedMovies { get; set; } = [];

    public HashSet<int> SelectedCinemas { get; set; } = [];

    public HashSet<int> SelectedGenres { get; set; } = [];

    private DateTime _startDate = DateTime.Today;
    private DateTime _endDate = DateTime.Today.AddDays(30);

    //FILTERS END


    private async Task ShareEvent()
    {
        var data = new
        {
            title = _eventDetails.EventTitle,
            text = _eventDetails.EventDescription ?? "",
            url = _baseUrl + "filling/" + _joinEventId
        };

        await JsRuntime.InvokeVoidAsync("navigator.share", data);
    }


    private async Task<List<Movie>> GetMoviesWithoutShowtimes()
    {
        var filterString = new StringBuilder();
        var selectedMovieIds = SelectedMovies.ToList();
        var index = 0;
        foreach (var movieId in selectedMovieIds.Where(movieId => showtimes.All(f => f.Movie.Id != movieId)))
        {
            filterString.Append($"&movies[{index++}]={movieId}");
        }

        if (filterString.Length == 0) return []; //all movies had showtimes
        var apiString = "https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                        filterString + "&?region=content&format=json";
        var httpClient = new HttpClient();
        var json = await httpClient.GetStringAsync(apiString);
        var root = JsonConvert.DeserializeObject<Root>(json);
        if (root == null) return [];
        List<Movie> missingMovies = [];
        foreach (var movie in root.Content.Content.Content.Content.SelectMany(cinema => cinema.Movies
                     .Where(movie => missingMovies.All(m => m.Id != movie.Id))))
        {
            int.TryParse(movie.Content.FieldPlayingTime, out var duration);

            var movieObject = new Movie
            {
                Id = movie.Id,
                Title = _movieIdsToNames[movie.Id],
                PremiereDate = movie.Content.FieldPremiere,
                KinoURL = movie.Content.URL,
                AgeRating = movie.Content.FieldCensorshipIcon,
                ImageUrl = movie.Content.FieldPoster.FieldMediaImage.Sources[0].Srcset,
                Duration = duration
            };
            missingMovies.Add(movieObject);
        }

        return missingMovies.ToList();
    }

    private void UpdateShowtimeFilters()
    {
        var movieIds = SelectedMovies.ToList();
        var cinemaIds = SelectedCinemas.ToList();
        var genreIds = SelectedGenres.ToList();
        var fromDate = _startDate.ToString("O"); //format: 2024-02-28T08:12:00.000Z (may have to remove a couple zeros to get .000)
        var toDate = _endDate.ToString("O");

        var filterStringBuilder = new StringBuilder("sort=most_viewed");

        foreach (var id in movieIds)
        {
            filterStringBuilder.Append($"&movies={id}");
        }

        foreach (var id in cinemaIds)
        {
            filterStringBuilder.Append($"&cinemas={id}");
        }

        foreach (var id in genreIds)
        {
            filterStringBuilder.Append($"&genres={id}");
        }

        filterStringBuilder.Append($"&date={fromDate}");
        filterStringBuilder.Append($"&date={toDate}");

        NavigationManager.NavigateTo(_baseUrl + "JoinCreate/" + filterStringBuilder, true);
    }


    void ToggleCheckedShowtime(int showtimeId)
    {
        if (selectedShowtimeIds.Contains(showtimeId))
        {
            // Showtime is already selected, remove it
            selectedShowtimeIds.Remove(showtimeId);
        }
        else
        {
            // Showtime is not selected, add it
            selectedShowtimeIds.Add(showtimeId);
        }
    }


    private async Task ShowMovieTrailer(Movie movie)
    {
        var client = new HttpClient();
        var apiString = $"https://api.kino.dk{movie.KinoURL}?region=content&format=json";
        var json = await client.GetStringAsync(apiString);

        var movieRoot = JsonConvert.DeserializeObject<MovieRoot>(json);
        if (movieRoot?.Content?.field_trailer?.FieldMediaOembedVideo?.trailerUrl == null) //no video found
        {
            await JsRuntime.InvokeVoidAsync("open", $"https://www.youtube.com/results?search_query={movie.Title}+trailer", "_blank"); //search in youtube
            return;
        }

        var uri = new Uri(movieRoot.Content.field_trailer.FieldMediaOembedVideo.trailerUrl);
        var videoId = uri.Segments.Last() == "watch" ? HttpUtility.ParseQueryString(uri.Query)["v"] : uri.Segments.Last();

        if (videoId == null) await JsRuntime.InvokeVoidAsync("open", $"https://www.youtube.com/results?search_query={movie.Title}+trailer", "_blank"); //search in youtube
        else _trailerUrl = $"https://www.youtube.com/embed/{videoId}";
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateTask).User;

        _baseUrl = NavigationManager.BaseUri;

        showtimes = [];

        var query = "?" + FilterString;

        //Convert url to something the kino api can pass
        var queryParams = HttpUtility.ParseQueryString(query);

        var movieApiString = new StringBuilder();
        var cinemaApiString = new StringBuilder();
        var genreApiString = new StringBuilder();
        var dateApiString = new StringBuilder();

        var firstDate = true;

        //&movies=1&movies=2 -> &movies[0]=1&movies[1]=2
        foreach (var key in queryParams.AllKeys)
        {
            if (key == null) continue;
            var index = 0;
            foreach (var value in queryParams.GetValues(key)!)
            {
                switch (key)
                {
                    case "cinemas" when int.TryParse(value, out var cinemaId):
                        cinemaApiString.Append($"&cinemas[{index++}]={value}");
                        SelectedCinemas.Add(cinemaId);
                        break;
                    case "movies" when int.TryParse(value, out var movieId):
                        movieApiString.Append($"&movies[{index++}]={value}");
                        SelectedMovies.Add(movieId);
                        break;
                    case "genres" when int.TryParse(value, out var genreId):

                        genreApiString.Append($"&genres[{index++}]={value}");
                        SelectedGenres.Add(genreId);
                        break;
                    case "date" when DateTime.TryParse(value, out var parsedDate):
                        dateApiString.Append($"&date={value}");
                        if (firstDate)
                        {
                            _startDate = parsedDate.Date;
                            firstDate = false;
                        }
                        else
                        {
                            _endDate = parsedDate.Date.AddHours(23).AddMinutes(59);
                        }

                        break;
                }
            }
        }

        if (SelectedCinemas.Count == 0 && SelectedMovies.Count == 0)
        {
            _loading = false;
            return;
        }

        //set selected boxes on our ui
        var apiString = "https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                        movieApiString + cinemaApiString + genreApiString + dateApiString + "&?region=content&format=json";

        var client = new HttpClient();
        var json = await client.GetStringAsync(apiString);

        _cinemaIdsToNames = new Dictionary<int, string>();
        _movieIdsToNames = new Dictionary<int, string>();
        _genreIdsToNames = new Dictionary<int, string>();

        var apiResultObject = JsonConvert.DeserializeObject<Root>(json);
        if (apiResultObject is null) return;

        //get items for checklists
        foreach (var cinemaOption in apiResultObject.Content.Content.Facets.Cinemas.Options)
        {
            _cinemaIdsToNames.Add(cinemaOption.Key, cinemaOption.Value);
            cinemaStrings.Add(cinemaOption.Value);
        }

        foreach (var movieOption in apiResultObject.Content.Content.Facets.Movies.Options)
        {
            _movieIdsToNames.Add(movieOption.Key, movieOption.Value);
            movieStrings.Add(movieOption.Value);
        }

        foreach (var genreOption in apiResultObject.Content.Content.Facets.Genres.Options)
        {
            _genreIdsToNames.Add(genreOption.Key, genreOption.Value);
            genreStrings.Add(genreOption.Value);
        }

        var existingMovies = new Dictionary<int, Movie>(); //several cinemas may pose the same movie. No need to create the movie object every time

        //get show times from json result 
        foreach (var jsonCinema in apiResultObject.Content.Content.Content.Content)
        {
            var cinemaObject = new Cinema
            {
                Id = jsonCinema.Id,
                Name = _cinemaIdsToNames[jsonCinema.Id]
            };

            foreach (var jsonMovie in jsonCinema.Movies.Where(jsonMovie => _movieIdsToNames.ContainsKey(jsonMovie.Id))) //if not contains key it is not a movie (there are events with different ids)
            {
                int.TryParse(jsonMovie.Content.FieldPlayingTime, out var duration);
                if (!existingMovies.TryGetValue(jsonMovie.Id, out var movieObject)) //use existing movie object or create new
                {
                    movieObject = new Movie
                    {
                        Id = jsonMovie.Id,
                        Title = _movieIdsToNames[jsonMovie.Id],
                        PremiereDate = jsonMovie.Content.FieldPremiere,
                        KinoURL = jsonMovie.Content.URL,
                        AgeRating = jsonMovie.Content.FieldCensorshipIcon,
                        ImageUrl = jsonMovie.Content.FieldPoster.FieldMediaImage.Sources[0].Srcset,
                        Duration = duration,
                        Showtimes = new List<Showtime>()
                    };
                    existingMovies.Add(movieObject.Id, movieObject);
                }


                foreach (var jsonVersion in jsonMovie.Versions)
                {
                    if (jsonVersion.Label.ToLower().Contains("lukket forestilling"))
                    {
                        continue;
                    }

                    var versionObject = new VersionTag()
                    {
                        Type = jsonVersion.Label
                    };

                    foreach (var jsonDate in jsonVersion.Dates)
                    {
                        foreach (var jsonShowtime in jsonDate.Showtimes.Where(s => s.AvailableSeats > 0))
                        {
                            var roomObject = new Room
                            {
                                Id = jsonShowtime.RoomContent.Id,
                                Name = jsonShowtime.RoomContent.Label
                            };

                            var dateString = jsonDate.Date + " " + jsonShowtime.Time;
                            var commaIndex = dateString.IndexOf(',');
                            if (commaIndex > 0)
                            {
                                dateString = dateString[(commaIndex + 2)..]; //"fre, 08/03" -> "08/03"
                            }

                            const string dateTimeFormat = "dd/MM HH:mm";

                            if (DateTime.TryParseExact(dateString, dateTimeFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out var dateTime))
                            {
                                //Couldn't get the api to filter on date. Do it manually
                                if (_startDate != DateTime.MinValue && dateTime < _startDate)
                                {
                                    continue;
                                }

                                if (_endDate != DateTime.MinValue && dateTime > _endDate)
                                {
                                    continue;
                                }
                            }

                            var playtimeObject = new Playtime
                            {
                                StartTime = dateTime
                            };

                            var showtimeObject = new Showtime
                            {
                                Id = jsonShowtime.Id,
                                Movie = movieObject,
                                Cinema = cinemaObject,
                                VersionTag = versionObject,
                                Room = roomObject,
                                Playtime = playtimeObject
                            };
                            showtimes.Add(showtimeObject);
                        }
                    }
                }
            }
        }

        moviesWithoutShowtimes = await GetMoviesWithoutShowtimes();
        _loading = false;
    }


    private async Task ValidateAndOpenConfirmationDialog()
    {
        if (selectedShowtimeIds.Count < 1)
        {
            _snackbarMessage = "Vælg mindst en mulig forestilling";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else if (string.IsNullOrEmpty(_eventDetails.EventTitle))
        {
            _snackbarMessage = "Eventet skal have en titel";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else if (_eventDetails.Deadline < DateTime.Now)
        {
            _snackbarMessage = "Deadline skal være i fremtiden";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "eventDialog");
        }
    }


    private async Task CloseDialog()
    {
        // Hide the dialog using JavaScript interop
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "eventDialog");
    }

    private async Task CloseEventDetailsDialog()
    {
        // Hide the dialog using JavaScript interop
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "hostEventModal");
    }

    private async Task CopyLink()
    {
        // Hide the dialog using JavaScript interop
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"{NavigationManager.BaseUri}filling/" + _joinEventId);
    }

    private async Task FinishJoinEvent()
    {
        HttpClient client = new HttpClient();

        _baseUrl = NavigationManager.BaseUri;
        var url = $"{_baseUrl}putJoinEvent";

        var pickedShowtimes = selectedShowtimeIds.Select(id => showtimes.First(s => s.Id == id)).ToList();

        var movieId = pickedShowtimes.First().Movie.Id;

        var authenticationState = await AuthenticationStateTask;

        var user = authenticationState.User;
        var host = new Host();

        var authorId = user.Claims.FirstOrDefault(c => c.Type == "sub")?.Value!;
        var name = user.Claims.FirstOrDefault(c => c.Type == "nickname")?.Value!;
        var email = user.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            host.AuthId = "1";
            host.Username = "Ukendt vært";
        }
        else
        {
            host.AuthId = authorId;
            host.Username = name;
            host.Email = email;
        }


        var joinEvent = new JoinEvent
        {
            Showtimes = pickedShowtimes,
            Host = host,
            Title = _eventDetails.EventTitle,
            Description = _eventDetails.EventDescription ?? "",
            Deadline = _eventDetails.Deadline,
        };


        var response = await client.PutAsJsonAsync(url, joinEvent);
        var id = await response.Content.ReadAsStringAsync();


        _joinEventId = int.Parse(id);

        eventCreated = true;

        if (HostCanAllShowtimes)
        {
            var p = new Participant
            {
                AuthId = host.AuthId,
                Nickname = host.Username, Email = host.Email, Note = null,
                VotedFor = pickedShowtimes.Select(s => new ParticipantVote { ShowtimeId = s.Id, Showtime = s, Vote = Vote.Yes }).ToList(),
                JoinEventId = _joinEventId
            };
            var httpClient = new HttpClient();
            var participateResponse = await httpClient.PutAsJsonAsync($"{_baseUrl}participate/{_joinEventId}", p);
        }
    }

}