@page "/"
@page "/create-event/{UrlFilterString?}"
@using Presentation.Client.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IKinoJoinHttpClient KinoJoinHttpClient
@inject IFilterApiHandler FilterHandler
@inject SqidsEncoder<int> SqidsEncoder

@if (_loadingPage)
{
    <div class="flex justify-center">
        <LoadingIndicator/>
    </div>
    return;
}

@if (!_isLoggedIn && !GlobalSettings.HostOnNgrokWithNoHttpsAndSetDefaultUser)
{
    <div class="flex flex-col w-full h-full h-fit justify-center items-center bg-black bg-opacity-50  fixed inset-0 z-50">
        <div class="w-fit h-fit shadow-md p-3 bg-gray-50 rounded ">
            <p class="text-2xl font-semibold">Du skal være logget ind for at oprette et event</p>
            <div class="w-fit">
                <button class="btn-black" onclick="@(() => { NavigationManager.NavigateToLogin("authentication/login", new InteractiveRequestOptions { Interaction = InteractionType.SignIn, ReturnUrl = "/create-event/" + UrlFilterString }); })">Log ind</button>
            </div>
        </div>
    </div>
}

@*Header*@
<div class="mb-6 flex justify-between">
    <h1 class="text-2xl font-bold leading-tight text-secondary md:text-2xl lg:text-3xl">
        Velkommen til KinoJoin - Planlæg dit biograf event her
    </h1>
    @if (_isLoggedInUserAdmin)
    {
        <button class="rounded-full bg-yellow-100 p-1 text-black hover:bg-success-dark focus:outline-none focus:ring-2 focus:ring-green-400" onclick="@KinoJoinHttpClient.UpdateBaseDataFromKinoDkAsync(1, 71)">Update from kino.dk</button>
    }
</div>

@*Show/Hide filter button on mobile*@
<div class="flex">
    <button @onclick="() => { _showAllFilters = !_showAllFilters; }" class="rounded-full border border-transparent px-6 py-2 text-base font-medium text-white shadow-sm bg-secondary max-w-40 hover:bg-gray-800 lg:hidden">
        @(_showAllFilters ? "Skjul filtrer" : "Vis alle filtrer")
    </button>
</div>

@*Filters*@
<div id="ShowAllFilters" class="@(_showAllFilters ? "" : "hidden lg:block")">

    @*Filter checkbox lists*@
    <div class="flex flex-col lg:space-x-4 lg:flex-row">
        <div class="mt-4 lg:mt-0 lg:w-1/3">
            <SearchableCheckboxList @ref="_cinemaCheckBoxList" IconPath="/Icons/CinemaFilterIcon.svg" Title="Vælg biografer" SelectedItems="_selectedCinemas" IdsToLabels="@_cinemaIdsToNames"/>
        </div>
        <div class="lg:w-1/3">
            <SearchableCheckboxList @ref="_movieCheckBoxList" IconPath="Icons/MovieFilterIcon.svg" Title="Vælg film" SelectedItems="_selectedMovies" IdsToLabels="@_movieIdsToNames"/>
        </div>
        <div class="lg:mt-0 lg:w-1/3">
            <SearchableCheckboxList @ref="_genreCheckBoxList" IconPath="Icons/GenreFilterIcon.svg" Title="Vælg genrer" SelectedItems="_selectedGenres" IdsToLabels="@_genreIdsToNames"/>
        </div>
    </div>

    @* Date filters *@
    <div class="mt-0 flex flex-col space-y-4 lg:w-1/3 lg:pr-3">
        <div class="flex w-full flex-wrap justify-start">
            <div class="w-1/2 pt-3 pr-1.5">
                <div class="rounded-lg bg-gray-100 shadow">
                    <label for="start-date" class="block rounded-t-lg text-center text-sm font-medium text-white bg-secondary">Start dato</label>
                    <input id="start-date" type="date" @bind="_startDate" class="mt-1 block w-full text-center bg-transparent"/>
                </div>
            </div>
            <div class="w-1/2 pt-3 pl-1.5">
                <div class="rounded-lg bg-gray-100 shadow">
                    <label for="end-date" class="block rounded-t-lg text-center text-sm font-medium text-white bg-secondary">Slut dato</label>
                    <input id="end-date" type="date" @bind="_endDate" class="mt-1 block w-full text-center bg-transparent"/>
                </div>
            </div>
        </div>
    </div>

    <div class="flex justify-between">

        @*Filter information box on desktop*@
        <div class="hidden h-10 md:block">
            <FilterInformationBox LoadingShowtimes="_loadingShowtimes" NoFiltersSelected="NoFiltersSelected"/>
        </div>

        @*Filter Buttons*@
        <div class="mt-4 flex w-full justify-end gap-2 text-no-wrap md:w-auto">
            <button class="btn-white" @onclick="HandleFilterReset">Ryd filtre</button>
            <button class="btn-black" @onclick="HandleShowtimeFiltersChanged">Opdater filtre</button>
        </div>
    </div>

</div>

@*Filter information box on mobile*@
<div class="md:hidden">
    <FilterInformationBox LoadingShowtimes="_loadingShowtimes" NoFiltersSelected="NoFiltersSelected"/>
</div>

@*Showtimes*@
@if (_loadingShowtimes)
{
    return;
}

@if (_availableShowtimes.Count == 0 && (_selectedCinemas.Any() || _selectedMovies.Any() || _selectedGenres.Any()))
{
    <p>Der er ingen forestillinger for de valgte filtre</p>
}

<ShowtimeSelector Showtimes="@_availableShowtimes" LegendTitle="Klik på de spilletider du vil have med i dit event" MoviesWithoutShowTimes="@_moviesWithoutShowtimes" ShowtimeChoices="@_showtimeVotes" ChoicesChanged="OnVoteChange" SelectOptions="@_selectOptionsForCreatePage" DefaultSelectOption="@_selectOptionsForCreatePage.First()"/>

@*Create button*@
<button class="btn-red fixed right-6 text-sm bottom-6 z-50 flex gap-1" @onclick="OpenEventDetailsDialog">
    <img src="Icons/CreateIcon.svg" alt="create"/>
    <span class="text-white">
        Opret og del
    </span>
</button>

@* Dialog where user enters title and other event details *@
<dialog id="eventDetailsDialog" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl">
    <EditForm OnValidSubmit="_ => OpenConfirmationDialog()" model="@_joinEvent">
        <DataAnnotationsValidator/>

        <p class="text-lg font-semibold mb-0.5">Event Titel</p>
        <InputText class="mb-2 w-full rounded-full border border-gray-300 px-4 py-2 shadow-sm focus:ring-secondary focus:ring-2 focus:border-transparent focus:outline-none focus:ring-2 md:w-96"
                   type="text" placeholder="Titel" required
                   @bind-Value="_joinEvent.Title"/>

        <p class="text-lg font-semibold mb-0.5">Event Beskrivelse</p>
        <InputTextArea class="mb-2 w-full rounded-3xl border border-gray-300 px-4 py-2 shadow-sm focus:ring-secondary focus:border-transparent focus:outline-none focus:ring-2 md:w-96"
                       placeholder="Beskrivelse (valgfrit)"
                       @bind-Value="@_joinEvent.Description">
        </InputTextArea>

        <p class="text-lg font-semibold mb-0.5">Deadline</p>
        <input class="mb-2 w-full rounded-full border border-gray-300 px-4 py-2 shadow-sm focus:ring-secondary focus:border-transparent focus:outline-none focus:ring-2 md:w-96"
               type="date" placeholder="Deadline" value="@_joinEvent.Deadline.ToString("yyyy-MM-dd")" @oninput="@(v => { if (DateTime.TryParse(v.Value?.ToString(), CultureInfo.InvariantCulture, out var parsedDate)) _joinEvent.Deadline = parsedDate; })"/>

        <div class="text-error">
            <ValidationSummary/>
        </div>

        <div class="mt-5 mb-5 flex justify-end space-x-3">
            <button type="button" class="btn-white" onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "eventDetailsDialog"))">Annuller</button>
            <button type="submit" class="btn-black">Opret</button>
        </div>
    </EditForm>

    @* Summary of selected show times*@
    <div class="mt-2 rounded border p-2">
        <p class="text-lg font-semibold">Valgte spilletider</p>
        @foreach (var showtimesByMovie in _joinEvent.Showtimes.GroupBy(s => s.Movie.Id))
        {
            var movie = showtimesByMovie.First().Movie;
            <p class="underline">@movie.Title</p>
            foreach (var showtimesByCinema in showtimesByMovie.GroupBy(s => s.Cinema.Id))
            {
                var cinema = showtimesByCinema.First().Cinema;
                <p class="ml-2">@cinema.Name</p>
                foreach (var showtime in showtimesByCinema)
                {
                    <p class="ml-4">@showtime.Playtime.StartTime.ToString("dd/MM - HH:mm", CultureInfo.InvariantCulture)</p>
                }
            }
        }
    </div>

</dialog>

@* Dialog to confirm the user is done creating the event *@
<dialog id="eventConfirmDialog" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl md:min-w-96">
    <form @onsubmit="FinishJoinEvent">
        <p class="text-lg font-semibold mb-0.5">Bekræft oprettelse</p>
        <div class="mb-4 flex items-center">
            <input id="CanAllShowtimes" type="checkbox" @bind="_hostCanAllShowtimes" class="mr-2 accent-secondary"/>
            <label for="CanAllShowtimes" class="text-md">
                Jeg kan alle valgte tider
            </label>
        </div>
        @if (!_uploadingEvent)
        {
            <div class="flex justify-end space-x-3">
                <button type="button" class="btn-white" onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "eventConfirmDialog"))">Rediger videre</button>
                <button type="submit" class="btn-black" @onclick="FinishJoinEvent">Opret</button>
            </div>
        }
        else
        {
            <LoadingIndicator Text="Opretter"/>
        }
    </form>
</dialog>

@*Snackbar*@
@if (_snackbarMessage != null)
{
    <div class="fixed bottom-10 left-1/2 transform -translate-x-1/2 bg-error text-white p-2.5 rounded-md">
        @_snackbarMessage
    </div>
}

@code {

    /**
    * <summary>
    * The filter string taken from the url, used to set the filters on the page
    * </summary>
    */
    [Parameter]
    public string UrlFilterString { get; set; } = "";

    //Used to get info on the current user
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private bool _isLoggedIn;

    private bool _isLoggedInUserAdmin;

    //Event to be created
    private readonly JoinEvent _joinEvent = new()
    {
        SelectOptions =
        [
            new() { VoteOption = "Kan ikke", Color = "gray-300" },
            new() { VoteOption = "Kan godt", Color = "success" },
            new() { VoteOption = "Hvis Nødvendigt (Klik to gange)", Color = "warning" }
        ],
        Deadline = DateTime.Today.AddDays(30)
    };

    private SearchableCheckboxList _cinemaCheckBoxList = new();
    private SearchableCheckboxList _movieCheckBoxList = new();
    private SearchableCheckboxList _genreCheckBoxList = new();

    private Dictionary<int, string> _movieIdsToNames = new();
    private Dictionary<int, string> _cinemaIdsToNames = new();
    private Dictionary<int, string> _genreIdsToNames = new();

    //Used to keep track of which movies, cinemas and genres are selected in the filters
    private HashSet<int> _selectedMovies = [];
    private HashSet<int> _selectedCinemas = [];
    private HashSet<int> _selectedGenres = [];

    //Used to keep track of the start and end date that is selected in the filters
    private DateTime _startDate = DateTime.Today;
    private DateTime _endDate = DateTime.Today.AddYears(1);

    //Used by the show all filters button on mobile
    private bool _showAllFilters;

    private bool NoFiltersSelected => _selectedCinemas.Count == 0 && _selectedMovies.Count == 0 && _selectedGenres.Count == 0;

    //The currently available showtimes, based on the filters
    List<Showtime> _availableShowtimes = [];

    //The movies that are selected in the filters, but do not have any available showtimes
    List<Movie> _moviesWithoutShowtimes = [];

    //The select options to be used for the showtime selector on the page
    readonly List<SelectOption> _selectOptionsForCreatePage = [new SelectOption { VoteOption = "Ikke valgt", Color = "gray-300" }, new SelectOption { VoteOption = "Valgt", Color = "success" }];
    const int NoVoteIndex = 0; //index in the select options list for "no"
    const int YesVoteIndex = 1; //index in the select options list for "yes"

    //Used to keep track of what the user has voted for on each available showtime. 
    /*
      If there are 1000 unselected showtimes, this list will contain 1000 participantvotes with VoteIndex "no".
      If the host then selects 7 showtimes, this list will still contain 1000 votes, but now 7 of them with voteIndex "Yes".
      When saving to Database, we only save the 7 "yes votes"
    */
    ICollection<ParticipantVote> _showtimeVotes = [];

    //Is true if the host checked the "I can all showtimes" checkbox
    private bool _hostCanAllShowtimes = true;

    private bool _loadingPage = true;

    private bool _loadingShowtimes = true;

    private bool _uploadingEvent;

    private string? _snackbarMessage;

    protected override async Task OnInitializedAsync()
    {
        //Get host information
        var userInfo = await UserInfoService.GetUserInfoAsync(AuthenticationStateTask);

        var host = new Host();
        if (userInfo is null)
        {
            if (GlobalSettings.HostOnNgrokWithNoHttpsAndSetDefaultUser)
            {
                host.AuthId = "1";
                host.Username = "Ukendt vært";
            }
        }
        else
        {
            _isLoggedIn = true;

            host.AuthId = userInfo.Value.authId;
            host.Username = userInfo.Value.name;
            host.Email = userInfo.Value.email;

            //Checks if user is admin, without setting up Auth0 Role based authentication,
            //to make it easier for Kino to integrate to their authentication system
            if (host.Email == "johndoe@novo.com")
            {
                _isLoggedInUserAdmin = true;
            }
        }

        _joinEvent.Host = host;

        //Set default select option to no in the join event
        _joinEvent.DefaultSelectOption = _joinEvent.SelectOptions[NoVoteIndex];

        //Set filters to match the filter string in the url
        SetFiltersFromUrlFilterString(UrlFilterString);

        //get data for filter checklists
        var cinemasTask = KinoJoinHttpClient.GetCinemasAsync();
        var moviesTask = KinoJoinHttpClient.GetMoviesAsync();
        var genresTask = KinoJoinHttpClient.GetGenresAsync();

        await Task.WhenAll(cinemasTask, moviesTask, genresTask); //run in parallel

        var availableCinemas = await cinemasTask;
        var availableMovies = await moviesTask;
        var availableGenres = await genresTask;

        _cinemaIdsToNames = availableCinemas == null ? [] : availableCinemas.Select(c => (c.Id, c.Name)).OrderBy(t => t.Name).ToDictionary();
        _movieIdsToNames = availableMovies == null ? [] : availableMovies.Select(c => (c.Id, c.Title)).OrderBy(t => t.Title).ToDictionary();
        _genreIdsToNames = availableGenres == null ? [] : availableGenres.Select(c => (c.Id, c.Name)).OrderBy(t => t.Name).ToDictionary();

        _loadingPage = false;
        StateHasChanged();

        //If no filters are selected, we open the filter accordions so the user can pick filters.
        //We then return since there are no show times to load, due to Kino's API requiring at least one filter
        if (NoFiltersSelected)
        {
            _loadingShowtimes = false;
            _showAllFilters = true;
            _genreCheckBoxList.SetAccordionOpen(true);
            _movieCheckBoxList.SetAccordionOpen(true);
            _cinemaCheckBoxList.SetAccordionOpen(true);
            return;
        }

        (_availableShowtimes, _moviesWithoutShowtimes) = await FilterHandler.GetShowtimesFromFilters(_selectedCinemas, _selectedMovies, _selectedGenres, _startDate, _endDate);
        _showtimeVotes = _availableShowtimes.Select(s => new ParticipantVote { ShowtimeId = s.Id, SelectedOption = _selectOptionsForCreatePage[NoVoteIndex] }).ToList();

        //if KinoDKService yields any data not in database,
        //add it to the id to name dictionaries used by the filter checkbox lists
        foreach (var cinema in _availableShowtimes.Select(s => s.Cinema).DistinctBy(c => c.Id))
        {
            if (_cinemaIdsToNames.ContainsKey(cinema.Id)) continue;
            _cinemaIdsToNames[cinema.Id] = cinema.Name;
        }

        foreach (var movie in _availableShowtimes.Select(s => s.Movie).DistinctBy(m => m.Id))
        {
            if (_movieIdsToNames.ContainsKey(movie.Id)) continue;
            _movieIdsToNames[movie.Id] = movie.Title;
        }

        foreach (var movie in _moviesWithoutShowtimes.Where(m => !_movieIdsToNames.ContainsKey(m.Id)))
        {
            _movieIdsToNames[movie.Id] = movie.Title;
        }

        _loadingShowtimes = false;
    }

    /**
     * <summary>
     * This will set the selected movies, cinemas, and genres used for the filters,
     * based on the filter string taken from the url.
     * </summary>
     */
    private void SetFiltersFromUrlFilterString(string filterString)
    {
        var query = "?" + filterString;
        var queryParams = HttpUtility.ParseQueryString(query);

        var firstDate = true;
        foreach (var key in queryParams.AllKeys)
        {
            if (key == null) continue;
            foreach (var value in queryParams.GetValues(key)!)
            {
                switch (key)
                {
                    case "cinemas" when int.TryParse(value, out var cinemaId):
                        _selectedCinemas.Add(cinemaId);
                        break;
                    case "movies" when int.TryParse(value, out var movieId):
                        _selectedMovies.Add(movieId);
                        break;
                    case "genres" when int.TryParse(value, out var genreId):
                        _selectedGenres.Add(genreId);
                        break;
                    case "date" when DateTime.TryParse(value, out var parsedDate):
                        if (firstDate)
                        {
                            _startDate = parsedDate.Date;
                            firstDate = false;
                        }
                        else
                        {
                            _endDate = parsedDate.Date;
                        }

                        break;
                }
            }
        }
    }

    /**
     * <summary>
     * This will update the filter string in the url and load new showtimes,
     * based on the filters selected on the page.
     * </summary>
     */
    private async Task HandleShowtimeFiltersChanged()
    {
        _cinemaCheckBoxList.SetAccordionOpen(false);
        _movieCheckBoxList.SetAccordionOpen(false);
        _genreCheckBoxList.SetAccordionOpen(false);
        _loadingShowtimes = true;
        StateHasChanged();

        //Kino's API requires one filter minimum, so if no filters are selected, we clear all showtimes and return
        if (NoFiltersSelected)
        {
            _availableShowtimes.Clear();
            _moviesWithoutShowtimes.Clear();
            _showtimeVotes.Clear();
            _loadingShowtimes = false;
            return;
        }

        //Set the filter string in the url to match the selected filters,
        //so the page will save filters on reload
        var urlFilterString = FilterHandler.ConvertFiltersToUrlString(_selectedCinemas, _selectedMovies, _selectedGenres, _startDate, _endDate);
        var newUrl = "create-event/" + urlFilterString;
        NavigationManager.NavigateTo(newUrl);

        (_availableShowtimes, _moviesWithoutShowtimes) = await FilterHandler.GetShowtimesFromFilters(_selectedCinemas, _selectedMovies, _selectedGenres, _startDate, _endDate);

        // Save votes for show times that were there before update 
        var stillAvailableShowtimeIds = new HashSet<int>(_showtimeVotes
            .Select(v => v.ShowtimeId)
            .Intersect(_availableShowtimes.Select(s => s.Id)));

        // Remove votes for show times that are no longer available
        var votesToRemove = _showtimeVotes
            .Where(v => !stillAvailableShowtimeIds.Contains(v.ShowtimeId))
            .ToList();
        foreach (var vote in votesToRemove)
        {
            _showtimeVotes.Remove(vote);
        }

        // Add new votes for newly available showtimes
        var newVotes = _availableShowtimes
            .Where(s => !stillAvailableShowtimeIds.Contains(s.Id))
            .Select(s => new ParticipantVote { ShowtimeId = s.Id, SelectedOption = _selectOptionsForCreatePage[NoVoteIndex] })
            .ToList();
        foreach (var newVote in newVotes)
        {
            _showtimeVotes.Add(newVote);
        }

        _loadingShowtimes = false;
    }

    private async Task HandleFilterReset()
    {
        _selectedCinemas.Clear();
        _selectedMovies.Clear();
        _selectedGenres.Clear();
        await HandleShowtimeFiltersChanged();
    }

    //Called when the user clicks on a showtime in the showtime selector
    private void OnVoteChange(ICollection<ParticipantVote> votes)
    {
        _showtimeVotes = votes;

        //Save all showtimes, where voted yes
        _joinEvent.Showtimes = votes.Where(v => v.SelectedOption.VoteOption == _selectOptionsForCreatePage[YesVoteIndex].VoteOption)
            .Join(_availableShowtimes, v => v.ShowtimeId, s => s.Id,
                (_, showtime) => showtime).ToList();
    }

    //used to open the dialog where the user can enter the event details
    //(Title, description, deadline etc.)
    private async Task OpenEventDetailsDialog()
    {
        if (_joinEvent.Showtimes.Count < 1)
        {
            await ShowSnackbar("Vælg mindst en mulig forestilling");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("showDialog", "eventDetailsDialog");
        }
    }

    //used to open the final dialog, where the user can confirm the creation of the event
    private async Task OpenConfirmationDialog()
    {
        await JsRuntime.InvokeVoidAsync("showDialog", "eventConfirmDialog");
    }

    //Used to upload the event to the database, and navigate to the filling page
    private async Task FinishJoinEvent()
    {
        _uploadingEvent = true;

        if (_hostCanAllShowtimes)
        {
            _joinEvent.Participants.Add(new Participant
            {
                AuthId = _joinEvent.Host!.AuthId,
                Nickname = _joinEvent.Host.Username, Email = _joinEvent.Host.Email, Note = null,
                VotedFor = _joinEvent.Showtimes.Select(s => new ParticipantVote { ShowtimeId = s.Id, SelectedOption = _joinEvent.SelectOptions[YesVoteIndex] }).ToList(),
                JoinEventId = _joinEvent.Id
            });
        }

        var response = await KinoJoinHttpClient.UpsertJoinEventAsync(_joinEvent);

        var id = await response.Content.ReadAsStringAsync();
        _joinEvent.Id = int.Parse(id);

        //To prevent people guessing the Id of join events they are not invited to, we encode the Id
        NavigationManager.NavigateTo("filling/" + SqidsEncoder.Encode(_joinEvent.Id));
    }

    private async Task ShowSnackbar(string message)
    {
        _snackbarMessage = message;
        StateHasChanged();

        //Hide snackbar after 3 seconds
        await Task.Delay(3000).ContinueWith(_ => _snackbarMessage = null);
    }

}