@page "/"
@page "/create-event/{FilterString?}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IKinoJoinHttpClient KinoJoinHttpClient
@inject IKinoDkService KinoDkService

@if (_loadingPage)
{
    <LoadingTextAndCircle/>
    return;
}

@*Header*@
<div class="mb-6 flex justify-between">
    <h1 class="text-2xl font-bold leading-tight text-secondary md:text-2xl lg:text-3xl">
        Velkommen til KinoJoin - Planlæg dit biograf event her
    </h1>
    @if (_isLoggedInUserAdmin)
    {
        <button class="rounded-full bg-yellow-100 p-1 text-black hover:bg-success-dark focus:outline-none focus:ring-2 focus:ring-green-400" @onclick="UpdateBaseDataFromKinoDk">Update from kino.dk</button>
    }
</div>

@*Show filter buttons on mobile*@
<div class="flex">
    <button @onclick="() => { _showAllFilters = !_showAllFilters; }" class="rounded-full border border-transparent px-6 py-2 text-base font-medium text-white shadow-sm bg-secondary max-w-40 hover:bg-gray-800 lg:hidden">
        @(_showAllFilters ? "Skjul filtrer" : "Vis alle filtrer")
    </button>
</div>

@*Filters*@
<div id="ShowAllFilters" class="@(_showAllFilters ? "" : "hidden lg:block")">

    @*Filter checkbox lists*@
    <div class="flex flex-col lg:space-x-4 lg:flex-row">
        <div class="mt-4 lg:mt-0 lg:w-1/3">
            <SearchableCheckboxList @ref="_cinemaCheckBoxList" IconPath="/Icons/CinemaFilterIcon.svg" FilterTitle="Vælg biografer" SelectedItems="_selectedCinemas" IdsToLabels="@_cinemaIdsToNames"/>
        </div>
        <div class="lg:w-1/3">
            <SearchableCheckboxList @ref="_movieCheckBoxList" IconPath="Icons/MovieFilterIcon.svg" FilterTitle="Vælg film" SelectedItems="_selectedMovies" IdsToLabels="@_movieIdsToNames"/>
        </div>
        <div class="lg:mt-0 lg:w-1/3">
            <SearchableCheckboxList @ref="_genreCheckBoxList" IconPath="Icons/GenreFilterIcon.svg" FilterTitle="Vælg genrer" SelectedItems="_selectedGenres" IdsToLabels="@_genreIdsToNames"/>
        </div>
    </div>

    @* Date filters *@
    <div class="mt-0 flex flex-col space-y-4 lg:w-1/3 lg:pr-3">
        <div class="flex w-full flex-wrap justify-start">
            <div class="w-1/2 pt-3 pr-1.5">
                <div class="rounded bg-gray-100 shadow">
                    <label for="start-date" class="block rounded-t text-center text-sm font-medium text-white bg-secondary">Start dato</label>
                    <input id="start-date" type="date" @bind="_startDate" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 shadow-sm"/>
                </div>
            </div>
            <div class="w-1/2 pt-3 pl-1.5">
                <div class="rounded bg-gray-100 shadow">
                    <label for="end-date" class="block rounded-t text-center text-sm font-medium text-white bg-secondary">Slut dato</label>
                    <input id="end-date" type="date" @bind="_endDate" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 shadow-sm"/>
                </div>
            </div>
        </div>
    </div>

    <div class="flex justify-between">
        @*Filter information box on desktop*@
        <div class="hidden h-10 md:block">
            @_filterInformationBox
        </div>

        @*Filter Buttons*@
        <div class="mt-4 flex w-full justify-end gap-2 text-no-wrap md:w-auto">
            <button @onclick="async () => { _selectedCinemas.Clear(); _selectedMovies.Clear(); _selectedGenres.Clear(); await HandleShowtimeFiltersChanged(); }" class="w-fit rounded-full border border-black p-2 shadow transition duration-300 font-label hover:bg-gray-700 hover:text-white">
                Ryd filtrer
            </button>
            <button @onclick="HandleShowtimeFiltersChanged" class="w-fit rounded-full border border-transparent p-2 text-white shadow-sm font-label bg-secondary text-nowrap hover:bg-gray-800">
                Opdater filtrer
            </button>
        </div>
    </div>

</div>

@*Filter information box on mobile*@
<div class="md:hidden">
    @_filterInformationBox
</div>

@*Showtimes*@
@if (_loadingShowtimes)
{
    return;
}

@if (_availableShowtimes.Count == 0 && (_selectedCinemas.Any() || _selectedMovies.Any() || _selectedGenres.Any()))
{
    <p>Der er ingen forestillinger for de valgte filtre</p>
}

<ShowtimeSelector Showtimes="@_availableShowtimes" LegendTitle="Klik på de tider du vil have med i dit event" MoviesWithOutShowTimes="@_moviesWithoutShowtimes" Votes="@_availableShowtimeVotes" VotesChanged="OnVoteChange" SelectOptions="_selectOptionsForCreatePage"/>

@*Create button*@
<button class="fixed right-6 bottom-6 z-50 flex h-14 w-14 items-center justify-center gap-1 rounded-full shadow-lg bg-primary hover:bg-primary-dark md:right-12 md:bottom-12 md:h-auto md:w-auto md:px-4 md:py-2" @onclick="OpenEventDetailsDialog">
    <CreateIcon Class="stroke-white fill-white"/>
    <span class="hidden py-1 text-white md:block">
        Opret Event
    </span>
</button>


@* Dialog where user enters title and other event details *@
<dialog id="eventDetailsDialog" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl">
   <EditForm OnValidSubmit="context => OpenConfirmationDialog()"  model="@_joinEvent">
           <DataAnnotationsValidator  />
           <p class="text-lg font-semibold mb-0.5">Event Titel</p>
           <InputText class="mb-2 w-full rounded-md border border-gray-300 px-4 py-2 shadow-sm focus:ring-secondary focus:border-transparent focus:outline-none focus:ring-4 md:w-96"
                  type="text" placeholder="Titel" required
                  @bind-Value="_joinEvent.Title"/>
   
           <p class="text-lg font-semibold mb-0.5">Event Beskrivelse</p>
           <InputTextArea  class="mb-2 w-full rounded-md border border-gray-300 px-4 py-2 shadow-sm focus:ring-secondary focus:border-transparent focus:outline-none focus:ring-4 md:w-96"
                     placeholder="Beskrivelse (valgfrit)" 
                     @bind-Value="@_joinEvent.Description"></InputTextArea>
   
           <p class="text-lg font-semibold mb-0.5">Deadline</p>
           <input class="mb-2 w-full rounded-md border border-gray-300 px-4 py-2 shadow-sm focus:ring-secondary focus:border-transparent focus:outline-none focus:ring-4 md:w-96"
                  type="date" placeholder="Deadline" value="@_joinEvent.Deadline.ToString("yyyy-MM-dd")" @oninput="@(v => { if (DateTime.TryParse(v.Value?.ToString(), CultureInfo.InvariantCulture, out var parsedDate)) _joinEvent.Deadline = parsedDate; })"/>
          <div class="text-error">
                  <ValidationSummary />
                  </div>
           <div class="flex justify-end space-x-3">
               <button type="button" @onclick="@(() => JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "eventDetailsDialog"))" class="rounded-full px-4 py-2 text-white bg-error hover:bg-error-dark focus:outline-none focus:ring-2">Annuller</button>
               <button type="submit" class="rounded-full px-4 py-2 text-white bg-success hover:bg-success-dark focus:outline-none focus:ring-2 focus:ring-green-400">Opret</button>
           </div>
       </EditForm>

    <div class="mt-2 rounded border p-2">
        <p class="text-lg font-semibold">Valgte spilletider</p>
        @foreach (var showtimesByMovie in _joinEvent.Showtimes.GroupBy(s => s.Movie.Id))
        {
            var movie = showtimesByMovie.First().Movie;
            <p class="underline">@movie.Title</p>
            foreach (var showtimesByCinema in showtimesByMovie.GroupBy(s => s.Cinema.Id))
            {
                var cinema = showtimesByCinema.First().Cinema;
                <p class="ml-2">@cinema.Name</p>
                foreach (var showtime in showtimesByCinema)
                {
                    <p class="ml-4">@showtime.Playtime.StartTime.ToString("dd/MM - HH:mm", CultureInfo.InvariantCulture)</p>
                }
            }
        }
    </div>

</dialog>

@* Dialog to confirm the user is done creating the event *@
<dialog id="eventConfirmDialog" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl md:min-w-96">
    <p class="text-lg font-semibold mb-0.5">Bekræft oprettelse</p>
    <div class="mb-4 flex items-center">
        <input id="CanAllShowtimes" type="checkbox" @bind="_hostCanAllShowtimes" class="mr-2 accent-secondary"/>
        <label for="CanAllShowtimes" class="text-md">
            Jeg kan alle valgte tider
        </label>
    </div>
    @if (!_uploadingEvent)
    {
        <div class="flex justify-end space-x-3">
            <button @onclick="@(() => JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "eventConfirmDialog"))" class="rounded-full px-4 py-2 text-white bg-error hover:bg-error-dark">Rediger videre</button>
            <button @onclick="FinishJoinEvent" class="rounded-full px-4 py-2 text-white bg-success hover:bg-success-dark">Opret</button>
        </div>
    }
    else
    {
        <LoadingTextAndCircle Text="Opretter"/>
    }
</dialog>

@*Snackbar*@
@if (_snackbarMessage != null)
{
    <div class="fixed bottom-10 left-1/2 transform -translate-x-1/2 bg-@_snackbarColor text-white p-2.5 rounded-md">
        @_snackbarMessage
    </div>
}


@code {

    /**
    * <summary>
    * The filter string taken from the url, used to set the filters on the page
    * </summary>
    */
    [Parameter]
    public string FilterString { get; set; } = "";

    //Used to get info on the current user
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    //Used to check if the user is an admin
    private bool _isLoggedInUserAdmin = false;

    //Event to be created
    private readonly JoinEvent _joinEvent = new()
    {
        SelectOptions =
        [
            new() { VoteOption = "Kan ikke", Color = "gray-200" },
            new() { VoteOption = "Kan godt", Color = "success" },
            new() { VoteOption = "Hvis Nødvendigt (Klik to gange)", Color = "warning" }
        ],
        Deadline = DateTime.Today.AddDays(30)
    };

    //The currently available showtimes, based on the filters
    List<Showtime> _availableShowtimes = [];

    //The movies that are selected in the filters, but do not have any available showtimes
    List<Movie> _moviesWithoutShowtimes = [];

    //used to keep track of which showtimes are selected and not selected
    ICollection<ParticipantVote> _availableShowtimeVotes = [];

    //The select options to be used for the showtime selector on the page
    readonly List<SelectOption> _selectOptionsForCreatePage = [new SelectOption { VoteOption = "Ikke valgt", Color = "gray-200" }, new SelectOption { VoteOption = "Valgt", Color = "success" }];
    const int NoVoteIndex = 0; //index in the select options list for "no"
    const int YesVoteIndex = 1; //index in the select options list for "yes"

    //Filter list components
    private SearchableCheckboxList _cinemaCheckBoxList = new();
    private SearchableCheckboxList _movieCheckBoxList = new();
    private SearchableCheckboxList _genreCheckBoxList = new();

    //Maps from id to names for movies, cinemas and genres
    private Dictionary<int, string> _movieIdsToNames = new();
    private Dictionary<int, string> _cinemaIdsToNames = new();
    private Dictionary<int, string> _genreIdsToNames = new();

    //Used to keep track of which movies, cinemas and genres are selected in the filters
    private HashSet<int> _selectedMovies = [];
    private HashSet<int> _selectedCinemas = [];
    private HashSet<int> _selectedGenres = [];

    //Used to keep track of the start and end date that is selected in the filters
    private DateTime _startDate = DateTime.Today;
    private DateTime _endDate = DateTime.Today.AddDays(30);

    //Used by the show all filters button on mobile
    private bool _showAllFilters;

    /**
   * <summary>
   * The render fragment used to tell the user that they need to select at least one filter, or that the showtimes are loading.
   * This is placed differently on mobile and desktop, that is why it is a render fragment variable
   * </summary>
   */
    private RenderFragment _filterInformationBox;

    //Is true if the entire page is loading
    private bool _loadingPage = true;

    //Is true if the showtimes are loading
    private bool _loadingShowtimes = true;

    //Used to keep track of if the page is currently uploading an event
    private bool _uploadingEvent;

    //snackbar variables
    private string? _snackbarMessage;
    private string? _snackbarColor;

    //Is true if the host checked the "I can all showtimes" checkbox
    private bool _hostCanAllShowtimes = true;

    string _baseUrl = "";

    protected override async Task OnInitializedAsync()
    {
        //Checks if user is admin, without setting up Auth0 Role based authentication, to make it easier for Kino to integrate to their authentication system
        var authenticationState = await AuthenticationStateTask;
        var user = authenticationState.User;
        var email = user.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
        if (email == "johndoe@novo.com")
        {
            _isLoggedInUserAdmin = true;
        }

        //Set up the data for the page
        _baseUrl = NavigationManager.BaseUri;
        _joinEvent.DefaultSelectOption = _joinEvent.SelectOptions[NoVoteIndex];

        SetFiltersFromFilterString(FilterString);

        //get data for filter checklists
        var cinemasTask = KinoJoinHttpClient.GetCinemasAsync();
        var moviesTask = KinoJoinHttpClient.GetMoviesAsync();
        var genresTask = KinoJoinHttpClient.GetGenresAsync();

        await Task.WhenAll(cinemasTask, moviesTask, genresTask); //run in parallel

        var availableCinemas = await cinemasTask;
        var availableMovies = await moviesTask;
        var availableGenres = await genresTask;

        _cinemaIdsToNames = availableCinemas == null ? [] : availableCinemas.Select(c => (c.Id, c.Name)).OrderBy(t => t.Name).ToDictionary();
        _movieIdsToNames = availableMovies == null ? [] : availableMovies.Select(c => (c.Id, c.Title)).OrderBy(t => t.Title).ToDictionary();
        _genreIdsToNames = availableGenres == null ? [] : availableGenres.Select(c => (c.Id, c.Name)).OrderBy(t => t.Name).ToDictionary();

        //populate the filter information box render fragment with the correct html
        _filterInformationBox = (__builder) =>
        {
            if (_loadingShowtimes)
            {
                <div class="mt-5">
                    <LoadingTextAndCircle Text="Indlæser spilletider"/>
                </div>
            }
            else if (_selectedCinemas.Count == 0 && _selectedMovies.Count == 0 && _selectedGenres.Count == 0)
            {
                <div class="mt-2 w-fit rounded border p-2">
                    <p class="font-bold-">Vælg mindst én biograf, film eller genre.</p>
                </div>
            }
        };

        _loadingPage = false;
        StateHasChanged();

        //Open filter accordions if no filters are selected
        if (_selectedCinemas.Count == 0 && _selectedMovies.Count == 0 && _selectedGenres.Count == 0)
        {
            _loadingShowtimes = false;
            _showAllFilters = true;
            _genreCheckBoxList.SetAccordionOpen(true);
            _movieCheckBoxList.SetAccordionOpen(true);
            _cinemaCheckBoxList.SetAccordionOpen(true);
            return;
        }

        //load all show times from filter
        (_availableShowtimes, _moviesWithoutShowtimes) = await KinoDkService.GetShowtimesFromFilters(_selectedCinemas, _selectedMovies, _selectedGenres, _startDate, _endDate);
        _availableShowtimeVotes = _availableShowtimes.Select(s => new ParticipantVote { ShowtimeId = s.Id, SelectedOption = _selectOptionsForCreatePage[NoVoteIndex] }).ToList();

        //if KinoDKService yields any data not in database, handle it
        foreach (var cinema in _availableShowtimes.Select(s => s.Cinema).DistinctBy(c => c.Id))
        {
            if (_cinemaIdsToNames.ContainsKey(cinema.Id)) continue;
            _cinemaIdsToNames[cinema.Id] = cinema.Name;
        }

        foreach (var movie in _availableShowtimes.Select(s => s.Movie).DistinctBy(m => m.Id))
        {
            if (_movieIdsToNames.ContainsKey(movie.Id)) continue;
            _movieIdsToNames[movie.Id] = movie.Title;
        }

        _loadingShowtimes = false;
    }

    /**
     * <summary>
     * This will set the selected movies, cinemas etc used for the filters, based on the filter string taken from the url.
     * </summary>
     */
    private void SetFiltersFromFilterString(string filterString)
    {
        var query = "?" + filterString;
        var queryParams = HttpUtility.ParseQueryString(query);

        //&movies=1&movies=2 -> SelectedMovies = [1, 2]
        var firstDate = true;
        foreach (var key in queryParams.AllKeys)
        {
            if (key == null) continue;
            foreach (var value in queryParams.GetValues(key)!)
            {
                switch (key)
                {
                    case "cinemas" when int.TryParse(value, out var cinemaId):
                        _selectedCinemas.Add(cinemaId);
                        break;
                    case "movies" when int.TryParse(value, out var movieId):
                        _selectedMovies.Add(movieId);
                        break;
                    case "genres" when int.TryParse(value, out var genreId):
                        _selectedGenres.Add(genreId);
                        break;
                    case "date" when DateTime.TryParse(value, out var parsedDate):
                        if (firstDate)
                        {
                            _startDate = parsedDate.Date;
                            firstDate = false;
                        }
                        else
                        {
                            _endDate = parsedDate.Date.AddHours(23).AddMinutes(59);
                        }

                        break;
                }
            }
        }
    }

    /**
     * <summary>
     * This will update the filter string in the url and load new showtimes that match the updated filters, based on the filters selected on the page.
     * </summary>
     */
    private async Task HandleShowtimeFiltersChanged()
    {
        _cinemaCheckBoxList.SetAccordionOpen(false);
        _movieCheckBoxList.SetAccordionOpen(false);
        _genreCheckBoxList.SetAccordionOpen(false);
        _loadingShowtimes = true;
        StateHasChanged();

        var movieIds = _selectedMovies.ToList();
        var cinemaIds = _selectedCinemas.ToList();
        var genreIds = _selectedGenres.ToList();
        var fromDate = _startDate.ToString("O"); //hvad betyder O?
        var toDate = _endDate.ToString("O");

        //if no filters are selected, clear all showtimes and return
        if (movieIds.Count == 0 && cinemaIds.Count == 0 && genreIds.Count == 0)
        {
            _availableShowtimes.Clear();
            _moviesWithoutShowtimes.Clear();
            _availableShowtimeVotes.Clear();
            _loadingShowtimes = false;
            return;
        }

        //build filter string to be set in url
        var filterStringBuilder = new StringBuilder("sort=most_purchased");

        foreach (var id in movieIds)
        {
            filterStringBuilder.Append($"&movies={id}");
        }

        foreach (var id in cinemaIds)
        {
            filterStringBuilder.Append($"&cinemas={id}");
        }

        foreach (var id in genreIds)
        {
            filterStringBuilder.Append($"&genres={id}");
        }

        filterStringBuilder.Append($"&date={fromDate}");
        filterStringBuilder.Append($"&date={toDate}");

        var newUrl = _baseUrl + "create-event/" + filterStringBuilder;
        NavigationManager.NavigateTo(newUrl); //change url so a page reload will save the filters

        //get the showtimes from kino.dk
        (_availableShowtimes, _moviesWithoutShowtimes) = await KinoDkService.GetShowtimesFromFilters(_selectedCinemas, _selectedMovies, _selectedGenres, _startDate, _endDate.AddHours(23).AddMinutes(59));

        // Save votes for show times that were there before update 
        var stillAvailableShowtimeIds = new HashSet<int>(_availableShowtimeVotes
            .Select(v => v.ShowtimeId)
            .Intersect(_availableShowtimes.Select(s => s.Id)));

        // Remove votes for show times that are no longer available
        var votesToRemove = _availableShowtimeVotes
            .Where(v => !stillAvailableShowtimeIds.Contains(v.ShowtimeId))
            .ToList();
        foreach (var vote in votesToRemove)
        {
            _availableShowtimeVotes.Remove(vote);
        }

        // Add new votes for newly available showtimes
        var newVotes = _availableShowtimes
            .Where(s => !stillAvailableShowtimeIds.Contains(s.Id))
            .Select(s => new ParticipantVote { ShowtimeId = s.Id, SelectedOption = _selectOptionsForCreatePage[NoVoteIndex] })
            .ToList();
        foreach (var newVote in newVotes)
        {
            _availableShowtimeVotes.Add(newVote);
        }

        _loadingShowtimes = false;
    }


    //used to open the dialog where the user can enter the event details (Title, description, deadline etc.)
    private async Task OpenEventDetailsDialog()
    {
        if (_joinEvent.Showtimes.Count < 1)
        {
            await ShowSnackbar("Vælg mindst en mulig forestilling", "error");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "eventDetailsDialog");
        }
    }

    //used to open the final dialog, where the user can create the event
    private async Task OpenConfirmationDialog()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "eventConfirmDialog");
    }

    //Used to upload the event to the database, and navigate to the filling page
    private async Task FinishJoinEvent()
    {
        _uploadingEvent = true;

        //Get user info
        var authenticationState = await AuthenticationStateTask;
        var user = authenticationState.User;

        var authorId = user.Claims.FirstOrDefault(c => c.Type == "sub")?.Value!;
        var name = user.Claims.FirstOrDefault(c => c.Type == "nickname")?.Value!;
        var email = user.Claims.FirstOrDefault(c => c.Type == "email")?.Value;

        //Set host info
        var host = new Host();
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            host.AuthId = "1";
            host.Username = "Ukendt vært";
        }
        else
        {
            host.AuthId = authorId;
            host.Username = name;
            host.Email = email;
        }

        _joinEvent.Host = host;

        if (_hostCanAllShowtimes)
        {
            _joinEvent.Participants.Add(new Participant
            {
                AuthId = host.AuthId,
                Nickname = host.Username, Email = host.Email, Note = null,
                VotedFor = _joinEvent.Showtimes.Select(s => new ParticipantVote { ShowtimeId = s.Id, SelectedOption = _joinEvent.SelectOptions[YesVoteIndex] }).ToList(),
                JoinEventId = _joinEvent.Id
            });
        }

        //Upload event to database
        var response = await KinoJoinHttpClient.PutJoinEventAsync(_joinEvent);

        var id = await response.Content.ReadAsStringAsync();
        _joinEvent.Id = int.Parse(id);


        NavigationManager.NavigateTo("filling/" + _joinEvent.Id);
    }

    //Called when the user clicks on a showtime in the showtime selector
    private void OnVoteChange(ICollection<ParticipantVote> votes)
    {
        _availableShowtimeVotes = votes;

        //Save all show times, where voted yes
        _joinEvent.Showtimes = votes.Where(v => v.SelectedOption.VoteOption == _selectOptionsForCreatePage[YesVoteIndex].VoteOption)
            .Join(_availableShowtimes, v => v.ShowtimeId, s => s.Id,
                (_, showtime) => showtime).ToList();
    }

    private async Task UpdateBaseDataFromKinoDk()
    {
        await KinoJoinHttpClient.UpdateBaseDataFromKinoDkAsync();
    }

    private async Task ShowSnackbar(string message, string color)
    {
        _snackbarMessage = message;
        _snackbarColor = color;
        StateHasChanged();

        //Hide snackbar after 3 seconds
        await Task.Delay(3000).ContinueWith(_ => _snackbarMessage = null);
    }

}