@page "/filling/{JoinEventId}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>JoinEvent</PageTitle>

@if (_loading)
{
    <h3>Indlæser...</h3>
    return;
}

@if (_event is null)
{
    <h3>Ingen events fundet</h3>
    <p>Tjek at dit link er korrekt.</p>
    return;
}

@if (_showFirstLoginDialog)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center">
        <div class="bg-white mx-4 p-6 rounded-lg shadow-xl mb-40">
            <div class="flex justify-center flex-col space-y-2">
                <h4 class="font-bold">@_event.Host.Username vil gerne I biografen med dig! Du kan vælge hvilke forestillinger der passer dig bedst.</h4>
                <div class=" flex md:justify-end md:items-end">
                    <div class="w-full md:w-fit flex flex-col md:flex-row gap-2">
                        <button class="rounded-full border border-black shadow px-3 py-2 duration-300 transition font-label bg-primary text-white hover:bg-neutral-950 hover:text-white" onclick="@(() => { NavigationManager.NavigateToLogin("authentication/login", new InteractiveRequestOptions() { Interaction = InteractionType.SignIn, ReturnUrl = "/filling/" + _event?.Id }); })">Anvend dit kino login</button>
                        <button class="rounded-full border border-black shadow px-3 py-2 duration-300 transition font-label hover:bg-neutral-950 hover:text-white" onclick="@(() => { _showFirstLoginDialog = false; })">Uden login</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="p-2 border rounded my-2 w-full md:max-w-screen-md">
    <div class="space-y-2">
        <div class="flex flex-row">
            @if (_isEditing)
            {
                <input type="text" @bind="_event!.Title" style="margin-right: 5px"/>
            }
            else
            {
                <h1 class="font-label text-2xl">@_event!.Title</h1>
            }

            @if (_isHost)
            {
                <button style="margin-left: 5px;height: 40px" @onclick="async () => { if (_isEditing) await UpdateJoinEvent(); _isEditing = !_isEditing; }">

                    @(_isEditing ? "Gem ændringer" : "✎")
                </button>
            }
        </div>

        @if (_isEditing)
        {
            <textarea style="margin-bottom: 5px;width: 300px" type="text" placeholder="Beskrivelse"  @bind="_event.Description"></textarea>
        }
        else
        {
            if (_event.Description != "")
            {
                <p>@_event.Description</p>
                <br/>
            }
        }

        <div class="flex space-x-1">
            <span class="font-medium">Svarfrist</span>
            @if (_isEditing)
            {
                <input style="margin-bottom: 5px; width: 300px" type="date" placeholder="Deadline" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@_event!.Showtimes.Max(s => s.Playtime.StartTime.ToLocalTime()).ToString("yyyy-MM-dd")" @bind="@_deadline"/>
            }
            else
            {
                <span>
                    @_deadline.ToString("dd. MMM")
                </span>
            }
        </div>

        <span class="underline">Tidsinterval</span>
        <span> @_event.Showtimes.Min(s => s.Playtime.StartTime.ToLocalTime()).ToString("dd. MMM") - @_event.Showtimes.Max(s => s.Playtime.StartTime.ToLocalTime()).ToString("dd. MMM")</span>
        <br/>
        <button class=" rounded-full border border-black shadow duration-300 transition px-1 py-0.5 transition duration-100 font-label hover:bg-neutral-950 hover:text-white" @onclick="ScrollToBottom">Gå til resultater</button>
    </div>
</div>

<ShowtimeSelector SelectOptions="@_event.SelectOptions" Showtimes="@_event.Showtimes" Votes="@_votes" VotesChanged="OnVotesChanged"/>

<RegisterParticipantVote Event="_event" OnAnswerSaved="@(p => { _currentParticipant = p; StateHasChanged(); })" @bind-Nickname="@_nickname" AlreadyAnswered="_alreadyAnswered" VotedFor="_votes" LoggedInUserId="@_loggedInUserId"/>

<br/>
<br/>

<JoinEventResults CurrentParticipant="_currentParticipant" Event="_event" IsHost="_isHost"/>

@code {
    [Parameter] public required string JoinEventId { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private JoinEvent? _event;

    private List<ParticipantVote> _votes = [];

    private string? _nickname;

    private bool _loading = true;

    string _baseUrl = "";

    private bool _alreadyAnswered;

    private bool _isHost;

    private bool _isEditing;

    private bool _showFirstLoginDialog;

    private DateTime _deadline;

    private string? _loggedInUserId;

    private bool _isLoggedIn;

    private Participant _currentParticipant = new ();

    protected override async Task OnInitializedAsync()
    {
        _baseUrl = NavigationManager.BaseUri;
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync($"{_baseUrl}api/events/{JoinEventId}");
        if (response.IsSuccessStatusCode)
        {
            _event = await response.Content.ReadFromJsonAsync<JoinEvent>();
        }

        if (_event is { Showtimes: not null })
        {
            _votes = _event.Showtimes.Select(st =>
                new ParticipantVote
                {
                    ShowtimeId = st.Id, SelectedOptionId = _event.DefaultSelectOptionId, SelectedOption = _event.DefaultSelectOption
                }).ToList(); // a default vote for each showtime
        }


        //check if user is host
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        _isLoggedIn = user.Identity!.IsAuthenticated;
        if (_isLoggedIn)
        {
            var username = user.Identity.Name;
            _loggedInUserId = user.FindFirst(c => c.Type == "sub")?.Value;
            _isHost = _event?.Host?.AuthId == _loggedInUserId;
            _nickname = username;
            if (_event!.Participants!.Any(p => p.AuthId == _loggedInUserId))
            {
                _alreadyAnswered = true;
                _currentParticipant = _event.Participants.First(p => p.AuthId == _loggedInUserId);
            }
        }
        else
        {
            _showFirstLoginDialog = true;
            StateHasChanged();
        }

        _deadline = _event!.Deadline.ToLocalTime();
        _loading = false;

        Console.WriteLine("selectOptions: " + _event?.SelectOptions.Count);
    }

    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.scrollToBottom");
    }

    //TODO HVORNÅR BLIVER DEN HER KALDT, TIL FORSKEL FOR DET KALD VI LAVER INDE I "REGISTERPARTICIPANTVOTE"?
    private async Task UpdateJoinEvent()
    {
        _event!.Deadline = _deadline;
        var httpClient = new HttpClient();
        var response = await httpClient.PutAsJsonAsync($"{_baseUrl}api/events", _event);
        Console.WriteLine(response.IsSuccessStatusCode ? "Updated" : "Failed to update");
    }

    private void OnVotesChanged(List<ParticipantVote> votes)
    {
        _votes = votes;
    }

}