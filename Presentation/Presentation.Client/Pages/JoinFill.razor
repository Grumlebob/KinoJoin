@page "/filling/{JoinEventId}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>JoinEvent</PageTitle>

@if (_showFirstLoginDialog)
{
    @* Shouldn't be a component, should stay on this parent component. *@
    <h4>@_event?.Host?.Username vil gerne I biografen med dig! Du kan vælge hvilke forestillinger der passer dig bedst.</h4>
    <button onclick="@(() => { NavigationManager.NavigateToLogin("authentication/login", new InteractiveRequestOptions() { Interaction = InteractionType.SignIn, ReturnUrl = "/filling/" + _event?.Id }); })">Anvend dit kino login til at stemme</button>
    <button onclick="@(async () => { _showFirstLoginDialog = false; await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "firstLoginDialog"); })">Uden login</button>
}
else
{
    @if (_loading)
    {
        <h3>Indlæser...</h3>
        return;
    }

    @if (_event is null)
    {
        <h3>Ingen events fundet</h3>
        <p>Tjek at dit link er korrekt.</p>
        return;
    }

    @* Shouldn't be a component, should stay on this parent component. *@
    <div style="display: flex; flex-direction: row">
        @if (_isEditing)
        {
            <input type="text" @bind="_event.Title" style="margin-right: 5px"/>
        }
        else
        {
            <h1>@_event.Title</h1>
        }

        @if (_isHost)
        {
            <button style="margin-left: 5px;height: 40px" @onclick="async () => { if (_isEditing) await UpdateJoinEvent(); _isEditing = !_isEditing; }">

                @(_isEditing ? "Gem ændringer" : "✎")
            </button>
        }
        <button style="margin-left: 5px;height: 40px" @onclick="ScrollToBottom">Gå til resultater</button>
    </div>

    @* Shouldn't be a component, should stay on this parent component. *@
    @if (_isEditing)
    {
        <textarea style="margin-bottom: 5px;width: 300px" type="text"   placeholder="Beskrivelse"  @bind="_event.Description"></textarea>
    }
    else
    {
        <p>@_event.Description</p>
    }

    @* Shouldn't be a component, should stay on this parent component. *@
    <p>
        Deadline for tilmelding:
        @if (_isEditing)
        {
            <input style="margin-bottom: 5px; width: 300px" type="date" placeholder="Deadline" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@_event?.Showtimes?.Max(s => s.Playtime.StartTime.ToLocalTime()).ToString("yyyy-MM-dd")" @bind="@_deadline"/>
        }
        else
        {
            @_deadline.ToString("dd. MMM")
        }
    </p>
    <p>Tidsinterval: @_event?.Showtimes?.Min(s => s.Playtime.StartTime.ToLocalTime()).ToString("dd. MMM") - @_event?.Showtimes?.Max(s => s.Playtime.StartTime.ToLocalTime()).ToString("dd. MMM")</p>
    
    <ShowtimeSelector SelectOptions="_event.SelectOptions" Showtimes="_event.Showtimes" VotedFor="_votedFor.Select(v => (v.Showtime,v.VoteIndex )).ToList()"  VotedForChanged="OnVotesChanged" />

    <RegisterParticipantVote Event="_event" OnAnswerSaved="@(p => { _currentParticipant = p; StateHasChanged(); })"  @bind-Nickname="@_nickname" AlreadyAnswered="_alreadyAnswered"  VotedFor="_votedFor" LoggedInUserId="@_loggedInUserId" />
    
    <br/>
    <br/>
    <JoinEventResults CurrentParticipant="_currentParticipant" _event="_event"  _isHost="_isHost"/>
}

@code {
    [Parameter] public required string JoinEventId { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private JoinEvent? _event;

    private List<ParticipantVote> _votedFor = [];
    
    private string? _nickname;
    
    private bool _loading = true;

    string _baseUrl = "";

    private bool _alreadyAnswered;

    private bool _isHost;

    private bool _isEditing;

    private bool _showFirstLoginDialog;

    private DateTime _deadline;

    private string? _loggedInUserId;
    
    private bool _isLoggedIn;
    
    private Participant _currentParticipant;

    protected override async Task OnInitializedAsync()
    {
        _baseUrl = NavigationManager.BaseUri;
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync($"{_baseUrl}event/{JoinEventId}");
        if (response.IsSuccessStatusCode)
        {
            _event = await response.Content.ReadFromJsonAsync<JoinEvent>();
        }

        if (_event is { Showtimes: not null })
        {
            _votedFor = _event.Showtimes.Select(st => new ParticipantVote { ShowtimeId = st.Id, Showtime = st, VoteIndex = 0}).ToList(); // a vote for each showtime
        }


        //check if user is host
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        _isLoggedIn = user.Identity!.IsAuthenticated;
        if (_isLoggedIn)
        {
            var username = user.Identity.Name;
            _loggedInUserId = user.FindFirst(c => c.Type == "sub")?.Value;
            _isHost = _event?.Host?.AuthId == _loggedInUserId;
            _nickname = username;
            if (_event!.Participants!.Any(p => p.AuthId == _loggedInUserId))
            {
                _alreadyAnswered = true;
                _currentParticipant = _event.Participants.First(p => p.AuthId == _loggedInUserId);
            }
        }
        else
        {
            _showFirstLoginDialog = true;
            StateHasChanged();
        }

        _deadline = _event!.Deadline.ToLocalTime();
        _loading = false;
        
        Console.WriteLine("selectOptions: " + _event?.SelectOptions.Count);
    }

    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.scrollToBottom");
    }

    private async Task UpdateJoinEvent()
    {
        _event!.Deadline = _deadline;
        var httpClient = new HttpClient();
        var response = await httpClient.PutAsJsonAsync($"{_baseUrl}putJoinEvent", _event);
        Console.WriteLine(response.IsSuccessStatusCode ? "Updated" : "Failed to update");
    }

    private void OnVotesChanged(List<(Showtime, int vote)> votes)
    {
        _votedFor = votes.Select(v => new ParticipantVote { ShowtimeId = v.Item1.Id, Showtime = v.Item1, VoteIndex = v.vote}).ToList();
    }

}
