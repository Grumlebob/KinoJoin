@page "/filling/{JoinEventId}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IKinoJoinHttpClient KinoJoinHttpClient
@inject SqidsEncoder<int> SqidsEncoder

<PageTitle>JoinEvent</PageTitle>

@if (_loading)
{
    <div class="flex justify-center">
        <LoadingIndicator/>
    </div>
    return;
}

@if (_event is null)
{
    <h3>Ingen events fundet</h3>
    <p>Tjek at dit link er korrekt.</p>
    return;
}

@if (_showFirstLoginDialog)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
        <div class="mx-4 mb-40 rounded-lg bg-white p-6 shadow-xl">
            <div class="flex flex-col justify-center space-y-2">
                <h2 class="text-xl font-bold">@_event.Host.Username vil gerne I biografen med dig! Du kan vælge hvilke forestillinger der passer dig bedst.</h2>
                <div class="flex md:items-end md:justify-end">
                    <div class="flex w-full flex-col gap-2 md:w-fit md:flex-row">
                        <Button Variant="Button.ButtonVariant.White" OnClick="@(() => { _showFirstLoginDialog = false; })">Uden login</Button>
                        <Button Variant="Button.ButtonVariant.Red" OnClick="@(() => { NavigationManager.NavigateToLogin("authentication/login", new InteractiveRequestOptions() { Interaction = InteractionType.SignIn, ReturnUrl = "/filling/" + _event?.Id }); })"> Anvend dit Kino login</Button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="flex justify-center">
    <div class="my-2 flex flex-col gap-2 md:flex-row">
        <div class="w-full rounded border p-3 md:w-fit md:max-w-md">
            <div class="space-y-3">
                <div class="flex flex-row gap-1">
                    @if (_isEditing)
                    {
                        <input class="w-full rounded-full border p-1 md:w-60" type="text" @bind="_event!.Title"/>
                    }
                    else
                    {
                        <h1 class="text-2xl font-label">@_event!.Title</h1>
                    }

                    @if (_isHost)
                    {
                        @if (_isEditing)
                        {
                            <Button Variant="Button.ButtonVariant.White" OnClick="@(async () => { await UpdateJoinEvent(); _isEditing = false; })">Gem ændringer</Button>
                        }
                        else
                        {
                            <button onclick="@(() => { _isEditing = true; })">
                                <EditIcon Class="fill-black hover:bg-gray-200 rounded p-1"/>
                            </button>
                        }
                    }
                </div>

                @if (_isEditing)
                {
                    <textarea class="w-full rounded-2xl border p-1 md:w-60" type="text" cols="5" placeholder="Beskrivelse"  @bind="_event.Description"></textarea>
                }
                else
                {
                    if (_event.Description != "")
                    {
                        <p>@_event.Description</p>
                        <br/>
                    }
                }

                <div class="flex w-full space-x-1 md:w-60">
                    <span class="font-medium">Svarfrist:</span>
                    @if (_isEditing)
                    {
                        <input class="w-full rounded-2xl border" type="date" placeholder="Deadline" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@_event!.Showtimes.Max(s => s.Playtime.StartTime).ToString("yyyy-MM-dd")" @bind="@_deadline"/>
                    }
                    else
                    {
                        <span>
                            @_deadline.ToString("dd. MMM")
                        </span>
                    }
                </div>

                <span class="font-medium">Tidsinterval:</span>
                <span> @_event.Showtimes.Min(s => s.Playtime.StartTime).ToString("dd. MMM") - @_event.Showtimes.Max(s => s.Playtime.StartTime).ToString("dd. MMM")</span>
                <br/>
                <Button Variant="Button.ButtonVariant.White" OnClick="@ScrollToBottom" Class="font-label">Se Resultater</Button>
            </div>
        </div>
        @if (_isHost)
        {
            <div class="w-full rounded border p-3 space-y-1 md:w-fit md:max-w-md">
                <p class="text-lg font-semibold mb-0.5">Send et link til eventet til dine venner.</p>
                <div class="flex items-center">
                    <a href="@(_baseUrl + "filling/" + SqidsEncoder.Encode(_event.Id))" class="text-lg text-blue-600 hover:text-blue-700">
                        @(_baseUrl + "filling/" + SqidsEncoder.Encode(_event.Id))
                    </a>
                    <button @onclick="@(async () => { await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _baseUrl + "filling/" + SqidsEncoder.Encode(_event.Id)); })">
                        <CopyIcon Class="hover:bg-gray-200 p-2 rounded-full"/>
                    </button>
                    <button @onclick="ShareEvent" class="rounded-full p-1 text-white bg-secondary hover:bg-gray-700 lg:hidden">
                        <svg class="fill-white" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="16" height="16" viewBox="0 0 30 30">
                            <path d="M 23 3 A 4 4 0 0 0 19 7 A 4 4 0 0 0 19.09375 7.8359375 L 10.011719 12.376953 A 4 4 0 0 0 7 11 A 4 4 0 0 0 3 15 A 4 4 0 0 0 7 19 A 4 4 0 0 0 10.013672 17.625 L 19.089844 22.164062 A 4 4 0 0 0 19 23 A 4 4 0 0 0 23 27 A 4 4 0 0 0 27 23 A 4 4 0 0 0 23 19 A 4 4 0 0 0 19.986328 20.375 L 10.910156 15.835938 A 4 4 0 0 0 11 15 A 4 4 0 0 0 10.90625 14.166016 L 19.988281 9.625 A 4 4 0 0 0 23 11 A 4 4 0 0 0 27 7 A 4 4 0 0 0 23 3 z"></path>
                        </svg>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<ShowtimeSelector HasAnswered="@(_alreadyAnswered || _justAnswered)" SelectOptions="@_event.SelectOptions" Showtimes="@_event.Showtimes" LegendTitle="Tryk på de tider du kan" Votes="@_currentParticipant.VotedFor" VotesChanged="OnVotesChanged"/>

<RegisterParticipantVote Event="_event" OnAnswerSaved="OnAnswerSaved" @bind-Nickname="@_currentParticipant.Nickname" AlreadyAnswered="_alreadyAnswered" VotedFor="@_currentParticipant.VotedFor" LoggedInUserId="@_currentParticipant.AuthId"/>

<br/>
<br/>

<JoinEventResults @ref="_joinEventResults"CurrentParticipant="_currentParticipant" Event="_event" IsHost="_isHost"/>

@code {
    [Parameter] public required string JoinEventId { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private JoinEvent? _event;

    private bool _loading = true;

    string _baseUrl = "";

    private bool _alreadyAnswered;

    private bool _justAnswered;

    private bool _isHost;

    private bool _isEditing;

    private bool _showFirstLoginDialog;

    private DateTime _deadline;

    private bool _isLoggedIn;

    private Participant _currentParticipant = new() { VotedFor = [] };

    private JoinEventResults _joinEventResults;

    protected override async Task OnInitializedAsync()
    {
        _baseUrl = NavigationManager.BaseUri;
        var id = SqidsEncoder.Decode(JoinEventId).FirstOrDefault();
        if (SqidsEncoder.Encode(id) == JoinEventId) //avoid false positives
        {
            _event = await KinoJoinHttpClient.GetJoinEventAsync(id);
        }
        else
        {
            _event = null;
        }

        if (_event is null)
        {
            _loading = false;
            return;
        }

        _currentParticipant.VotedFor = _event.Showtimes.Select(st =>
            new ParticipantVote
            {
                ShowtimeId = st.Id, SelectedOptionId = _event.DefaultSelectOptionId, SelectedOption = _event.DefaultSelectOption
            }).ToList(); // a default vote for each showtime


        //check if user is host
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        _isLoggedIn = user.Identity!.IsAuthenticated;
        if (_isLoggedIn)
        {
            var username = user.Identity.Name;
            _currentParticipant.AuthId = user.FindFirst(c => c.Type == "sub")?.Value;
            _isHost = _event?.Host?.AuthId == _currentParticipant.AuthId;
            _currentParticipant.Nickname = username;
            if (_event!.Participants!.Any(p => p.AuthId == _currentParticipant.AuthId))
            {
                _alreadyAnswered = true;
                _currentParticipant = _event.Participants.First(p => p.AuthId == _currentParticipant.AuthId);
            }
        }
        else
        {
            _showFirstLoginDialog = true;
            StateHasChanged();
        }

        _deadline = _event!.Deadline;
        _loading = false;
    }

    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.scrollToBottom");
    }

    //TODO HVORNÅR BLIVER DEN HER KALDT, TIL FORSKEL FOR DET KALD VI LAVER INDE I "REGISTERPARTICIPANTVOTE"?
    private async Task UpdateJoinEvent()
    {
        _event!.Deadline = _deadline;
        var response = await KinoJoinHttpClient.PutJoinEventAsync(_event);
    }

    private void OnVotesChanged(ICollection<ParticipantVote> votes)
    {
        _currentParticipant.VotedFor = votes;
    }

    private void OnAnswerSaved(Participant p)
    {
        _currentParticipant = p;
        _justAnswered = true;
        _joinEventResults.UpdateSorting();
    }

    private async Task ShareEvent()
    {
        var data = new
        {
            title = _event.Title,
            text = _event.Description,
            url = _baseUrl + "filling/" + SqidsEncoder.Encode(_event.Id)
        };

        await JsRuntime.InvokeVoidAsync("navigator.share", data);
    }

}