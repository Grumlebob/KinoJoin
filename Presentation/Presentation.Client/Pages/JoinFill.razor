@page "/filling/{JoinEventId}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IKinoJoinHttpClient KinoJoinHttpClient
@inject SqidsEncoder<int> SqidsEncoder
@inject IUserInfoService UserInfoService

<PageTitle>JoinEvent</PageTitle>

@if (_loading)
{
    <div class="flex justify-center">
        <LoadingIndicator/>
    </div>
    return;
}

@if (_joinEvent is null)
{
    <h3>Ingen events fundet</h3>
    <p>Tjek at dit link er korrekt.</p>
    return;
}

@if (_showFirstLoginDialog)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
        <div class="mx-4 mb-40 rounded-lg bg-white p-6 shadow-xl">
            <div class="flex flex-col justify-center space-y-2">
                <h2 class="text-xl font-bold">@_joinEvent.Host!.Username vil gerne I biografen med dig! Du kan vælge hvilke forestillinger der passer dig bedst.</h2>
                <div class="flex md:items-end md:justify-end">
                    <div class="flex w-full flex-col gap-2 md:w-fit md:flex-row">
                        <button class="btn-white" onclick="@(() => { _showFirstLoginDialog = false; })">Uden login</button>
                        <button class="btn-red" onclick="@(() => { NavigationManager.NavigateToLogin("authentication/login", new InteractiveRequestOptions() { Interaction = InteractionType.SignIn, ReturnUrl = "/filling/" + JoinEventId }); })"> Anvend dit Kino login</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@* Title and share boxes *@
<div class="flex justify-center">
    <div class="my-2 flex flex-col gap-2 md:flex-row">

        @* join event title and information box *@
        <div class="w-full rounded bg-gray-50 p-3 shadow-md md:w-fit md:max-w-md">
            <div class="space-y-3">

                @if (!_isEditing)
                {
                    @* show information about join event staticaly *@
                    <div class="flex flex-row gap-1">
                        <h1 class="text-2xl font-label">@_joinEvent!.Title</h1>

                        @if (_isHost)
                        {
                            <button onclick="@(() => { _isEditing = true; })">
                                <img src="Icons/EditIcon.svg" alt="edit" Class="hover:bg-gray-200 h-6 w-6 rounded p-1"/>
                            </button>
                        }
                    </div>

                    if (_joinEvent.Description != "")
                    {
                        <p>@_joinEvent.Description</p>
                        <br/>
                    }

                    <div class="flex w-full space-x-1 md:w-60">
                        <span class="font-medium">Svarfrist:</span>
                        <span> @_joinEvent.Deadline.ToString("dd. MMM") </span>
                    </div>
                }
                else if (_isEditing)
                {
                    @* Form for host to edit title description and deadline *@
                    <EditForm OnValidSubmit="@(async () => { await KinoJoinHttpClient.PutJoinEventAsync(_joinEvent); _isEditing = false; })" model="@_joinEvent">
                        <DataAnnotationsValidator/>

                        <div class="text-error">
                            <ValidationSummary/>
                        </div>

                        <div class="mb-1 flex flex-row gap-1">
                            <InputText class="w-full rounded-full border px-4 py-2 md:w-60" @bind-Value="_joinEvent!.Title"/>
                            <button class="btn-black" type="submit">Gem ændringer</button>
                        </div>

                        <InputTextArea class="w-full rounded-3xl border px-4 py-2 md:w-60" @bind-Value="_joinEvent.Description" placeholder="Beskrivelse (valgfrit)"/>

                        <div class="flex w-full space-x-1 md:w-60">
                            <span class="font-medium">Svarfrist:</span>
                            <input type="date" class="w-full rounded-2xl border" value="@_joinEvent.Deadline.ToString("yyyy-MM-dd")" @oninput="@(v => { if (DateTime.TryParse(v.Value?.ToString(), CultureInfo.InvariantCulture, out var parsedDate)) _joinEvent.Deadline = parsedDate; })"/>
                        </div>
                    </EditForm>
                }

                <span class="font-medium">Tidsinterval:</span>
                <span> @_joinEvent.Showtimes.Min(s => s.Playtime.StartTime).ToString("dd. MMM") - @_joinEvent.Showtimes.Max(s => s.Playtime.StartTime).ToString("dd. MMM")</span>

                <br/>

                <a class="btn-white font-label" href="@(NavigationManager.Uri + "#results")">Se Resultater</a>
            </div>
        </div>

        @* Share event card*@
        @if (_isHost)
        {
            <div class="w-full rounded border bg-gray-50 p-3 shadow-md space-y-1 md:w-fit md:max-w-md">
                <p class="text-lg font-semibold mb-0.5">Send et link til eventet til dine venner.</p>
                <div class="flex h-8 items-center gap-x-2">
                    <a href="@(_baseUrl + "filling/" + SqidsEncoder.Encode(_joinEvent.Id))" class="text-lg text-blue-600 hover:text-blue-700">
                        @((_baseUrl + "filling/" + SqidsEncoder.Encode(_joinEvent.Id)).Replace("https://", ""))
                    </a>

                    <div class="group">
                        <button class="btn-white min-w-6" onclick="@(async () => { await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _baseUrl + "filling/" + SqidsEncoder.Encode(_joinEvent.Id)); })">
                            <img src="Icons/CopyIcon.svg" alt="copy" class="h-full rounded-full group-hover:invert"/>
                        </button>
                    </div>

                    <button class="btn-black min-w-6 lg:hidden" onclick="@(async () => { await ShareEvent(); })">
                        <img src="Icons/ShareIcon.svg" alt="share" class="h-full"/>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@* The showtimes they can vote on *@
<ShowtimeSelector HasAnswered="@_currentParticipantAlreadyAnswered" SelectOptions="@_joinEvent.SelectOptions" DefaultSelectOption="@_joinEvent.DefaultSelectOption" Showtimes="@_joinEvent.Showtimes" LegendTitle="Tryk på de tider du kan" ShowtimeChoices="@_currentParticipant.VotedFor" ChoicesChanged="votes => _currentParticipant.VotedFor = votes"/>

@* "Send Svar" button, or text saying you have answered*@
@if (!_currentParticipantAlreadyAnswered)
{
    <div class="flex justify-center">
        <button class="p-4 text-xl font-bold btn-red" @onclick="OpenParticipantInfoDialog">
            Send svar
        </button>
    </div>

    if (_somethingWentWrong)
    {
        <p class="text-4xl text-red-700">Noget gik galt. Prøv igen.</p>
    }
}
else
{
    <p class="text-2xl font-semibold text-success-darkest md:mt-7">Dit svar er registreret</p>
}

<br/>
<br/>

@* Dialog appearing if the user tries to send and answer when no showtimes are picked *@
<dialog class="rounded p-5" id="NoShowtimesDialog">
    <div class="flex flex-col items-end gap-4 text-center">
        <h4 class="w-full text-xl font-bold">Obs! Du har ikke valgt nogen tider</h4>
        <h4 class="font-bold">Vil du indsende et tomt svar, der viser du ikke kan nogen tider?</h4>
        <div class="flex gap-1">
            <button class="btn-white" onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "NoShowtimesDialog"))">Nej</button>
            <button class="btn-black" onclick="@(async () => { await JsRuntime.InvokeVoidAsync("hideDialog", "NoShowtimesDialog"); await JsRuntime.InvokeVoidAsync("showDialog", "ParticipantInfoDialog"); })">Ja</button>
        </div>
    </div>
</dialog>

@* Dialog where the user can enter their information when sending an answer*@
<dialog id="ParticipantInfoDialog" class="mx-auto my-12 max-w-lg rounded-lg bg-white p-6 shadow-xl">
    <EditForm Model="@_currentParticipant" OnValidSubmit="@SaveParticipantAnswer" class="w-full space-y-4 md:mt-7 md:w-80">
        <DataAnnotationsValidator/>

        <h3 class="font-bold">Dine oplysninger</h3>
        <div class="text-error">
            <ValidationSummary/>
        </div>
        <InputText class="w-full rounded-full border bg-gray-50 p-2" @bind-Value="@_currentParticipant.Nickname" placeholder="Indtast dit navn" required/>
        @if (_joinEvent.Participants.Any(p => p.Nickname == _currentParticipant.Nickname))
        {
            <p class="text-warning">Bemærk, deltager med samme navn findes allerede</p>
        }
        <InputText class="w-full rounded-full border bg-gray-50 p-2" @bind-Value="@_currentParticipant.Email" placeholder="Skriv din email (valgfrit)" type="email"/>
        @if (_joinEvent.Participants.Any(p => p.Email == _currentParticipant.Email))
        {
            <p class="text-warning">Bemærk, deltager med samme email findes allerede</p>
        }

        <div>
            <InputTextArea class="h-32 w-full resize-none rounded-3xl border bg-gray-50 p-2" @bind-Value="@_currentParticipant.Note" placeholder="Note (valgfrit)"/>
        </div>
        <div class="mt-5 mb-5 flex justify-end space-x-3">
            <button type="button" class="btn-white" onclick="@(async () => await JsRuntime.InvokeVoidAsync("hideDialog", "ParticipantInfoDialog"))">Annuller</button>
            <button type="submit" class="btn-black">Send svar</button>
        </div>
    </EditForm>
</dialog>

@* Results of the join event *@
<JoinEventResults @ref="_joinEventResults" CurrentParticipant="_currentParticipant" JoinEvent="_joinEvent" IsHost="_isHost"/>

@code {
    [Parameter] public required string JoinEventId { get; set; }

    //Used to get info on the currently logged in user
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private JoinEvent? _joinEvent;

    private Participant _currentParticipant = new() { VotedFor = [] };

    private JoinEventResults _joinEventResults = null!;

    private bool _currentParticipantAlreadyAnswered;

    private bool _showFirstLoginDialog;

    private bool _loading = true;

    private bool _isLoggedIn;

    private bool _isHost;

    private bool _isEditing;

    //If something went wrong when saving the participant answer, this will be true
    private bool _somethingWentWrong;

    string _baseUrl = "";

    protected override async Task OnInitializedAsync()
    {
        _baseUrl = NavigationManager.BaseUri;

        //To prevent people guessing the Id of join events they are not invited to, we encode the Id
        var id = SqidsEncoder.Decode(JoinEventId).FirstOrDefault();
        if (SqidsEncoder.Encode(id) == JoinEventId) //avoid false positives
        {
            _joinEvent = await KinoJoinHttpClient.GetJoinEventAsync(id);
        }
        else
        {
            _joinEvent = null;
        }

        if (_joinEvent is null)
        {
            _loading = false;
            return;
        }

        _currentParticipant.VotedFor = _joinEvent.Showtimes.Select(st =>
            new ParticipantVote
            {
                ShowtimeId = st.Id, SelectedOptionId = _joinEvent.DefaultSelectOptionId, SelectedOption = _joinEvent.DefaultSelectOption
            }).ToList(); // a default vote for each showtime


        var userInfo = await UserInfoService.GetUserInfoAsync(AuthenticationStateTask);

        _isLoggedIn = userInfo != null;

        if (_isLoggedIn)
        {
            _currentParticipant.AuthId = userInfo!.Value.authId;
            _isHost = _joinEvent?.Host?.AuthId == _currentParticipant.AuthId;
            _currentParticipant.Nickname = userInfo.Value.name;
            if (_joinEvent!.Participants.Any(p => p.AuthId == _currentParticipant.AuthId))
            {
                _currentParticipantAlreadyAnswered = true;
                _currentParticipant = _joinEvent.Participants.First(p => p.AuthId == _currentParticipant.AuthId);
            }
        }
        else
        {
            _showFirstLoginDialog = true;
            StateHasChanged();
        }

        _loading = false;
    }

    private async Task OpenParticipantInfoDialog()
    {
        //If the user has not selected any showtimes, ask if they want to send an empty answer
        if (_currentParticipant.VotedFor.All(v => v.SelectedOptionId == _joinEvent!.DefaultSelectOptionId))
        {
            await JsRuntime.InvokeVoidAsync("showDialog", "NoShowtimesDialog");
            return;
        }

        await JsRuntime.InvokeVoidAsync("showDialog", "ParticipantInfoDialog");
    }

    private async Task SaveParticipantAnswer()
    {
        await JsRuntime.InvokeVoidAsync("hideDialog", "ParticipantInfoDialog");

        //Dont save votes for the default option
        _currentParticipant.VotedFor = _currentParticipant.VotedFor.Where(v => v.SelectedOptionId != _joinEvent!.DefaultSelectOptionId).ToList();
        _joinEvent!.Participants.Add(_currentParticipant);

        var response = await KinoJoinHttpClient.PutJoinEventAsync(_joinEvent);
        if (response.IsSuccessStatusCode)
        {
            _currentParticipant.Id = int.Parse(await response.Content.ReadAsStringAsync());
            _currentParticipantAlreadyAnswered = true;
            _joinEventResults.UpdateSorting();

            StateHasChanged();
        }
        else
        {
            _somethingWentWrong = true;
        }
    }

    private async Task ShareEvent()
    {
        var data = new
        {
            title = _joinEvent!.Title,
            text = _joinEvent.Description,
            url = _baseUrl + "filling/" + SqidsEncoder.Encode(_joinEvent.Id)
        };

        await JsRuntime.InvokeVoidAsync("navigator.share", data);
    }

}