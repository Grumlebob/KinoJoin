<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link rel="stylesheet" href="Presentation.styles.css"/>
    <link rel="icon" type="image/png" href="favicon.svg"/>
    <link rel="stylesheet" href="app.min.css"/>

    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-bold-webfont/stylesheet.css"/>
    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-bolditalic-webfont/stylesheet.css"/>
    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-medium-webfont/stylesheet.css"/>
    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-mediumitalic-webfont/stylesheet.css"/>
    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-regular-webfont/stylesheet.css"/>
    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-regularitalic-webfont/stylesheet.css"/>
    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-semibold-webfont/stylesheet.css"/>
    <link rel="stylesheet" href="fonts/Basier_Square_Webfont/Basier-Square-semibolditalic-webfont/stylesheet.css"/>

    <HeadOutlet @rendermode="InteractiveWebAssembly"/>
</head>

<body class="bg-[#f1f1f1]">
<Routes @rendermode="new InteractiveWebAssemblyRenderMode(false)"/>
<script src="_framework/blazor.web.js"></script>
<script src="_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js"></script>


<script>
    customFunctions={
        
        showDialog:function (dialogId) {
            var dialog = document.getElementById(dialogId);
            if (dialog) {
                dialog.showModal();
            }
        },
        
        hideDialog: function (dialogId) {
            var dialog = document.getElementById(dialogId);
            if (dialog) {
                dialog.close();
            }
        },
        
        scrollToBottom: function() {
               window.scrollTo({
                    top: document.body.scrollHeight,
                    behavior: 'smooth'
                });
        },
        
        scrollToBottomIncrementally: function() {
            const totalHeight = document.body.scrollHeight;
            let currentScroll = window.scrollY;
            const step = 50; // Adjust the step size as needed
        
            function scrollStep() {
                if (currentScroll < totalHeight) {
                    window.scrollTo(0, currentScroll);
                    currentScroll += step;
                    requestAnimationFrame(scrollStep);
                }
            }
        
            scrollStep();
        },
        

        
    }
    
    function setScrollButtons (elementId) {
                   let scrollContainer = document.getElementById(elementId);
                   let leftBlur = document.getElementById(`${elementId}-blur-left`);
                   let rightBlur = document.getElementById(`${elementId}-blur-right`);
                   
                   if (!scrollContainer || !leftBlur || !rightBlur)
                       return;
                   
                   leftBlur.onclick = () => {scrollContainer.scrollTo({
                                               left: scrollContainer.scrollLeft - 300,
                                               behavior: 'smooth'
                                             })};
                   rightBlur.onclick = () => {scrollContainer.scrollTo({
                                                left: scrollContainer.scrollLeft + 300,
                                                behavior: 'smooth'
                                             })};
                   
                   const toggleScrollButtons = function() {
                       if (scrollContainer.scrollWidth <= scrollContainer.clientWidth) { //no overflow
                           leftBlur.style.display = "none";
                           rightBlur.style.display = "none";
                           return;
                       }
                      
                       if (scrollContainer.scrollLeft === 0) { //scrolled to left end
                          leftBlur.style.display = "none";
                       }
                       else {
                           leftBlur.style.display = "block";
                       }
                       
                       if (scrollContainer.scrollLeft + scrollContainer.clientWidth >= scrollContainer.scrollWidth - 1) { //scrolled to right end
                           rightBlur.style.display = "none";
                       }
                       else {
                           rightBlur.style.display = "block";
                       }
                   }
                   toggleScrollButtons(); //initially calculate if it should show buttons
                   scrollContainer.onscroll = toggleScrollButtons; //dynamically calculate when scrolling
               }
    
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
                    const arrayBuffer = await contentStreamReference.arrayBuffer();
                    const blob = new Blob([arrayBuffer]);
                    const url = URL.createObjectURL(blob);
                    const anchorElement = document.createElement('a');
                    anchorElement.href = url;
                    anchorElement.download = fileName ?? '';
                    anchorElement.click();
                    anchorElement.remove();
                    URL.revokeObjectURL(url);
                }
    </script>
</body>

</html>
